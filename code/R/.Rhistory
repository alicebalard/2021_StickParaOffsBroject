ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
plot(myNMDS, type = "t")
# prettier with ggplot2
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
groups <- unique(data.scores$grp)
sub <- data.scores[data.scores$grp %in% groups[1], ][chull(data.scores[data.scores$grp %in% groups[1], c("NMDS1", "NMDS2")]), ]
makeHullDF <- function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
}
hull.data <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
---
title: "R Notebook"
output: html_notebook
---
# 1. Sequencing of bisulfite-converted DNA
))
## Analyses
## A. Balard
## November 2021
library(plyr) # for join (keep row order)
library(dendextend) # The package dendextend contains many functions for changing the appearance of a dendrogram and for comparing dendrograms.
library(ggplot2)
library(ggsignif) ## for significance bars on ggplot
library(lme4) ## for mixed models
library(nlme) ## for mixed models
library(tidyverse)
library(emmeans) ## for post-hoc Tukey tests
library(genepop) ## for epi-Fst
library(adegenet) ## for epi-Fst
library(poppr) # to handle missing data in epi-SNP ("missingno")
library(hierfstat) # to calculate heterozygosity
library(RColorBrewer)
# clear all objects
# rm(list = ls(all.names = TRUE))
## load custom functions
source("customRfunctions.R")
## Load previously united data (all 6 treatments)
## uniteCovALL: CpG covered in ALL individuals (has no NAs, useful for exploratory clustering analyses)
#load("/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/uniteCovALL_woSexAndUnknownChr.RData")
## For further analyses: CpG covered in at least 2 then 6 individuals per group
#load("/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/uniteCov2_woSexAndUnknownChr.RData")
# load("../../gitignore/output/uniteCov2_woSexAndUnknownChr.RData")
#load("/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/uniteCov6_woSexAndUnknowChr.RData")
## Load samples metadata
## Metylation metadata merged with Kostas files
fullMetadata <- read.csv("../../data/fullMetadata137_Alice.csv")
## relevel treatments for graphs
fullMetadata$trtG1G2 <- factor(as.factor(fullMetadata$trtG1G2), levels = c("Control", "Exposed","NE_control", "NE_exposed", "E_control", "E_exposed"  ))
## family as factor for models
fullMetadata$Family <- as.factor(fullMetadata$Family)
#####################################################################
## Compare fitness traits between the different offsprings groups ###
## Follow up of Sagonas 2020 & Ferre Ortega's master's dissertation #
#####################################################################
fullMetadata_offs <- fullMetadata[fullMetadata$Generat %in% "O",]
fullMetadata_offs$trtG1G2 <- droplevels(fullMetadata_offs$trtG1G2)
## Create variable for offsping and parents separated
fullMetadata_offs$offsTrt <- "controlO"
fullMetadata_offs$offsTrt[fullMetadata_offs$Tr %in% c("TT", "CT")] <- "infectedO"
fullMetadata_offs$patTrt <- "controlP"
fullMetadata_offs$patTrt[fullMetadata_offs$Tr %in% c("TC", "TT")] <- "infectedP"
## Sanity check
table(fullMetadata_offs$offsTrt, fullMetadata_offs$trtG1G2)
table(fullMetadata_offs$patTrt, fullMetadata_offs$trtG1G2)
## Kaufmann et al. 2014: Body condition of the G2 fish, an estimate of fish health and a predictor
# of energy reserves and reproductive success, was calculated using there residuals from the
# regression of body mass on body length (Chellappaet al.1995).
fullMetadata_offs$BCI <- residuals(lmer(Wnettofin ~ Slfin * Sex + (1|Family), data=fullMetadata_offs))
## Effect of paternal treatment on body condition of offspring:
## Kaufmann et al. 2014:
# To investigate in which way paternal G1 exposure affected offspring tolerance,
# we tested how the relationship between G2 body condition and infection intensity
# was affected by paternal G1 exposure. This was tested in a linear mixed model on
# G2 body condition with paternal G1 treatment and the interaction between
# paternal G1 treatment and G2 infection intensity as fixed effects. Maternal
# half-sibship identity was set as a random effect
## Effect of paternal exposure on tolerance:
modTol <- lme(BCI ~ patTrt + patTrt:No.Worms,random=~1|Family,data=fullMetadata_offs)
anova(modTol)
## Or modTol <- lme(BCI ~ patTrt*No.Worms,random=~1|Family,data=fullMetadata_offs)
myBCdf <- fullMetadata_offs %>% group_by(patTrt, No.Worms) %>%
summarise(BCI = mean(BCI)) %>% data.frame()
ggplot(fullMetadata_offs, aes(x=No.Worms, y = BCI, group = patTrt, col = patTrt))+
geom_point() + geom_line(data=myBCdf)+
geom_point(data=myBCdf, aes(fill = patTrt), col = "black", size = 3, pch = 21)+
scale_color_manual(values = c("gray", "red"))+
scale_fill_manual(values = c("gray", "red"))+
theme_bw()
## Effect of treatment groups of offspring on body condition:
## Kaufmann et al. 2014:
# The linear mixed effect model (nlme function in R) included G2 body condition as dependent variable,
# sex, G2 treatment (exposed vs. control), paternal G1 treatment (exposed vs. control)
# and their interactions as fixed effects as well as maternal G2 half-sibship identity as a random effect
mod1 <- lme(BCI ~ offsTrt * patTrt, random=~1|Family,data=fullMetadata_offs)
anova(mod1) # strong significant effect of both offspring trt & paternal + interactions
mod1.2 <- lme(BCI ~  trtG1G2, random=~1|Family,data=fullMetadata_offs)
## pairwise posthoc test
emmeans(mod1.2, list(pairwise ~ trtG1G2), adjust = "tukey")
## Control father - treatment offspring has a strongly significantly lower BC than
## every other group, same as Kaufmann et al. 2014
plot <- ggplot(fullMetadata_offs, aes(x=trtG1G2, y = BCI))+
geom_boxplot()+
geom_signif(comparisons = list(c("NE_control", "NE_exposed")),
map_signif_level=TRUE, annotations="***",
y_position = 150, tip_length = 0, vjust=0.4) +
geom_signif(comparisons = list(c("NE_exposed", "E_control")),
map_signif_level=TRUE, annotations="***",
y_position = 200, tip_length = 0, vjust=0.4) +
geom_signif(comparisons = list(c("NE_exposed", "E_exposed")),
map_signif_level=TRUE, annotations="***",
y_position = 250, tip_length = 0, vjust=0.4) +
theme_bw()
pdf(file = "../../data/fig/BCIoffspring.pdf")
plot
dev.off()
#######################################################
## Nbr/Ratio of Methylated Sites in different groups ##
#######################################################
## Nbr samples: 137
nrow(fullMetadata)
# Mean nbr of million reads: 11.2
mean(fullMetadata$M.Seqs_rawReads)
# 95% confidence interval: 0.35
qnorm(0.975)*sd(fullMetadata$M.Seqs_rawReads)/sqrt(nrow(fullMetadata))
# Average mapping efficiency +/-SD = 85.5% +/-0.47
mean(fullMetadata$MappingEfficiency.BSBoldvsGynogen)
qnorm(0.975)*sd(fullMetadata$MappingEfficiency.BSBoldvsGynogen)/sqrt(nrow(fullMetadata))
########################
## Calculate (1) Mfr per site, (2) biallelic equivalent, (3) epi-Fst and epi-FIS and (4) number of methylated sites in uniteCov2 (CpG shared by at least 2 fish, after filtering and normalising)
## (1) Mfr per site
reRun= FALSE
if(reRun == TRUE){
df <- methylKit::getData(uniteCov2_woSexAndUnknowChr)
MfrData2 <- data.frame(matrix(ncol=137, nrow=nrow(df)))
namevector <- paste0("Mfr", 1:137)
vector <- 1:137
for(i in vector){
colnames(MfrData2)[i] <- namevector[i]
MfrData2[i] <- df[paste0("numCs", i)]/df[paste0("coverage", i)]
}
}
## (2) biallelic equivalent
### Sagonas et al. 2020 MBE " A  number  of  methylated  sites/regions  were  estimated by converting the MFr into ordinal data: sites/regionswith little or no methylation (MFr<30%) were annotated as0  and  treated  as  no  methylated  sites/regions,  sites/regionswith  intermediate  methylation  levels  (30%<MFr<70%)were considered as heterozygote sites/regions and convertedinto  1,  whereas  sites/regions  with  high  or  fixed  methylation(MFr>70%) were treated as homozygous at this site/regionsand were annotated as 2."
rerun= FALSE
if(rerun == TRUE){
print("long part started, needs ~10min")
getBiallVal <- function(x){
y=NA
if(x <= 0.3 & !is.na(x)){
y = "00"
} else if(x > 0.3 & x < 0.7 & !is.na(x)){
y = "01"
} else if(x >= 0.7 & !is.na(x)){
y = "11"
}
return(y)
}
getBiallValVec <- function(vec){sapply(vec, getBiallVal)}
system.time(
MbiallData2 <- sapply(MfrData2, function(x) {getBiallValVec(x)})
)
#### Saving point ####
save(MfrData2, MbiallData2, file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
print("long truc saved")
}
#### Load data : MfrData2 & MbiallData2 ####
#load(file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
## rename correctly the full biallelic dataframe:
colnames(MbiallData2) <- uniteCov2_woSexAndUnknowChr@sample.ids
#### Load data : MfrData2 & MbiallData2 ####
load(file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
machine="mythinkpad" # define the machine we work on
loadALL = FALSE # only load CpG shared by half fish per trt group
loadannot = FALSE # load genome annotations
source("R02.3_DATALOAD.R")
setwd("Documents/pro/Git/StickParaOffsBroject/code/R")
## A. Balard
## May 2022
## Slidding window analysis: detecting peaks of methylation
###########################################################
machine="mythinkpad" # define the machine we work on
loadALL = FALSE # only load CpG shared by half fish per trt group
loadannot = FALSE # load genome annotations
source("R02.3_DATALOAD.R")
# Starting data set: methylations at CpG covered in all fish
uniteCovALL_woSexAndUnknowChr
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
perc_uniteObj
# calculate average methylation per treatment group at each position
colnames(perc_uniteObj)
fullMetadata$trtG1G2[match(colnames(perc_uniteObj), fullMetadata$SampleID)]
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
levels(rawmetadata$trtG1G2)
levels(rawmetadata$trtG1G2)[1]
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
colnames(perc_uniteObj) %in% rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]])
select(perc_uniteObj, which(colnames(perc_uniteObj) %in%
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]))
methylKit::select(perc_uniteObj, which(colnames(perc_uniteObj) %in%
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]))
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
# methylKit::select(perc_uniteObj, which(colnames(perc_uniteObj) %in%
#         rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]))
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]])
# methylKit::select(perc_uniteObj, which(colnames(perc_uniteObj) %in%
#         rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]))
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
levels(rawmetadata$trtG1G2)[1]
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
colnames(perc_uniteObj)
# methylKit::select(perc_uniteObj, which(colnames(perc_uniteObj) %in%
#         rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]))
rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
colnames(perc_uniteObj) %in% rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]]
which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]])
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]])
perc_uniteObj %>%
dplyr::mutate(paste0("ave", levels(rawmetadata$trtG1G2)[1]) =
rowMeans(select(., whichCols), na.rm = T))
perc_uniteObj %>%
dplyr::mutate(paste0("ave", levels(rawmetadata$trtG1G2)[1]) = rowMeans(select(., whichCols), na.rm = T))
paste0("ave", levels(rawmetadata$trtG1G2)[1])
perc_uniteObj %>%
dplyr::mutate(test = rowMeans(select(., whichCols), na.rm = T))
perc_uniteObj %>% data.frame()
perc_uniteObj %>% data.frame() %>%
dplyr::mutate(test = rowMeans(select(., whichCols), na.rm = T))
perc_uniteObj %>% data.frame() %>%
dplyr::mutate(test = rowMeans(select(whichCols), na.rm = T))
perc_uniteObj %>% data.frame() %>%
dplyr::mutate(test = rowMeans(dplyr::select(., whichCols), na.rm = T))
perc_uniteObj %>% data.frame() %>%
dplyr::mutate(paste0("ave", levels(rawmetadata$trtG1G2)[1]) = rowMeans(dplyr::select(., whichCols), na.rm = T))
paste0("ave", levels(rawmetadata$trtG1G2)[1])
perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"]
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[1])
perc_uniteObj
length(levels(rawmetadata$trtG1G2))
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[1]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[1])
}
perc_uniteObj
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj
grep("ave", names(perc_uniteObj))
perc_uniteObj[grep("ave", names(perc_uniteObj))]
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
# simplify names
rownames(perc_uniteObj) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj))
# order positions by chromosomes & position
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2 slidding windows
# Compare the observed structure with an expected one: add colors for trt on the side
metadata = data.frame(Treatment = fullMetadata$trtG1G2[match(colnames(SWresults), fullMetadata$SampleID)],
BP = fullMetadata$brotherPairID[match(colnames(SWresults), fullMetadata$SampleID)])
rownames(metadata) = fullMetadata$SampleID[match(colnames(SWresults), fullMetadata$SampleID)]
# Define annotation colors
mycolors <- c("black", "red", colOffs)
names(mycolors) <- levels(metadata$Treatment)
mycolors <- list(Treatment = mycolors)
# keep only names of the first chromosome, to display on heatmap
rownames(SWresults) <- data.frame(x = rownames(SWresults)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
# print heatmap
pheatmap(t(SWresults), cluster_cols=F, annotation_row = metadata, annotation_colors = mycolors,
show_rownames = F)
SWresults
metadata
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
uniteObj
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
perc_uniteObj
# Prepare metadate to compare the observed structure with an expected one: add colors for trt on the side of heatmap
metadata = data.frame(Treatment = fullMetadata$trtG1G2[match(colnames(perc_uniteObj), fullMetadata$SampleID)],
BP = fullMetadata$brotherPairID[match(colnames(perc_uniteObj), fullMetadata$SampleID)])
rownames(metadata) = fullMetadata$SampleID[match(colnames(perc_uniteObj), fullMetadata$SampleID)]
metadata
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
# simplify names
rownames(perc_uniteObj) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj))
# order positions by chromosomes & position
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
SWresults
names(SWresults)
colnames(SWresults)
gsub("ave", colnames(SWresults))
gsub("ave","", colnames(SWresults))
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
# simplify names
rownames(perc_uniteObj) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj))
# order positions by chromosomes & position
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
# Define annotation colors
mycolors <- c("black", "red", colOffs)
# names(mycolors) <- levels(metadata$Treatment)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors
gsub("ave","", colnames(SWresults))
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
perc_uniteObj
# simplify names
rownames(perc_uniteObj) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj))
# order positions by chromosomes & position
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
SWresults
# Define annotation colors
mycolors <- c("black", "red", colOffs)
# names(mycolors) <- levels(metadata$Treatment)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
mycolors
# keep only names of the first chromosome, to display on heatmap
rownames(SWresults) <- data.frame(x = rownames(SWresults)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
# print heatmap
pheatmap(t(SWresults), cluster_cols=F,# annotation_row = metadata, annotation_colors = mycolors,
show_rownames = F)
# print heatmap
pheatmap(t(SWresults), cluster_cols=F,# annotation_row = metadata, annotation_colors = mycolors,
show_rownames = F)
