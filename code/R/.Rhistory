geom_point(aes(x = start_distToTSS, y = .8, col = effect, pch=featureType), size = 5) +
geom_segment(aes(x = start_distToTSS, xend = start_distToTSS, y=0, yend=.8, col = effect)) +
geom_segment(aes(x = 0, xend = 0, y=0, yend=.5), col = "red", size = 3) + # TSS
theme_blank() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())+
labs(title = paste(unique(dfplot$GeneSymbol), ":", dfplot$description),
subtitle = str_wrap(dfplot$summary, width = 150))+
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7"))#cb friendly palette
####### And by brother pairs
dfplot_BP = merge(df_effects_full[df_effects_full$DMS %in% dfplot$DMS,c("BP", "DMS", "effectBPlevel")], dfplot)
# Rm potision with no effect in this BP
dfplot_BP=dfplot_BP[!is.na(dfplot_BP$effectBPlevel),]
# Same order of Father's family as in figure 1 (clusters)
dfplot_BP$BP = factor(dfplot_BP$BP, levels = c("BP05", "BP31", "BP04", "BP30", "BP16", "BP34", "BP49","BP46"))
# Plot
plotGeneTargetBP = ggplot(dfplot_BP) +
geom_rect(xmin=mini, xmax=maxi, ymin=0, ymax =.5, fill="#bfb6b6")+
geom_rect(aes(xmin=start.gene_distToTSS, xmax=end.gene_distToTSS, ymin=0, ymax =.5), fill = "black")+
geom_point(aes(x = start_distToTSS, y = .8, col = effectBPlevel, pch=featureType), size = 5) +
geom_segment(aes(x = start_distToTSS, xend = start_distToTSS, y=0, yend=.8, col = effectBPlevel)) +
geom_segment(aes(x = 0, xend = 0, y=0, yend=.5), col = "red", size = 3) + # TSS
theme_blank() +
facet_grid(BP~.)+ theme(panel.spacing = unit(1.5, "lines"))+
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())+
scale_y_continuous(expand=expansion(mult=c(0,0.15))) # increase space up
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7"))#cb friendly palette
return(list(myTargetGene_DMSdf=dfplot, plotGeneTarget=plotGeneTarget, plotGeneTargetBP=plotGeneTargetBP))
}
## All 4 effects:
P = plotGeneTarget(myTargetGene = "FKBP3")
P$myTargetGene_DMSdf
# Zoom in 1
P1 = P$plotGeneTarget + coord_cartesian(xlim=c(3588,3636)) + theme(legend.position = "none") +
ggtitle("") + labs(subtitle = "")+ theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
# Zoom in 2
P2 = P$plotGeneTarget + coord_cartesian(xlim=c(4890,5060)) + theme(legend.position = "none") +
ggtitle("") + labs(subtitle = "")+ theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
## For all BP, zoomed
Pbp1 = P$plotGeneTargetBP + theme(legend.position = "none") + coord_cartesian(xlim=c(3588,3636))+
theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
Pbp2 = P$plotGeneTargetBP + theme(legend.position = "none") + coord_cartesian(xlim=c(4890,5060))+
theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
fullplotFKBP3 = cowplot::plot_grid(P$plotGeneTarget,
cowplot::plot_grid(P1, P2, nrow = 1, ncol =2),
cowplot::plot_grid(Pbp1, Pbp2, nrow = 1, ncol =2),
nrow = 3, rel_heights = c(1,1,3), labels = c("A", "B", "C"))
fullplotFKBP3
# Plot gene and zooms
pdf("../../dataOut/FKBP3_DMS.pdf", width = 15, height = 15)
fullplotFKBP3
dev.off()
# create gene universe
gene_universe <- data.frame(
subsetByOverlaps(GRanges(annotGff3), GRanges(uniteCov14_G2_woSexAndUnknowChrOVERLAP))) %>% # subselect covered CpGs
filter(lengths(Ontology_term)!=0) %>% # rm non existing GO terms
filter(type %in% "gene")  %>% # keep all the 7416 genes with GO terms
dplyr::select(c("Name", "Ontology_term")) %>%
mutate(go_linkage_type = "IEA") %>% #NB: IEA but not necessarily true, it's from Interproscan after Maker. Sticklebacks (biomart) have 82701 IEA and 63 ISS.
relocate("Ontology_term","go_linkage_type","Name") %>%
unnest(Ontology_term) %>% # one GO per line (was a list before in this column)
data.frame()
# Create gene set collection
goFrame <- GOFrame(gene_universe, organism="Gasterosteus aculeatus")
goAllFrame <- GOAllFrame(goFrame)
gsc_universe <- GeneSetCollection(goAllFrame, setType = GOCollection())
GO_G1only = makedfGO(DMS_G1onlyEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE), gene_universe, effect = "598 genes with DMS associated with G1 effect only")
GO_G2only = makedfGO(DMS_G2onlyEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE) , gene_universe, effect = "143 genes with DMS associated with G2 effect only")
GO_G1G2addit = makedfGO(DMS_G1G2additiveEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE), gene_universe, effect = "80 genes with DMS associated with additive effect")
GO_G1G2inter = makedfGO(DMS_G1G2interactionEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE), gene_universe, effect = "72 genes with DMS associated with interaction effect")
dfGO = rbind(GO_G1only, GO_G2only, GO_G1G2addit, GO_G1G2inter)
GOplot <- dfGO %>% ggplot(aes(x=Effect, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("Treatments comparison") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
# scale_y_discrete(labels = function(x) str_wrap(x, width = 10))+ # split too long GO names in half
facet_grid(fct_inorder(GO.category)~., scales="free",space = "free")+
scale_y_discrete(limits=rev, # revers axis to have alphabetical order
labels = function(x) str_wrap(x, width = 40)) # split too long GO names in half
GOplot
pdf(GOplot, file = "../../dataOut/Supplementary_GOplot_fig3VennGenes.pdf", width = 6, height = 18)
GOplot
dev.off()
length(DMS_G1onlyEffect_4BPmin) # 1639 positions different ONLY following paternal treatments
length(DMS_G2onlyEffect_4BPmin) # 309 positions different ONLY following offspring treatments
length(DMS_G1G2additiveEffect_4BPmin) # 173 positions
length(DMS_G1G2interactionEffect_4BPmin) # 151 positions
getCorG1G2methByEffect <- function(myeffect){
# G1
A=methylKit::select(uniteCov6_G1_woSexAndUnknowChrOVERLAP,
which(paste(uniteCov6_G1_woSexAndUnknowChrOVERLAP$chr, uniteCov6_G1_woSexAndUnknowChrOVERLAP$start) %in%
myeffect))
# G2
B=methylKit::select(uniteCov14_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCov14_G2_woSexAndUnknowChrOVERLAP$chr, uniteCov14_G2_woSexAndUnknowChrOVERLAP$start) %in%
myeffect))
# Methylation values:
DMS=paste(A$chr, A$start)
A=percMethylation(A) %>% data.frame
A$DMS = DMS
B=percMethylation(B) %>% data.frame
B$DMS = DMS
# Prep G1 df
A=melt(A)
names(A)[names(A)%in% "variable"]="SampleID"
names(A)[names(A)%in% "value"]="G1methylation"
A=merge(A, fullMetadata_PAR[c("SampleID", "brotherPairID", "trtG1G2")])
names(A)[names(A)%in% "trtG1G2"]="patTrt"
A=A[!names(A)%in% "SampleID"] # rm sample ID for fathers, as only one per BP
# Prep G2 df
B=melt(B)
names(B)[names(B)%in% "variable"]="SampleID"
names(B)[names(B)%in% "value"]="G2methylation"
B=merge(B, fullMetadata_OFFS[c("SampleID", "brotherPairID", "trtG1G2", "patTrt")])
B$patTrt[B$patTrt %in% "controlP"]="Control"
B$patTrt[B$patTrt %in% "infectedP"]="Exposed"
AB=merge(A, B)
# When the variables are not continuous but could be ranked then we do not use pearson correlation
# coefficient to find the linear relationship, in this case spearman correlation coefficient comes
# into the scene. Since the spearman correlation coefficient considers the rank of values, the
# correlation test ignores the same ranks to find the p-values as a result we get the warning
# “Cannot compute exact p-value with ties”. This can be avoided by using exact = FALSE inside the cor.test function.
return(cor.test(x = AB$G1methylation, AB$G2methylation, method = "spearman", exact = FALSE ))
}
getCorG1G2methByEffect(myeffect = DMS_G1onlyEffect_4BPmin)
# Spearman's rank correlation rho
# S = 4.2188e+14, p-value < 2.2e-16
# alternative hypothesis: true rho is not equal to 0
# sample estimates:
#       rho
# 0.4809644
getCorG1G2methByEffect(myeffect = DMS_G2onlyEffect_4BPmin)
# Spearman's rank correlation rho
# S = 3.0929e+12, p-value < 2.2e-16
# alternative hypothesis: true rho is not equal to 0
# sample estimates:
#       rho
# 0.4071759
getCorG1G2methByEffect(myeffect = DMS_G1G2additiveEffect_4BPmin)
# Spearman's rank correlation rho
# S = 6.8356e+11, p-value < 2.2e-16
# alternative hypothesis: true rho is not equal to 0
# sample estimates:
#       rho
# 0.3668305
getCorG1G2methByEffect(myeffect = DMS_G1G2interactionEffect_4BPmin)
# Spearman's rank correlation rho
# S = 4.2648e+11, p-value < 2.2e-16
# alternative hypothesis: true rho is not equal to 0
# sample estimates:
#       rho
# 0.3908235
## And as a regression?
DMSalleffectsDF = data.frame(DMS=c(DMS_G1onlyEffect_4BPmin, DMS_G2onlyEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin, DMS_G1G2interactionEffect_4BPmin),
effect=c(rep("G1", length(DMS_G1onlyEffect_4BPmin)),
rep("G2", length(DMS_G2onlyEffect_4BPmin)),
rep("addit", length(DMS_G1G2additiveEffect_4BPmin)),
rep("inter", length(DMS_G1G2interactionEffect_4BPmin))))
A=methylKit::select(uniteCov6_G1_woSexAndUnknowChrOVERLAP,
which(paste(uniteCov6_G1_woSexAndUnknowChrOVERLAP$chr, uniteCov6_G1_woSexAndUnknowChrOVERLAP$start) %in%
DMSalleffectsDF$DMS))
# G2
B=methylKit::select(uniteCov14_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCov14_G2_woSexAndUnknowChrOVERLAP$chr, uniteCov14_G2_woSexAndUnknowChrOVERLAP$start) %in%
DMSalleffectsDF$DMS))
# Methylation values:
DMS=paste(A$chr, A$start)
A=percMethylation(A) %>% data.frame
A$DMS = DMS
B=percMethylation(B) %>% data.frame
B$DMS = DMS
# Prep G1 df
A=melt(A)
names(A)[names(A)%in% "variable"]="SampleID"
names(A)[names(A)%in% "value"]="G1methylation"
A=merge(A, fullMetadata_PAR[c("SampleID", "brotherPairID", "trtG1G2")])
names(A)[names(A)%in% "trtG1G2"]="patTrt"
A=A[!names(A)%in% "SampleID"] # rm sample ID for fathers, as only one per BP
# Prep G2 df
B=melt(B)
names(B)[names(B)%in% "variable"]="SampleID"
names(B)[names(B)%in% "value"]="G2methylation"
B=merge(B, fullMetadata_OFFS[c("SampleID", "brotherPairID", "trtG1G2", "patTrt")])
B$patTrt[B$patTrt %in% "controlP"]="Control"
B$patTrt[B$patTrt %in% "infectedP"]="Exposed"
AB=merge(A, B)
AB=merge(AB, DMSalleffectsDF)
AB$SampleID=as.character(AB$SampleID)
mod1=lme4::lmer(G1methylation~G2methylation * effect + (1|brotherPairID/SampleID), data=AB)
mod2=lme4::lmer(G1methylation~G2methylation + effect + (1|brotherPairID/SampleID), data=AB)
mod3=lme4::lmer(G1methylation~G2methylation + (1|brotherPairID/SampleID), data=AB)
lmtest::lrtest(mod1, mod2)
# Likelihood ratio test
#
# Model 1: G1methylation ~ G2methylation * effect + (1 | brotherPairID/SampleID)
# Model 2: G1methylation ~ G2methylation + effect + (1 | brotherPairID/SampleID)
# #Df   LogLik Df  Chisq Pr(>Chisq)
# 1  11 -1114988
# 2   8 -1115328 -3 680.09  < 2.2e-16 ***
lmtest::lrtest(mod1, mod3)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_blank()
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring")
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring")+
ylab("Methylation value of father")
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring")+
ylab("Methylation value of father")+
scale_y_continuous(labels = scales::percent)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring")+
ylab("Methylation value of father")+
# scale_y_continuous(labels = scales::percent)
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
AB$effect
as.factor(AB$effect)
factor(AB$effect,levels = c("G1", "G2", "addit", "inter"))
AB$effect
# level effects
AB$effect <- factor(AB$effect,levels = c("G1", "G2", "addit", "inter"))
mod1=lme4::lmer(G1methylation~G2methylation * effect + (1|brotherPairID/SampleID), data=AB)
mod1=lme4::lmer(G1methylation~G2methylation * effect + (1|brotherPairID/SampleID), data=AB)
mod2=lme4::lmer(G1methylation~G2methylation + effect + (1|brotherPairID/SampleID), data=AB)
mod3=lme4::lmer(G1methylation~G2methylation + (1|brotherPairID/SampleID), data=AB)
lmtest::lrtest(mod1, mod2)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
pdf(file = "../../dataOut/plotmodelG1methG2meth.pdf", width = 10, height = 10)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
pdf(file = "../../dataOut/plotmodelG1methG2meth.pdf", width = 8, height = 8)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlim(c(0,100))+
ylim(c(0,100))
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlim(c(30,70))+
ylim(c(30,70))
pdf(file = "../../dataOut/plotmodelG1methG2meth.pdf", width = 8, height = 8)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
pdf(file = "../../dataOut/plotmodelG1methG2meth.pdf", width = 8, height = 6)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
pdf(file = "../../dataOut/plotmodelG1methG2meth.pdf", width = 6, height = 8)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
pdf(file = "../../dataOut/plotmodelG1methG2meth.pdf", width = 8, height = 8)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
theme_bw()+
xlab("Methylation value of offspring (%)")+
ylab("Methylation value of father (%)")+
scale_color_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
read.csv(""../../dataOut/allDMSAnnot.csv"")
read.csv("../../dataOut/allDMSAnnot.csv")
allDMSannot <- read.csv("../../dataOut/allDMSAnnot.csv")
allDMSAnnot <- read.csv("../../dataOut/allDMSAnnot.csv")
allDMSAnnot_uniqueEffect <- allDMSAnnot[rowSums(is.na(allDMSAnnot[c("G1", "G2", "addit", "inter")])) %in% 3,]
###
library(ggplot2)
ggplot(allDMSAnnot_uniqueEffect, aes(x=allDMSAnnot_uniqueEffect$nDMS, col=effect))+
geom_histogram()
ggplot(allDMSAnnot_uniqueEffect, aes(x=allDMSAnnot_uniqueEffect$nDMS, fill=effect))+
geom_histogram()
ggplot(allDMSAnnot_uniqueEffect, aes(x=nDMS, fill=effect))+
geom_histogram()
ggplot(allDMSAnnot_uniqueEffect, aes(x=nDMS, fill=effect))+
geom_histogram()+
scale_x_log10()
ggplot(allDMSAnnot_uniqueEffect, aes(x=nDMS, fill=effect))+
geom_histogram()+
scale_y_log10()
ggplot(allDMSAnnot, aes(x=nDMS, fill=effect))+
geom_histogram()+
scale_y_log10()
ggplot(allDMSAnnot_uniqueEffect, aes(x=nDMS, fill=effect))+
geom_histogram()+
scale_y_log10()
allDMSAnnot_uniqueEffect[
allDMSAnnot_uniqueEffect$nDMS >1 & allDMSAnnot_uniqueEffect$effect %in% "addit",]
allDMSAnnot_uniqueEffect[
allDMSAnnot_uniqueEffect$nDMS >1 & allDMSAnnot_uniqueEffect$effect %in% "G1",]
allDMSAnnot_uniqueEffect[
allDMSAnnot_uniqueEffect$nDMS >1 & allDMSAnnot_uniqueEffect$effect %in% "inter",]
library(ggplot2)
library(ggrepel)
library(readxl)
library(tidyverse)
library(lme4) # linear mixed model
library(nlme) # linear mixed model with p-values
library(emmeans) # post-hoc Tukey test
library(ggsignif) # plot significance
# Raw data including Kostas previous results to compare and have the data
rawData <- read.csv("../../data/cleanedRawData144fishG1G2.csv")
rawData$SampleID <- rawData$ID
View(rawData)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE,
message = FALSE, cache.lazy = FALSE, cache.path = "../../gitignore/RmdCache/", # keep heavy data in gitignore cache
fig.path = "Rmdfig/")
machine="mythinkpad" # define the machine we work on
loadALL = TRUE # load all uniteCov objects
loadannot = TRUE # load genome annotations
sourceDMS = TRUE # Load the calculated DMS
sourceSubUnite = FALSE
source("R02.3_DATALOAD.R")
source("R02.3_DATALOAD.R")
source("homebrewDMSannotation.R") # needed for annotation, slight modification of genomation
## So far, we don't use DMR (because RRBS single end, this is not super meaningful)
rm(DMRBPlist, DMRlist)
uniteCovALL_woSexAndUnknowChr
nrow(uniteCovALL_woSexAndUnknowChr)
# 55530 CpG positions shared by all fish
nrow(uniteCov6_G1_woSexAndUnknowChrOVERLAP)
nrow(uniteCov14_G2_woSexAndUnknowChrOVERLAP)
table(fullMetadata$Generat)
table(fullMetadata$Generat, fullMetadata$FamilyOfFather)
table(fullMetadata$Generat, fullMetadata$FamilyOfFather, fullMetadata$trtG1G2)
table(fullMetadata$Generat, fullMetadata$FamilyOfFather, fullMetadata$Tr)
table(fullMetadata$Generat, fullMetadata$FamilyOfFather, fullMetadata$outcome)
table(fullMetadata$Generat, fullMetadata$brotherPairID, fullMetadata$outcome)
table(fullMetadata$Generat, fullMetadata$Family, fullMetadata$outcome)
table(fullMetadata$Generat, fullMetadata$brotherPairID, fullMetadata$outcome)
table(fullMetadata$Generat, fullMetadata$brotherPairID, fullMetadata$outcome) %>% data.frame()
table(fullMetadata$Generat, fullMetadata$brotherPairID) %>% data.frame()
table(fullMetadata$Generat, fullMetadata$brotherPairID) %>% unclass %>% data.frame()
table(fullMetadata$Generat, fullMetadata$brotherPairID, fullMetadata$outcome) %>% unclass %>% data.frame()
table(fullMetadata$Generat, fullMetadata$brotherPairID) %>% unclass %>% data.frame()
fullMetadata$Generat
table(fullMetadata$Generat)
# mapping statistics
fullMetadata$brotherPairID[fullMetadata$Generat %in% "P"]
# mapping statistics
fullMetadata$brotherPairID[fullMetadata$Generat %in% "P"] %>% unique
# mapping statistics
fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique
# mapping statistics
fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique
# mapping statistics
mybps <- fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique
# mapping statistics
mybps <-
fullMetadata$brotherPairID %in% (fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique)
# mapping statistics
fullMetadata$brotherPairID %in% (fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique)
# mapping statistics
fullMetadata$brotherPairID %in% (fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique)
# mapping statistics
fullMetadata[fullMetadata$brotherPairID %in% (fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique),]
# mapping statistics
fullMetadata_reduced <- fullMetadata[fullMetadata$brotherPairID %in% (fullMetadata$brotherPairID[fullMetadata$Generat %in% "O"] %>% unique),]
table(fullMetadata_reduced$Generat)
fullMetadata_reduced$MReads
fullMetadata_reduced$M.Seqs_rawReads
# 111 offspring, 16 parents
sum(table(fullMetadata_reduced$Generat))
## Original data
rawData <- read.csv("../../data/cleanedRawData144fishG1G2.csv")
rawData$Generat
table(rawData$Generat, rawData$brotherPairID) %>% unclass %>% data.frame()
table(rawData$Generat, rawData$FamilyOfFather) %>% unclass %>% data.frame()
table(rawData$Generat, rawData$clutch.ID) %>% unclass %>% data.frame()
## Family 12 removed from the start (irrelevant)
rawData$FamilyOfFather
## Family 12 removed from the start (irrelevant)
rawData[rawData$FamilyOfFather %in% "Fam12",]
## Family 12 removed from the start (irrelevant)
rawData<-rawData[!rawData$FamilyOfFather %in% "Fam12",]
table(rawData$Generat, rawData$clutch.ID) %>% unclass %>% data.frame()
rawData
table(rawData$Generat)
sum(table(rawData$Generat))
rawData$clutch.ID
rawData$clutch.ID[rawData$Generat %in% "O"]
## Removing the BP with no offspring:
rawData <- rawData[rawData$clutch.ID %in% (rawData$clutch.ID[rawData$Generat %in% "O"] %>% unique),]
sum(table(rawData$Generat))
table(rawData$Generat, rawData$clutch.ID) %>% unclass %>% data.frame()
table(rawData$Generat)
rawData$ID
# mappring stats:
fullMetadata$ID %>% rawData$ID
# mappring stats:
fullMetadata$ID %in% rawData$ID
# mappring stats:
fullMetadata[fullMetadata$ID %in% rawData$ID,]
105+55
table(rawData$Generat)
sum(table(rawData$Generat))
# mappring stats:
fullMetadata[fullMetadata$ID %in% rawData$ID,]
# mappring stats:
nrow(fullMetadata[fullMetadata$ID %in% rawData$ID,])
read.csv("../../data/multiqc_general_stats_rawReads.txt")
read.table(file = "../../data/Report_mapping_efficiency_Bismark.txt")
## Raw reads quality check
file <- read.csv("../../data/multiqc_general_stats_rawReads.txt")
file$SampleID = gsub("_L00.*","", gsub(".*-L1_","", file$Sample.Name))
names(file) <- c("Sample.Name", "percent_duplicates_rawReads", "percent_GC_rawReads", "M.Seqs_rawReads", "SampleID")
file
file$Sample.Name
file$SampleID
file$SampleID %in% rawData$ID
file[file$SampleID %in% rawData$ID,]
file <- file[file$SampleID %in% rawData$ID,]
file
file$M.Seqs_rawReads
mean(file$M.Seqs_rawReads)
nrow(file)
qnorm(0.975)*sd(file$M.Seqs_rawReads)/sqrt(nrow(file))
# Mapping efficiency with BSBolt:
mappBSBolt <- read.table(file = "../../data/Report_mapping_efficiency_BSBolt.txt")
mappDatBSB <- data.frame(SampleID = gsub("_L00*.","", gsub(".*-L1_","", gsub("_R1_001_trimmed_cutadapt.fastq.gz", "", mappBSBolt$V1))),
MappingEfficiency = as.numeric(mappBSBolt$V3))
## 85.4 +/- 0.51 for BSBolt
mean(mappDatBSB$MappingEfficiency)
qnorm(0.975)*sd(mappDatBSB$MappingEfficiency)/sqrt(nrow(mappDatBSB))
mappDatBSB <- mappDatBSB[mappDatBSB$SampleID %in% rawData$ID,]
## 85.4 +/- 0.51 for BSBolt
mean(mappDatBSB$MappingEfficiency)
qnorm(0.975)*sd(mappDatBSB$MappingEfficiency)/sqrt(nrow(mappDatBSB))
file$M.Seqs_rawReads
hist(file$M.Seqs_rawReads)
hist(file$M.Seqs_rawReads, breaks = 100)
sum(file$M.Seqs_rawReads <6)
file$Sample.Name
file$SampleID
table(fullMetadata_reduced$Generat)
