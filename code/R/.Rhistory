}
myadonisFUN <- function(dataset, metadata){
data.dist = makeDatadistFUN(dataset)
perm <- how(nperm = 1000) # 1000 permutations
setBlocks(perm) <- with(metadata, Family) # define the permutation structure
print(adonis2(data.dist ~ PAT * outcome * Sex, data = metadata, permutations = perm))
print(adonis2(data.dist ~ PAT + outcome + Sex, data = metadata, permutations = perm))
}
myadonisFUN(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
data.dist = makeDatadistFUN(dataset)
myGOF.NMDS.FUN <- function(dataset){
data.dist = makeDatadistFUN(dataset)
library(goeveg)
dimcheckMDS(
data.dist,
distance = "bray",
k = 7,
trymax = 100,
autotransform = TRUE
)
abline(h = 0.1, col = "darkgreen")
}
myGOF.NMDS.FUN(dataset = uniteCovALL_woSexAndUnknowChr_OFF)
makeDatadistFUN <- function(dataset){
x=makePercentMetMat(dataset)
data.dist = as.matrix((vegdist(x, "bray", upper = FALSE)))
}
myadonisFUN <- function(dataset, metadata){
data.dist = makeDatadistFUN(dataset)
perm <- how(nperm = 1000) # 1000 permutations
setBlocks(perm) <- with(metadata, Family) # define the permutation structure considering family
print(adonis2(data.dist ~ PAT * outcome * Sex, data = metadata, permutations = perm))
print(adonis2(data.dist ~ PAT + outcome + Sex, data = metadata, permutations = perm))
}
myadonisFUN(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
makePercentMetMat <- function(dataset){
perc.meth=percMethylation(dataset)
SD=apply(perc.meth,1, sd, na.rm = TRUE)
perc.meth <- perc.meth[-which(SD<0.3),]
x=t(perc.meth)
return(x)
}
makeDatadistFUN <- function(dataset){
x=makePercentMetMat(dataset)
data.dist = as.matrix((vegdist(x, "bray", upper = FALSE)))
}
myadonisFUN <- function(dataset, metadata){
data.dist = makeDatadistFUN(dataset)
perm <- how(nperm = 1000) # 1000 permutations
setBlocks(perm) <- with(metadata, Family) # define the permutation structure considering family
print(adonis2(data.dist ~ PAT * outcome * Sex, data = metadata, permutations = perm))
print(adonis2(data.dist ~ PAT + outcome + Sex, data = metadata, permutations = perm))
}
myadonisFUN(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
?dist
myNMDSplots <- function(dataset){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot))
}
myNMDSplots <- function(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
))
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots <- function(dataset, metadata){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot))
}
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots <- function(dataset, metadata){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
mySEXplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "trtG1G2", find_hull)
myOFFplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=trtG1G2), alpha=0) +
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot, mySEXplot, myOFFplot))
}
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots <- function(dataset, metadata){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
mySEXplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "outcome", find_hull)
myOFFplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=outcome), alpha=0) +
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot, mySEXplot, myOFFplot))
}
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots <- function(dataset, metadata){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
mySEXplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "outcome", find_hull)
myOFFplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=outcome), alpha=0) +
geom_point(aes(fill=outcome, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot, mySEXplot, myOFFplot))
}
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots <- function(dataset, metadata){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
mySEXplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "outcome", find_hull)
myOFFplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=outcome), alpha=0) +
scale_color_manual(values = c("grey","red"))+
scale_fill_manual(values = c("grey","red"))+
geom_point(aes(fill=outcome, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot, mySEXplot, myOFFplot))
}
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
myNMDSplots <- function(dataset, metadata){
x=makePercentMetMat(dataset)
set.seed(2)
NMDS <- metaMDS(comm = x, distance = "bray", maxit=1000, k = 6)
mystressplot <- stressplot(NMDS)
MDS1 = NMDS$points[,1]
MDS2 = NMDS$points[,2]
NMDS2 = data.frame(MDS1 = MDS1, MDS2 = MDS2, ID = metadata$ID,
PAT=as.factor(metadata$PAT),
outcome=as.factor(metadata$outcome),
Sex = as.factor(metadata$Sex))
find_hull <- function(my_data) my_data[chull(my_data[,1], my_data[,2]), ]
hulls <- ddply(NMDS2, "PAT", find_hull)
myPATplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls, aes(col=PAT), alpha=0) +
scale_color_manual(values = c("grey","yellow"))+
scale_fill_manual(values = c("grey","yellow"))+
geom_point(aes(fill=PAT, shape=PAT), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "Sex", find_hull)
mySEXplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=Sex), alpha=0) +
scale_color_manual(values = c("red","blue"))+
scale_fill_manual(values = c("red","blue"))+
geom_point(aes(fill=Sex, shape=Sex), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
hulls2 <- ddply(NMDS2, "outcome", find_hull)
myOFFplot <- ggplot(NMDS2, aes(x=MDS1, y=MDS2)) +
geom_polygon(data = hulls2, aes(col=outcome), alpha=0) +
scale_color_manual(values = c("grey","red"))+
scale_fill_manual(values = c("grey","red"))+
geom_point(aes(fill=outcome, shape=outcome), size = 3, alpha = .6) +
scale_shape_manual(values = c(21,22)) +
theme_bw() +
theme(legend.title=element_blank(), legend.position = "top")
return(list(mystressplot, myPATplot, mySEXplot, myOFFplot))
}
myNMDSplots(dataset = uniteCovALL_woSexAndUnknowChr_OFF, metadata = fullMetadata_OFFS)
options(stringsAsFactors = FALSE);
table(fullMetadata_OFFS$trtG1G2,fullMetadata_OFFS$trtG1G2_NUM)
cov = data.frame(Family = fullMetadata_PAR$Family)
myDiffMeth=calculateDiffMeth(uniteCov2_woSexAndUnknowChr_PAR,
covariates = cov, mc.cores = 4)
fullMethylKitObj
fullMethylKitObj
head(fullMethylKitObj)
head(data(fullMethylKitOb))
MbiallData
MfrData
MbiallData
MbiallData
head(MbiallData)
ncol(MbiallDataa)
ncol(MbiallData)
install.packages("WGCNA")
install.packages("BiocManager")
BiocManager::install("WGCNA")
a
#################### Data load & preparation ####################
source("librariesLoading.R")
## load custom functions
source("customRfunctions.R")
## Load samples metadata
source("R01.3_loadMetadata.R")
## define in which machine we're working (apocrita or mythinkpad)
# machine="apocrita"
machine="mythinkpad"
## Load methylation data
source("R01.4_loadMethyldata.R")
## rerun or upload
### RERUN
# DMS15pc_PAR_half <- getDMS(uniteCov6_G1_woSexAndUnknowChr, fullMetadata_PAR_half)
# saveRDS(DMS15pc_PAR_half, file = "../../data/DMS15pc_PAR_half.RDS")
### UPLOAD
DMS15pc_PAR_half <- readRDS("../../data/DMS15pc_PAR_half.RDS")
DMS15pc_PAR_half
length(DMS15pc_PAR_half)
nrow(DMS15pc_PAR_half)
### UPLOAD
DMS15pc_G2_controlG1_half <- readRDS("../../data/DMS15pc_G2_controlG1_half.RDS")
### UPLOAD
DMS15pc_G2_controlG1_half <- readRDS("../../data/DMS15pc_G2_controlG1_half")
nrow(DMS15pc_G2_controlG1_half)
# 1642 positions
### UPLOAD
DMS15pc_G2_infectedG1_half <- readRDS("../../data/DMS15pc_G2_infectedG1_half")
nrow(DMS15pc_G2_infectedG1_half)
DMS15pc_G2_controlG1_half
paste(DMS15pc_G2_controlG1_half$chr, DMS15pc_G2_controlG1_half$start, DMS15pc_G2_controlG1_half$end)
#### WHICH positions?
posG1DMS <- paste(DMS15pc_PAR_half$chr, DMS15pc_PAR_half$start, DMS15pc_PAR_half$end)
posG2DMS_controlG1 <- paste(DMS15pc_G2_controlG1_half$chr, DMS15pc_G2_controlG1_half$start, DMS15pc_G2_controlG1_half$end)
posG2DMS_infectedG1 <- paste(DMS15pc_G2_infectedG1_half$chr, DMS15pc_G2_infectedG1_half$start, DMS15pc_G2_infectedG1_half$end)
posG1DMS
posG1DMS %in% posG2DMS_controlG1
VennDiagram::get.venn.partitions(list(posG1DMS=posG1DMS, posG2DMS_controlG1=posG2DMS_controlG1, posG2DMS_infectedG1=posG2DMS_infectedG1))
install.packages("VennDiagram")
#### WHICH positions?
library(VennDiagram)
#### WHICH positions?
library(VennDiagram)
install.packages("VennDiagram")
#### WHICH positions?
library(VennDiagram)
install.packages("VennDiagram")
install.packages("futile.logger")
install.packages("futile.options")
install.packages("futile.logger")
install.packages("lambda.r")
install.packages("futile.logger")
install.packages("VennDiagram")
#### WHICH positions?
library(VennDiagram)
VennDiagram::get.venn.partitions(list(posG1DMS=posG1DMS, posG2DMS_controlG1=posG2DMS_controlG1, posG2DMS_infectedG1=posG2DMS_infectedG1))
grid.newpage()
grid::grid.draw(VennDiagram::venn.diagram(list(posG1DMS=posG1DMS, posG2DMS_controlG1=posG2DMS_controlG1, posG2DMS_infectedG1=posG2DMS_infectedG1), NULL))
## Differential methylation analyses
## A. Balard
## February 2022
#################### Data load & preparation ####################
source("librariesLoading.R")
## load custom functions
source("customRfunctions.R")
## Load samples metadata
source("R01.3_loadMetadata.R")
## define in which machine we're working (apocrita or mythinkpad)
# machine="apocrita"
machine="mythinkpad"
## Load methylation data
source("R01.4_loadMethyldata.R")
###############################################
### PART 2: Differential methylation sites ####
###############################################
### 3 comparisons to do:
## PARENTS trt-ctrl
## G2-control G1 trt-ctrl
## G2-infected G1 trt-ctrl ## HYP: this will be different
## Calculate DMS accounting for covariates: family
getDMS <- function(myuniteCov, myMetadata){
cov = data.frame(Family = myMetadata$Family)
myDiffMeth=calculateDiffMeth(myuniteCov, covariates = cov, mc.cores = 10)
# We select the bases that have q-value<0.01 and percent methylation difference larger than 15%.
# NB: arg type="hyper" or type="hypo" gives hyper-methylated or hypo-methylated regions/bases.
myDMS_15pc = getMethylDiff(myDiffMeth, difference=15, qvalue=0.01)
return(myDMS_15pc)
}
##########################################################
## Comparison 1: BASELINE -> Parents (control vs infected)
## Extract DMS from parents (at least in half the fish), annotate them, compare with Kostas results
## rerun or upload
### RERUN
# DMS15pc_PAR_half <- getDMS(uniteCov6_G1_woSexAndUnknowChr, fullMetadata_PAR_half)
# saveRDS(DMS15pc_PAR_half, file = "../../data/DMS15pc_PAR_half.RDS")
### UPLOAD
DMS15pc_PAR_half <- readRDS("../../data/DMS15pc_PAR_half.RDS")
nrow(DMS15pc_PAR_half)
# 6603 positions
## NB Kostas' results: "We found a total of 1,973 CpG sites out of
# 1,172,887 CpGs (0.17%) across the genome that showed at
# least 15% differential fractional methylation (differentially
# methylated site [DMS]; q < 0.01) between infected and uninfected fish"
nrow(uniteCov6_G1_woSexAndUnknowChr)#1 188 179 CpG sites
nrow(DMS15pc_PAR_half) # 6603 DMS
nrow(DMS15pc_PAR_half) / nrow(uniteCov6_G1_woSexAndUnknowChr) *100 # 0.55%
##########################################################
## Comparison 2: Should be like baseline -> G2 from G1 control (control vs infected)
table(fullMetadata_OFFS$trtG1G2, fullMetadata_OFFS$trtG1G2_NUM)
#             2  3  5  6
# NE_control  0  0 28  0
# NE_exposed  0  0  0 27
# E_control  28  0  0  0
# E_exposed   0 28  0  0
# DMS15pc_G2_controlG1_half <- getDMS(myuniteCov = reorganize(methylObj = uniteCov14_G2_woSexAndUnknowChr,
#                                                             treatment = fullMetadata_OFFS$trtG1G2_NUM[
#                                                                                               fullMetadata_OFFS$trtG1G2_NUM %in% c(5,6)],
#                                                             sample.ids = fullMetadata_OFFS$ID[
#                                                                                                fullMetadata_OFFS$trtG1G2_NUM %in% c(5,6)]),
#                                     myMetadata = fullMetadata_OFFS[fullMetadata_OFFS$trtG1G2_NUM %in% c(5,6),])
#
# saveRDS(DMS15pc_G2_controlG1_half, file = "../../data/DMS15pc_G2_controlG1_half.RDS")
# DMS15pc_G2_infectedG1_half <- getDMS(myuniteCov = reorganize(methylObj = uniteCov14_G2_woSexAndUnknowChr,
#                                                             treatment = fullMetadata_OFFS$trtG1G2_NUM[
#                                                                                               fullMetadata_OFFS$trtG1G2_NUM %in% c(2,3)],
#                                                             sample.ids = fullMetadata_OFFS$ID[
#                                                                                                fullMetadata_OFFS$trtG1G2_NUM %in% c(2,3)]),
#                                     myMetadata = fullMetadata_OFFS[fullMetadata_OFFS$trtG1G2_NUM %in% c(2,3),])
#
# saveRDS(DMS15pc_G2_infectedG1_half, file = "../../data/DMS15pc_G2_infectedG1_half.RDS")
## stop here:
# stop("We stop here for now") # to run getDMS on Apocrita cause it's LONG
### UPLOAD
## Control G1 - G2(trt vs control)
DMS15pc_G2_controlG1_half <- readRDS("../../data/DMS15pc_G2_controlG1_half.RDS")
nrow(DMS15pc_G2_controlG1_half)
# 1642 positions
## Infected G1 - G2(trt vs control)
DMS15pc_G2_infectedG1_half <- readRDS("../../data/DMS15pc_G2_infectedG1_half.RDS")
nrow(DMS15pc_G2_infectedG1_half)
# 943 positions
#### WHICH positions?
library(VennDiagram)#to put up
## Check which sequenced CpG are overlapping between half offsprings and half parents datasets:
## YOU'RE HERE 14th feb evening!!
## Check which DMS are averlapping between offsprings and parents datasets
posG1DMS <- paste(DMS15pc_PAR_half$chr, DMS15pc_PAR_half$start, DMS15pc_PAR_half$end)
posG2DMS_controlG1 <- paste(DMS15pc_G2_controlG1_half$chr, DMS15pc_G2_controlG1_half$start, DMS15pc_G2_controlG1_half$end)
posG2DMS_infectedG1 <- paste(DMS15pc_G2_infectedG1_half$chr, DMS15pc_G2_infectedG1_half$start, DMS15pc_G2_infectedG1_half$end)
VennDiagram::get.venn.partitions(
list(posG1DMS=posG1DMS, posG2DMS_controlG1=posG2DMS_controlG1, posG2DMS_infectedG1=posG2DMS_infectedG1))
grid.newpage()
grid::grid.draw(VennDiagram::venn.diagram(list(posG1DMS=posG1DMS, posG2DMS_controlG1=posG2DMS_controlG1, posG2DMS_infectedG1=posG2DMS_infectedG1), NULL))
#################### Data load & preparation ####################
source("librariesLoading.R")
## load custom functions
source("customRfunctions.R")
## Load samples metadata
source("R01.3_loadMetadata.R")
## define in which machine we're working (apocrita or mythinkpad)
# machine="apocrita"
machine="mythinkpad"
## Load methylation data
source("R01.4_loadMethyldata.R")
