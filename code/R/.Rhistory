# calculate residuals of nbr of methCpG by nbr of covered CpG
myMetaData$res_Nbr_methCpG_Nbr_coveredCpG = residuals(
lm(myMetaData$Nbr_methCpG ~ myMetaData$Nbr_coveredCpG))
## REORDER myMetaData by sample ID
myMetaData = myMetaData[order(as.numeric(gsub("S", "", myMetaData$SampleID))),]
return(myMetaData)
}
fullMetadata <- mycalcRMS(uniteCovALL_woSexAndUnknowChr, fullMetadata)
fullMetadata_PAR <- mycalcRMS(uniteCov6_G1_woSexAndUnknowChrOVERLAP, fullMetadata_PAR)
fullMetadata_OFFS  <- mycalcRMS(uniteCov14_G2_woSexAndUnknowChrOVERLAP, fullMetadata_OFFS)
cor.test(fullMetadata_PAR$Nbr_coveredCpG,
fullMetadata_PAR$Nbr_methCpG, method = "spearman")
## S = 350, p-value = 2.15e-06, rho = 0.85
ggplot(fullMetadata_PAR, aes(x=Nbr_coveredCpG, y=Nbr_methCpG))+
geom_smooth(method = "lm", col="black")+
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = c("grey", "red")) +
theme_bw() + ggtitle(label = "Parents, CpG shared by half fish/trt")
## Check after RMS correction for coverage bias: CORRECTED (p-value = 0.4485)
cor.test(fullMetadata_PAR$Nbr_coveredCpG,
fullMetadata_PAR$RMS_coveredCpG, method = "spearman")
ggplot(fullMetadata_PAR, aes(x=Nbr_coveredCpG, y=RMS_coveredCpG))+
geom_smooth(method = "lm", col="black")+
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = c("grey", "red")) +
theme_bw() + ggtitle(label = "Parents, CpG shared by half fish/trt")
## and with residuals: COMPLETELY CORRECTED p-value = 0.9562
cor.test(fullMetadata_PAR$Nbr_coveredCpG,
fullMetadata_PAR$res_Nbr_methCpG_Nbr_coveredCpG, method = "spearman")
ggplot(fullMetadata_PAR, aes(x=Nbr_coveredCpG, y=res_Nbr_methCpG_Nbr_coveredCpG))+
geom_smooth(method = "lm", col="black")+
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = c("grey", "red")) +
theme_bw() + ggtitle(label = "Parents, CpG shared by half fish/trt")
############
## Offspring:
cor.test(fullMetadata_OFFS$Nbr_coveredCpG,
fullMetadata_OFFS$Nbr_methCpG, method = "spearman")
## S = 20254, p-value < 2.2e-16 rho = 0.91
ggplot(fullMetadata_OFFS, aes(x=Nbr_coveredCpG, y=Nbr_methCpG))+
geom_smooth(method = "lm", col="black")+
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = colOffs) +
scale_x_continuous("Number of cytosines covered") +
scale_y_continuous("Number of methylated cytosines") +
theme_bw() + ggtitle(label = "Offspring, CpG shared by half fish/trt")
## Plot distance to residuals:
fit <- lm(Nbr_methCpG ~ Nbr_coveredCpG, data = fullMetadata_OFFS)
plotdf <- fullMetadata_OFFS
plotdf$predicted <- predict(fit)   # Save the predicted values
plotdf$residuals <- residuals(fit)
ggplot(plotdf, aes(x=Nbr_coveredCpG, y=Nbr_methCpG))+
geom_smooth(method = "lm", col="black")+
geom_segment(aes(xend = Nbr_coveredCpG, yend = predicted), col = "grey") +
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = colOffs) +
scale_x_continuous("Number of cytosines covered") +
scale_y_continuous("Number of methylated cytosines") +
theme_bw() + ggtitle(label = "Offspring, CpG shared by half fish/trt")
## Check after RMS correction for coverage bias: SEMI CORRECTED (p-value = 0.01, rho = -0.24)
cor.test(fullMetadata_OFFS$Nbr_coveredCpG,
fullMetadata_OFFS$RMS_coveredCpG, method = "spearman")
ggplot(fullMetadata_OFFS, aes(x=Nbr_coveredCpG, y=RMS_coveredCpG))+
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = colOffs) +
geom_smooth(method = "lm", col="black")+
theme_bw() + ggtitle(label = "Offspring, CpG shared by half fish/trt")
## and with residuals: COMPLETELY CORRECTED p-value = 0.51
cor.test(fullMetadata_OFFS$Nbr_coveredCpG,
fullMetadata_OFFS$res_Nbr_methCpG_Nbr_coveredCpG, method = "spearman")
ggplot(fullMetadata_OFFS, aes(x=Nbr_coveredCpG, y=res_Nbr_methCpG_Nbr_coveredCpG))+
geom_point(aes(col=trtG1G2), size = 3)+ scale_color_manual(values = colOffs) +
geom_smooth(method = "lm", col="black")+
scale_x_continuous("Number of cytosines covered") +
scale_y_continuous("Residuals of number of methylated cytosines\n on number of cytosines covered") +
theme_bw() + ggtitle(label = "Offspring, CpG shared by half fish/trt")
mod = lm(MappingEfficiency.BSBoldvsGynogen ~ Sex, data = fullMetadata_OFFS)
summary(step(mod))
plot(ggpredict(mod, terms = c("Sex")), add.data = T)
mod = lm(M.Seqs_rawReads ~ Sex, data = fullMetadata_OFFS)
summary(step(mod))
plot(ggpredict(mod, terms = c("Sex")), add.data = T)
mod = lm(MeanCoverage ~ Sex, data = fullMetadata_OFFS)
summary(step(mod))
plot(ggpredict(mod, terms = c("Sex")), add.data = T)
mod = lm(Nbr_coveredCpG ~ Sex, data = fullMetadata_OFFS)
summary(step(mod))
plot(ggpredict(mod, terms = c("Sex")), add.data = T)
mod = lm(OverallPercentageMethylation ~ Sex, data = fullMetadata_OFFS)
summary(step(mod))
plot(ggpredict(mod, terms = c("Sex")), add.data = T)
mod = lm(res_Nbr_methCpG_Nbr_coveredCpG ~ Sex, data = fullMetadata_OFFS)
summary(step(mod)) # sex is significant p = 0.000157 ***
anova(mod)
plot(ggpredict(mod, terms = c("Sex")), add.data = T) +
xlab(NULL)+
ylab("Residuals of N methylated sites on N covered sites") +
ggtitle("Predicted values of global methylation in offspring")
fullMetadata_OFFS$res_Nbr_methCpG_Nbr_coveredCpG_div1000 <- (fullMetadata_OFFS$res_Nbr_methCpG_Nbr_coveredCpG)/1000
mod_Tol.Meth <- lmer(BCI ~ res_Nbr_methCpG_Nbr_coveredCpG_div1000*No.Worms*PAT + (1|brotherPairID)+ (1|Sex),
data=fullMetadata_OFFS, REML = F)
## Model selection:
step(mod_Tol.Meth, reduce.random = F) # Model found: BCI ~ No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) + No.Worms:PAT
## The slope of BCI on nbrworms varies upon treatment but methylation does NOT vary with tolerance
mod_Tol.Meth <- lmer(BCI ~ No.Worms*PAT + (1|brotherPairID)+ (1|Sex),
data=fullMetadata_OFFS)
## And by treatment instead of No.worms?
mod_Tol.Meth2 <- lmer(BCI ~ res_Nbr_methCpG_Nbr_coveredCpG_div1000*PAT*outcome + (1|brotherPairID)+ (1|Sex),
data=fullMetadata_OFFS, REML = F)
## Model selection:
step(mod_Tol.Meth2, reduce.random = F) # Model found: BCI ~ PAT + outcome + (1 | brotherPairID) + (1 | Sex) + PAT:outcome
## By group, tolerance slope as a function of methylation residuals:
modFULL <- lmer(BCI ~ res_Nbr_methCpG_Nbr_coveredCpG_div1000*No.Worms + (1|brotherPairID) + (1|Sex),
data = fullMetadata_OFFS[fullMetadata_OFFS$trtG1G2 %in% c("NE_exposed", "E_exposed"),])
## Model selection:
step(modFULL, reduce.random = F) # Model found: BCI ~ (1 | brotherPairID) + (1 | Sex)
modFULL <- lmer(BCI ~ res_Nbr_methCpG_Nbr_coveredCpG_div1000*PAT + (1|brotherPairID) + (1|Sex),
data = fullMetadata_OFFS[fullMetadata_OFFS$trtG1G2 %in% c("NE_exposed", "E_exposed"),])
## Model selection:
step(modFULL, reduce.random = F) # Model found: BCI ~ PAT + (1 | brotherPairID) + (1 | Sex)
# 1. get raw values
percmeth = percMethylation(uniteCov14_G2_woSexAndUnknowChrOVERLAP)
# Run PCA on complete data (CpG covered in all fish)
PCA_allpos <- myPCA(x = t(na.omit(percmeth)), incomplete = FALSE)
fviz_pca_ind(PCA_allpos$res.PCA,  label="none", habillage=PCA_allpos$metadata$trtG1G2) +
scale_color_manual(values = colOffs)+
scale_shape_manual(values=c(19,19,19,19))
fviz_pca_ind(PCA_allpos$res.PCA,  label="none", habillage=as.factor(PCA_allpos$metadata$brotherPairID))
# The function dimdesc() can be used to identify the most correlated variables with a given principal component.
mydimdesc <- dimdesc(PCA_allpos$res.PCA, axes = c(1,2), proba = 0.05)
# Percentage of variance explained by each factor:
formula(PCA_allpos$modSel) # BCI ~ No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) + No.Worms:PAT
mod_noworms = lmer(BCI ~ PAT + (1 | brotherPairID) + (1 | Sex), data = PCA_allpos$metadata)
mod_noPAT = lmer(BCI ~ No.Worms + (1 | brotherPairID) + (1 | Sex), data = PCA_allpos$metadata)
# R2c conditional R2 value associated with fixed effects plus the random effects.
A = (MuMIn::r.squaredGLMM(PCA_allpos$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noworms)[2])*100
B = (MuMIn::r.squaredGLMM(PCA_allpos$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPAT)[2])*100
# Set up scatterplot
scatterplot <- ggplot(fullMetadata_OFFS,
aes(x = res_Nbr_methCpG_Nbr_coveredCpG,
y = BCI, fill=trtG1G2)) +
geom_point(pch=21, size =3, alpha = .8) +
guides(color = "none") +
scale_fill_manual(values = colOffs, name = "Treatment",
labels = c("G1 control - G2 control", "G1 control - G2 exposed", "G1 exposed - G2 control", "G1 exposed - G2 exposed")) +
theme(plot.margin = margin()) + theme_bw() +
theme(legend.position = "none") +
xlab("Methylation residuals (methylated sites/coverage")+
ylab("Body Condition Index")
# Define marginal histogram
marginal_distribution <- function(x, var, group) {
ggplot(x, aes_string(x = var, fill = group)) +
# geom_histogram(bins = 30, alpha = 0.4, position = "identity") +
geom_density(alpha = 0.6, size = 0.2) +
guides(fill = "none") +
scale_fill_manual(values = colOffs) +
theme_void() +
theme(plot.margin = margin())
}
# Set up marginal histograms
x_hist <- marginal_distribution(fullMetadata_OFFS, "res_Nbr_methCpG_Nbr_coveredCpG", "trtG1G2")
y_hist <- marginal_distribution(fullMetadata_OFFS, "BCI", "trtG1G2") +
coord_flip()
# Align histograms with scatterplot
aligned_x_hist <- align_plots(x_hist, scatterplot, align = "v")[[1]]
aligned_y_hist <- align_plots(y_hist, scatterplot, align = "h")[[1]]
# Arrange plots
cowplot::plot_grid(
aligned_x_hist, NULL, scatterplot, aligned_y_hist, ncol = 2, nrow = 2, rel_heights = c(0.2, 1), rel_widths = c(1, 0.2)
)
makePrettyMethCluster(uniteCovALL_woSexAndUnknowChr, fullMetadata,
my.cols.trt=c("#333333ff","#ff0000ff","#ffe680ff","#ff6600ff","#aaccffff","#aa00d4ff"),
my.cols.fam = c(1:4), nbrk = 8)
makePrettyMethCluster(uniteCovALL_G2_woSexAndUnknowChr, fullMetadata_OFFS,
my.cols.trt=c("#ffe680ff","#ff6600ff", "#aaccffff", "#aa00d4ff"),
my.cols.fam = c(1:4), nbrk = 8)
# make distance matrix with B-C distances
data.dist = makeDatadistFUN(uniteCovALL_G2_woSexAndUnknowChr)
## Adonis test: importance of each predictor
adonis2(data.dist ~ PAT * outcome * Sex * brotherPairID, data = fullMetadata_OFFS)
perm <- how(nperm = 1000) # 1000 permutations
setBlocks(perm) <- with(fullMetadata_OFFS, brotherPairID) # define the permutation structure considering brotherPairID and sex
print(adonis2(data.dist ~ PAT * outcome * Sex, data = fullMetadata_OFFS, permutations = perm))
#### RUN Goodness of fit
myGOF.NMDS.FUN(dataset = uniteCovALL_G2_woSexAndUnknowChr)
## to find the seed that allows convergence:
# sapply(3:10, function(x) myNMDS(dataset = uniteCovALL_G2_woSexAndUnknowChr, metadata = fullMetadata_OFFS, myseed = x))
NMDSanalysis <- myNMDSFUN(dataset = uniteCovALL_G2_woSexAndUnknowChr, metadata = fullMetadata_OFFS, myseed = 4)
# png(filename = "Rfigures/NMDSplot_allG2.png", width = 900, height = 1100)
NMDSanalysis$NMDSplot
# dev.off()
AdonisWithinG1trtFUN(trtgp = c(2,3))
NMDSanalysis_G1control <- myNMDSFUN(dataset = uniteCovALL_G2_woSexAndUnknowChr,
metadata = fullMetadata_OFFS, myseed = 25,
byParentTrt=TRUE,
trtgp = c(2,3))
#png(filename = "Rfigures/NMDSplot_G1fromControlG2.png", width = 900, height = 900)
NMDSanalysis_G1control$NMDSplot
#dev.off()
AdonisWithinG1trtFUN(trtgp = c(5,6))
NMDSanalysis_G1infected <- myNMDSFUN(dataset = uniteCovALL_G2_woSexAndUnknowChr,
metadata = fullMetadata_OFFS, myseed = 25,
byParentTrt=TRUE,
trtgp = c(5,6))
#png(filename = "Rfigures/NMDSplot_G1fromInfectedG2.png", width = 900, height = 900)
NMDSanalysis_G1infected$NMDSplot
#dev.off()
## All in DMSBPlist
## Extract DMS (by position)
myPosList = lapply(DMSBPlist, lapply, function(x){paste(x$chr, x$end)})
## Find DMS present in at least 4 BP out of 8 (half):
get2keep = function(Compa, NBP = 4){
x <- lapply(myPosList, function(x){unlist(x[[paste0("DMS_15pc_BP_", Compa)]])})
f <- table(unlist((x))) # each DMS present between 1 and 8 times
tokeep <- names(f)[f >= NBP]
# print(length(tokeep))
## Keep the DMS present in 4 families minimum
DMSBPlist_INTER4 <- lapply(x, function(x){x[x %in% tokeep]})
## Reorder by family:
DMSBPlist_INTER4 <- DMSBPlist_INTER4[names(DMSBPlist_INTER4)[order(names(DMSBPlist_INTER4))]]
return(DMSBPlist_INTER4)
}
## Prepare df for complexUpset
getUpsetDF = function(i, NBP){ # for a given comparison
A = get2keep(vecCompa[i], NBP)
A2 = lapply(A, function(x){
x = data.frame(x)    # vector of DMS as df
names(x) = "DMS"    # name each CpG
return(x)
})
## Add BP name
for (i in 1:length(names(A2))){
A2[[i]]["BP"] = names(A2)[i]
}
# make a dataframe
A2 = A2 %>% reduce(full_join, by = "DMS")
# names column with BP id
for (i in 2:ncol(A2)) {names(A2)[i] = unique(A2[!is.na(A2[i]), i])}
# replace by 0 or 1 the DMS absence/presence
A = data.frame(apply(A2[2:9], 2, function(x) ifelse(is.na(x), 0, 1)))
# add DMS
A$DMS = A2$DMS
return(A)
}
## Vector of all 4 comparisons
vecCompa <- c("CC_TC", "CT_TT", "CC_CT", "TC_TT")
vecCompaVerbose <- c("Control offspring in control vs infected parents", "Infected offspring in control vs infected parents", "Control vs infected offspring from control parent", "Control vs infected offspring from infected parent")
for (i in 1:4){
df = getUpsetDF(i, NBP = 4)
print(ComplexUpset::upset(
df,
names(df)[1:8],
width_ratio=0.1,
themes=upset_default_themes(text=element_text(size=25)),
sort_intersections_by=c('degree', 'cardinality'),
queries=query_by_degree(
df,  names(df)[1:8],
params_by_degree=list(
'1'=list(color='red', fill='red'),
'2'=list(color='purple', fill='purple'),
'3'=list(color='blue', fill='blue'),
'4'=list(color='grey', fill='grey'),
'5'=list(color='red', fill='red'),
'6'=list(color='purple', fill='purple'),
'7'=list(color='blue', fill='blue'),
'8'=list(color='green', fill='green')
),
only_components=c("intersections_matrix", "Intersection size")
)) + ggtitle(paste0("Differentially methylated sites found in more than four brother pairs in the comparison: \n", vecCompaVerbose[i])) + theme(plot.title = element_text(size = 30)))
}
for (i in 1:4){
df = getUpsetDF(i, NBP = 6)
print(ComplexUpset::upset(
df,
names(df)[1:8],
width_ratio=0.1,
themes=upset_default_themes(text=element_text(size=15)),
sort_intersections_by=c('degree', 'cardinality'),
queries=query_by_degree(
df,  names(df)[1:8],
params_by_degree=list(
'1'=list(color='red', fill='red'),
'2'=list(color='purple', fill='purple'),
'3'=list(color='blue', fill='blue'),
'4'=list(color='grey', fill='grey'),
'5'=list(color='red', fill='red'),
'6'=list(color='purple', fill='purple'),
'7'=list(color='blue', fill='blue'),
'8'=list(color='green', fill='green')
),
only_components=c("intersections_matrix", "Intersection size")
)) + ggtitle(paste0("Differentially methylated sites found in more than six brother pairs in the comparison: \n", vecCompaVerbose[i]))) #+ theme(plot.title = element_text(size = 30)))
}
plotManhattanGenes <- function(i){
# print(paste0("The number of DMS in the ", vecCompa[i] ," comparison is:"))
DMSvec = unique(unlist(get2keep(vecCompa[i])))
# Annotate the DMS present in at least 4 BP:
# Change the vector into a methobject:
df <- data.frame(chr=sapply(strsplit(DMSvec, " "), `[`, 1),
start=sapply(strsplit(DMSvec, " "), `[`, 2),
end=sapply(strsplit(DMSvec, " "), `[`, 2))
# get annotation
anot4BP <- getAnnotationFun(makeGRangesFromDataFrame(df))
# Add info: in how many Brother pairs is a differential methylation found in a gene?
anotBPs = data.frame()
for (j in 4:8){
vec = names(table(unlist(get2keep(vecCompa[i])))[table(unlist(get2keep(vecCompa[i]))) %in% j])
if(!is_empty(vec)){ # in case of 8 BP, empty in some comparisons
df = data.frame(chr=sapply(strsplit(vec, " "), `[`, 1),
start=sapply(strsplit(vec, " "), `[`, 2),
end=sapply(strsplit(vec, " "), `[`, 2))
anot = getAnnotationFun(makeGRangesFromDataFrame(df))
anot$N_BP = j
anotBPs = rbind(anotBPs, anot)
}
}
# keep the highest N of BP (how many BP have at least one site DM in the gene)
anotBPs = anotBPs %>%
group_by(ID) %>%
dplyr::slice(which.max(N_BP)) %>%  dplyr::select(c(ID, N_BP))
# Ad N_BP info
anot4BP = merge(anot4BP, anotBPs)
# Reorder chromosome
anot4BP <- anot4BP %>%
mutate(chr = gsub("Gy_chr", "", seqid), chrom_nr = seqid %>% deroman(), chrom_order=factor(chrom_nr) %>%
as.numeric()) %>% arrange(chrom_order)  %>%
mutate(geneLengthkb = (end - start)/1000, nCpGperGenekb = nCpG/geneLengthkb)
# Plot
plot = ggplot(anot4BP, aes(x=start, y = nCpGperGenekb)) + geom_point(aes(col=as.factor(N_BP)), size = 2) +
scale_color_manual(values = c('grey', 'red', 'purple', 'blue', 'green'),
name = "Gene found differentially methylated in N brother pairs:") +
facet_grid(.~fct_inorder(chr)) +
geom_hline(yintercept = 1)+
theme(axis.text.x=element_blank(), legend.position="top") +
xlab(paste0("Genes with DMS present in at least 4 brother pairs\nComparison: ", vecCompa[i])) +
ylab("Number of differentially methylated CpG per gene kb")
## Genes with at least 1 CpG differentially methylated per kb:
topGenes = anot4BP[anot4BP$nCpGperGenekb >= 1,]
return(list(plot = plot, anot4BP = anot4BP, topGenes = topGenes))
}
plotManhattanGenes(1)$plot
plotManhattanGenes(2)$plot
plotManhattanGenes(3)$plot
plotManhattanGenes(4)$plot
# create gene universe
gene_universe <- data.frame(
subsetByOverlaps(GRanges(annotGff3), GRanges(uniteCov14_G2_woSexAndUnknowChrOVERLAP))) %>% # subselect covered CpGs
filter(lengths(Ontology_term)!=0) %>% # rm non existing GO terms
filter(type %in% "gene")  %>% # keep all the 7416 genes with GO terms
dplyr::select(c("Name", "Ontology_term")) %>%
mutate(go_linkage_type = "IEA") %>% #NB: IEA but not necessarily true, it's from Interproscan after Maker. Sticklebacks (biomart) have 82701 IEA and 63 ISS.
relocate("Ontology_term","go_linkage_type","Name") %>%
unnest(Ontology_term) %>% # one GO per line (was a list before in this column)
data.frame()
# Create gene set collection
goFrame <- GOFrame(gene_universe, organism="Gasterosteus aculeatus")
goAllFrame <- GOAllFrame(goFrame)
gsc_universe <- GeneSetCollection(goAllFrame, setType = GOCollection())
## For each comparison:
A=makedfGO(1, gene_universe); B=makedfGO(2, gene_universe); C=makedfGO(3, gene_universe); D=makedfGO(4, gene_universe)
dfGO = rbind(A, B, C, D)
# add type of comparison:
dfGO$group = "Different parental treatment"
dfGO$group[dfGO$Comp %in% c("CC_CT", "TC_TT")] = "Different offpring treatment"
dfGO %>% ggplot(aes(x=Comp, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("Treatments comparison") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
facet_grid(fct_inorder(GO.category)~group, scales="free",space = "free")
getGeneSummary <- function(i){
topgenes = plotManhattanGenes(i)$topGenes
df = data.frame(GeneSymbol = sapply(topgenes$Note, function(x) sub("Similar to ", "", x) %>% str_extract(".*:") %>% str_remove(":") %>% toupper),  # extract uniprot symbol from note, then uppercase
N_BP = topgenes$N_BP, seqid = topgenes$seqid) #add info: on how many BP? which chr? how many Cpg ar diffmeth?nCpGperGenekb = topgenes$nCpGperGenekb,
# Convert the uniprot gene names to entrez ids
topGenesDF = unlist(mapIds(org.Hs.eg.db, keys = df$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")) %>% data.frame()
names(topGenesDF) = "ENTREZID" ; topGenesDF$GeneSymbol = rownames(topGenesDF) ; rownames(topGenesDF) = NULL
# Retrieve gene summary & description
genes = entrez_summary(db="gene", id=topGenesDF$ENTREZID)
SummaDF = lapply(genes, function(x) x[["summary"]]) %>% unlist() %>% data.frame()
names(SummaDF) = "Summary" ; SummaDF$ENTREZID = rownames(SummaDF) ; rownames(SummaDF) = NULL
DescDF = lapply(genes, function(x) x[["description"]]) %>% unlist() %>% data.frame()
names(DescDF) = "description" ; DescDF$ENTREZID = rownames(DescDF) ; rownames(DescDF) = NULL
# Output complete table
topGenesDF = merge(merge(DescDF, topGenesDF, all = T), SummaDF, all = T)
# Add which comparison
topGenesDF$comparison = vecCompa[i]
# Add Number of brother pairs in which the gene is found
topGenesDF = merge(topGenesDF, df)
# order by N_BP
topGenesDF = topGenesDF[order(topGenesDF$N_BP, decreasing = T),]
return(topGenesDF)   # NB: some genes are not found automatically
}
for (i in 1:4){
print(kable(getGeneSummary(i)))
}
# 1. get raw values
## Keep DMS positions detected for parental effect (vecCompa 1 & 2)
DMSvec_parentalEffect = unique(unlist(c(get2keep(vecCompa[1], NBP = 4), get2keep(vecCompa[2], NBP = 4)))) # at least in 4 brother pairs (half)
pos2keep = which(paste(uniteCov14_G2_woSexAndUnknowChrOVERLAP$chr, uniteCov14_G2_woSexAndUnknowChrOVERLAP$start, sep = " ") %in% DMSvec_parentalEffect)
uniteAtDMS = methylKit::select(uniteCov14_G2_woSexAndUnknowChrOVERLAP, pos2keep)
percAtDMS = percMethylation(uniteAtDMS)
# Run PCA on complete data (CpG covered in all fish)
PCA_percAtDMS_all <- myPCA(x = t(na.omit(percAtDMS)), incomplete = FALSE)
fviz_pca_ind(PCA_percAtDMS_all$res.PCA,  label="none", habillage=PCA_percAtDMS_all$metadata$trtG1G2) +
scale_color_manual(values = colOffs)+
scale_shape_manual(values=c(19,19,19,19))
fviz_pca_ind(PCA_percAtDMS_all$res.PCA,  label="none", habillage=as.factor(PCA_percAtDMS_all$metadata$brotherPairID))
# The function dimdesc() can be used to identify the most correlated variables with a given principal component.
mydimdesc <- dimdesc(PCA_percAtDMS_all$res.PCA, axes = c(1,2), proba = 0.05)
# There are `r nrow(mydimdesc$Dim.1$quanti)` CpG sites most correlated (p < 0.05) with the first principal component , and `r nrow(mydimdesc$Dim.2$quanti)` with the second principal component.
nrow(mydimdesc$Dim.1$quanti)
nrow(mydimdesc$Dim.2$quanti)
# The second PCA axis is significant in BCI (`r formula(PCA_percAtDMS_all$modSel)`).
formula(PCA_percAtDMS_all$modSel)
# Percentage of variance explained by each factor:
mod_noworms = lmer(BCI ~ PCA2 + PAT + PCA2:PAT + (1 | brotherPairID) + (1 | Sex), data = PCA_percAtDMS_all$metadata)
mod_noPAT = lmer(BCI ~ PCA2 + No.Worms + (1 | brotherPairID) + (1 | Sex), data = PCA_percAtDMS_all$metadata)
mod_noPCA2 = lmer(BCI ~ No.Worms + PAT + No.Worms:PAT + (1 | brotherPairID) + (1 | Sex), data = PCA_percAtDMS_all$metadata)
# R2c conditional R2 value associated with fixed effects plus the random effects.
A = (MuMIn::r.squaredGLMM(PCA_percAtDMS_all$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noworms)[2])*100
B = (MuMIn::r.squaredGLMM(PCA_percAtDMS_all$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPAT)[2])*100
C = (MuMIn::r.squaredGLMM(PCA_percAtDMS_all$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPCA2)[2])*100
# 1. get raw values
# Run PCA on complete data (CpG covered in all fish)
PCA_percAtDMS_imputed <- myPCA(x = t(percAtDMS), incomplete = TRUE)
fviz_pca_ind(PCA_percAtDMS_imputed$res.PCA,  label="none", habillage=PCA_percAtDMS_imputed$metadata$trtG1G2) +
scale_color_manual(values = colOffs)+
scale_shape_manual(values=c(19,19,19,19))
fviz_pca_ind(PCA_percAtDMS_imputed$res.PCA,  label="none", habillage=as.factor(PCA_percAtDMS_imputed$metadata$brotherPairID))
# The function dimdesc() can be used to identify the most correlated variables with a given principal component.
mydimdesc <- dimdesc(PCA_percAtDMS_imputed$res.PCA, axes = c(1,2), proba = 0.05)
# There are `r nrow(mydimdesc$Dim.1$quanti)` CpG sites most correlated (p < 0.05) with the first principal component , and `r nrow(mydimdesc$Dim.2$quanti)` with the second principal component.
nrow(mydimdesc$Dim.1$quanti)
nrow(mydimdesc$Dim.2$quanti)
# The second PCA axis is significant in BCI (`r formula(PCA_percAtDMS_imputed$modSel)`).
formula(PCA_percAtDMS_imputed$modSel)
# Percentage of variance explained by each factor:
mod_noworms = lmer(BCI ~ PCA2 + PAT + PCA2:PAT + (1 | brotherPairID) + (1 | Sex), data = PCA_percAtDMS_imputed$metadata)
mod_noPAT = lmer(BCI ~ PCA2 + No.Worms + (1 | brotherPairID) + (1 | Sex), data = PCA_percAtDMS_imputed$metadata)
mod_noPCA2 = lmer(BCI ~ No.Worms + PAT + No.Worms:PAT + (1 | brotherPairID) + (1 | Sex), data = PCA_percAtDMS_imputed$metadata)
# R2c conditional R2 value associated with fixed effects plus the random effects.
A = (MuMIn::r.squaredGLMM(PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noworms)[2])*100
B = (MuMIn::r.squaredGLMM(PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPAT)[2])*100
C = (MuMIn::r.squaredGLMM(PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPCA2)[2])*100
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "PAT", "No.Worms")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PAT", "No.Worms", "PCA2")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("No.Worms", "PAT", "PCA2")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PAT", "PCA2", "No.Worms")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "PAT", "No.Worms")), add.data = TRUE) + theme_bw()
PCA_percAtDMS_imputed$modSel
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "PAT", "No.Worms")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("No.Worms", "PCA2", "PAT")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PAT", "PCA2", "No.Worms")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "PAT", "No.Worms")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE) + theme_bw()
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .5) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .1) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .05) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .08) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .08) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red") +
ylab("Body Condition Index") +
ggtitle("Predicted values of Body Condition Index in offspring")+
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .08) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red") +
ylab("Body Condition Index") +
ggtitle("Predicted values of Body Condition Index in offspring")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .08) + theme_bw() +
scale_color_gradient(low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red") +
ylab("Body Condition Index") +
ggtitle("Predicted values of Body Condition Index in offspring")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .08) + theme_bw() +
scale_color_gradient(name = "number of worms", low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red") +
ylab("Body Condition Index") +
ggtitle("Predicted values of Body Condition Index in offspring")
plot(ggpredict(PCA_percAtDMS_imputed$modSel, terms = c("PCA2", "No.Worms", "PAT")), add.data = TRUE, alpha = .08) + theme_bw() +
scale_color_gradient(name = "Number of worms", low = "blue", high = "red")+
scale_fill_gradient(low = "blue", high = "red") +
ylab("Body Condition Index") +
ggtitle("Predicted values of Body Condition Index in offspring")
fviz_pca_ind(PCA_percAtDMS_imputed$res.PCA,  label="none", habillage=PCA_percAtDMS_imputed$metadata$PAT) +
scale_color_manual(values = colOffs)+
scale_shape_manual(values=c(19,19,19,19))
fviz_pca_ind(PCA_percAtDMS_imputed$res.PCA,  label="none", habillage=PCA_percAtDMS_imputed$metadata$PAT) +
scale_shape_manual(values=c(19,19,19,19))
fviz_pca_ind(PCA_percAtDMS_imputed$res.PCA,  label="none", habillage=PCA_percAtDMS_imputed$metadata$PAT) +
scale_shape_manual(values=c(19,19))
fviz_pca_ind(PCA_percAtDMS_imputed$res.PCA,  label="none", habillage=as.factor(PCA_percAtDMS_imputed$metadata$PAT)) +
scale_shape_manual(values=c(19,19))
