pl<-ordiplot(NMDS, choices = c(2, 3), display = 'sites', type = 'n')
for(i in unique(group)) {
ordihull(NMDS3$point[grep(i, group),], draw="polygon",
groups = group[group == i],col = colors[grep(i,group)],label=F) }
ordihull(NMDS$point[grep(i, group),], draw="polygon",
groups = group[group == i],col = colors[grep(i,group)],label=F) }
orditorp(NMDS, display = "species", col = "red", air = 0.01)
####
metaMDS(youngDF[youngFishParas])
youngDF[youngFishParas]
####
metaMDS(youngDF[youngFishParas], distance = "euclidian")
####
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
plot(myNMDS, type = "t")
# prettier with ggplot2
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=6,vjust=0) +  # add the site labels
scale_colour_manual(values=c("A" = "red", "B" = "blue")) +
coord_equal() +
theme_bw()
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=6,vjust=0) +  # add the site labels
scale_colour_manual(values=c("A" = "red", "B" = "blue")) +
coord_equal() +
theme_bw()
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=6,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
# if doesn't work we can try euclidian
P1_Dist  = vegdist(youngDF[nonUniqPar], "euclidian")
####
myNMDS <- metaMDS(youngDF[nonUniqPar], distance = "euclidian")
plot(myNMDS, type = "t")
# prettier with ggplot2
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
data.scores$grp
[data.scores$grp %in% data.scores$grp[1]
data.scores$grp %in% data.scores$grp[1]
data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
data.scores$grp
data.scores
data.scores$grp
data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]
)
data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
sub <- data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
length(data.scores$grp)
length(unique(data.scores$grp)
)
groups <- unique(data.scores$grp)
groups
sub <- data.scores[data.scores$grp %in% groups[1], ][chull(data.scores[data.scores$grp %in% groups[1], c("NMDS1", "NMDS2")]), ]
sapply(1:length(groups), function(i) data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ])
lapply(1:length(groups), function(i) data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ])
sapply(1:length(groups), function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
retunr(df)
})
return(df)
sapply(1:length(groups), function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
})
hullDF <- sapply(1:length(groups), function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
})
makeHullDF <- function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
}
do.call("rbind", apply(1:length(groups), 1, makeHullDF))
do.call("rbind",sapply(1:length(groups), makeHullDF))
do.call("rbind", lapply(1:length(groups), makeHullDF))
do.call("rbind", lapply(1:length(groups), makeHullDF))
hullDF <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
hull.data <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
plot(myNMDS, type = "t")
# prettier with ggplot2
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
groups <- unique(data.scores$grp)
sub <- data.scores[data.scores$grp %in% groups[1], ][chull(data.scores[data.scores$grp %in% groups[1], c("NMDS1", "NMDS2")]), ]
makeHullDF <- function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
}
hull.data <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
---
title: "R Notebook"
output: html_notebook
---
# 1. Sequencing of bisulfite-converted DNA
))
## Analyses
## A. Balard
## November 2021
library(plyr) # for join (keep row order)
library(dendextend) # The package dendextend contains many functions for changing the appearance of a dendrogram and for comparing dendrograms.
library(ggplot2)
library(ggsignif) ## for significance bars on ggplot
library(lme4) ## for mixed models
library(nlme) ## for mixed models
library(tidyverse)
library(emmeans) ## for post-hoc Tukey tests
library(genepop) ## for epi-Fst
library(adegenet) ## for epi-Fst
library(poppr) # to handle missing data in epi-SNP ("missingno")
library(hierfstat) # to calculate heterozygosity
library(RColorBrewer)
# clear all objects
# rm(list = ls(all.names = TRUE))
## load custom functions
source("customRfunctions.R")
## Load previously united data (all 6 treatments)
## uniteCovALL: CpG covered in ALL individuals (has no NAs, useful for exploratory clustering analyses)
#load("/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/uniteCovALL_woSexAndUnknownChr.RData")
## For further analyses: CpG covered in at least 2 then 6 individuals per group
#load("/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/uniteCov2_woSexAndUnknownChr.RData")
# load("../../gitignore/output/uniteCov2_woSexAndUnknownChr.RData")
#load("/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/uniteCov6_woSexAndUnknowChr.RData")
## Load samples metadata
## Metylation metadata merged with Kostas files
fullMetadata <- read.csv("../../data/fullMetadata137_Alice.csv")
## relevel treatments for graphs
fullMetadata$trtG1G2 <- factor(as.factor(fullMetadata$trtG1G2), levels = c("Control", "Exposed","NE_control", "NE_exposed", "E_control", "E_exposed"  ))
## family as factor for models
fullMetadata$Family <- as.factor(fullMetadata$Family)
#####################################################################
## Compare fitness traits between the different offsprings groups ###
## Follow up of Sagonas 2020 & Ferre Ortega's master's dissertation #
#####################################################################
fullMetadata_offs <- fullMetadata[fullMetadata$Generat %in% "O",]
fullMetadata_offs$trtG1G2 <- droplevels(fullMetadata_offs$trtG1G2)
## Create variable for offsping and parents separated
fullMetadata_offs$offsTrt <- "controlO"
fullMetadata_offs$offsTrt[fullMetadata_offs$Tr %in% c("TT", "CT")] <- "infectedO"
fullMetadata_offs$patTrt <- "controlP"
fullMetadata_offs$patTrt[fullMetadata_offs$Tr %in% c("TC", "TT")] <- "infectedP"
## Sanity check
table(fullMetadata_offs$offsTrt, fullMetadata_offs$trtG1G2)
table(fullMetadata_offs$patTrt, fullMetadata_offs$trtG1G2)
## Kaufmann et al. 2014: Body condition of the G2 fish, an estimate of fish health and a predictor
# of energy reserves and reproductive success, was calculated using there residuals from the
# regression of body mass on body length (Chellappaet al.1995).
fullMetadata_offs$BCI <- residuals(lmer(Wnettofin ~ Slfin * Sex + (1|Family), data=fullMetadata_offs))
## Effect of paternal treatment on body condition of offspring:
## Kaufmann et al. 2014:
# To investigate in which way paternal G1 exposure affected offspring tolerance,
# we tested how the relationship between G2 body condition and infection intensity
# was affected by paternal G1 exposure. This was tested in a linear mixed model on
# G2 body condition with paternal G1 treatment and the interaction between
# paternal G1 treatment and G2 infection intensity as fixed effects. Maternal
# half-sibship identity was set as a random effect
## Effect of paternal exposure on tolerance:
modTol <- lme(BCI ~ patTrt + patTrt:No.Worms,random=~1|Family,data=fullMetadata_offs)
anova(modTol)
## Or modTol <- lme(BCI ~ patTrt*No.Worms,random=~1|Family,data=fullMetadata_offs)
myBCdf <- fullMetadata_offs %>% group_by(patTrt, No.Worms) %>%
summarise(BCI = mean(BCI)) %>% data.frame()
ggplot(fullMetadata_offs, aes(x=No.Worms, y = BCI, group = patTrt, col = patTrt))+
geom_point() + geom_line(data=myBCdf)+
geom_point(data=myBCdf, aes(fill = patTrt), col = "black", size = 3, pch = 21)+
scale_color_manual(values = c("gray", "red"))+
scale_fill_manual(values = c("gray", "red"))+
theme_bw()
## Effect of treatment groups of offspring on body condition:
## Kaufmann et al. 2014:
# The linear mixed effect model (nlme function in R) included G2 body condition as dependent variable,
# sex, G2 treatment (exposed vs. control), paternal G1 treatment (exposed vs. control)
# and their interactions as fixed effects as well as maternal G2 half-sibship identity as a random effect
mod1 <- lme(BCI ~ offsTrt * patTrt, random=~1|Family,data=fullMetadata_offs)
anova(mod1) # strong significant effect of both offspring trt & paternal + interactions
mod1.2 <- lme(BCI ~  trtG1G2, random=~1|Family,data=fullMetadata_offs)
## pairwise posthoc test
emmeans(mod1.2, list(pairwise ~ trtG1G2), adjust = "tukey")
## Control father - treatment offspring has a strongly significantly lower BC than
## every other group, same as Kaufmann et al. 2014
plot <- ggplot(fullMetadata_offs, aes(x=trtG1G2, y = BCI))+
geom_boxplot()+
geom_signif(comparisons = list(c("NE_control", "NE_exposed")),
map_signif_level=TRUE, annotations="***",
y_position = 150, tip_length = 0, vjust=0.4) +
geom_signif(comparisons = list(c("NE_exposed", "E_control")),
map_signif_level=TRUE, annotations="***",
y_position = 200, tip_length = 0, vjust=0.4) +
geom_signif(comparisons = list(c("NE_exposed", "E_exposed")),
map_signif_level=TRUE, annotations="***",
y_position = 250, tip_length = 0, vjust=0.4) +
theme_bw()
pdf(file = "../../data/fig/BCIoffspring.pdf")
plot
dev.off()
#######################################################
## Nbr/Ratio of Methylated Sites in different groups ##
#######################################################
## Nbr samples: 137
nrow(fullMetadata)
# Mean nbr of million reads: 11.2
mean(fullMetadata$M.Seqs_rawReads)
# 95% confidence interval: 0.35
qnorm(0.975)*sd(fullMetadata$M.Seqs_rawReads)/sqrt(nrow(fullMetadata))
# Average mapping efficiency +/-SD = 85.5% +/-0.47
mean(fullMetadata$MappingEfficiency.BSBoldvsGynogen)
qnorm(0.975)*sd(fullMetadata$MappingEfficiency.BSBoldvsGynogen)/sqrt(nrow(fullMetadata))
########################
## Calculate (1) Mfr per site, (2) biallelic equivalent, (3) epi-Fst and epi-FIS and (4) number of methylated sites in uniteCov2 (CpG shared by at least 2 fish, after filtering and normalising)
## (1) Mfr per site
reRun= FALSE
if(reRun == TRUE){
df <- methylKit::getData(uniteCov2_woSexAndUnknowChr)
MfrData2 <- data.frame(matrix(ncol=137, nrow=nrow(df)))
namevector <- paste0("Mfr", 1:137)
vector <- 1:137
for(i in vector){
colnames(MfrData2)[i] <- namevector[i]
MfrData2[i] <- df[paste0("numCs", i)]/df[paste0("coverage", i)]
}
}
## (2) biallelic equivalent
### Sagonas et al. 2020 MBE " A  number  of  methylated  sites/regions  were  estimated by converting the MFr into ordinal data: sites/regionswith little or no methylation (MFr<30%) were annotated as0  and  treated  as  no  methylated  sites/regions,  sites/regionswith  intermediate  methylation  levels  (30%<MFr<70%)were considered as heterozygote sites/regions and convertedinto  1,  whereas  sites/regions  with  high  or  fixed  methylation(MFr>70%) were treated as homozygous at this site/regionsand were annotated as 2."
rerun= FALSE
if(rerun == TRUE){
print("long part started, needs ~10min")
getBiallVal <- function(x){
y=NA
if(x <= 0.3 & !is.na(x)){
y = "00"
} else if(x > 0.3 & x < 0.7 & !is.na(x)){
y = "01"
} else if(x >= 0.7 & !is.na(x)){
y = "11"
}
return(y)
}
getBiallValVec <- function(vec){sapply(vec, getBiallVal)}
system.time(
MbiallData2 <- sapply(MfrData2, function(x) {getBiallValVec(x)})
)
#### Saving point ####
save(MfrData2, MbiallData2, file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
print("long truc saved")
}
#### Load data : MfrData2 & MbiallData2 ####
#load(file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
## rename correctly the full biallelic dataframe:
colnames(MbiallData2) <- uniteCov2_woSexAndUnknowChr@sample.ids
#### Load data : MfrData2 & MbiallData2 ####
load(file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
design <- cbind(Sample1 = c(1,1,0,0),
Sample2 = c(0,0,1,1),
A = c(1,0,0,0),
B = c(0,0,1,0))
design
#################### Data load & preparation ####################
source("librariesLoading.R")
setwd("Documents/pro/Git/StickParaOffsBroject/code/R")
#################### Data load & preparation ####################
source("librariesLoading.R")
## load custom functions
source("customRfunctions.R")
## Load samples metadata
source("R02.1_loadMetadata.R")
## define in which machine we're working (apocrita or mythinkpad)
##machine="apocrita"
machine="mythinkpad"
## Load methylation data
loadALL = FALSE # only load CpG shared by half fish per trt group + ALL
source("R02.2_loadMethyldata.R")
#########################
## Load file containing length of each gynogen chromosomes
## grep "contig" gitignore/bigdata/Gy_allnoM_rd3.maker_apocrita.noseq_corrected.gff | awk '{print $1, $5}' > data/Gy_allnoM_rd3.maker_apocrita.noseq_corrected_chromoAndLength.txt
GYgynogff = read.table("../../data/Gy_allnoM_rd3.maker_apocrita.noseq_corrected_chromoAndLength.txt")
names(GYgynogff) = c("chrom","length")
#########################
## Load genome annotation
## NB Promoters are defined by options at genomation::readTranscriptFeatures function.
## The default option is to take -1000,+1000bp around the TSS and you can change that.
## -> following Heckwolf 2020 and Sagonas 2020, we consider 1500bp upstream and 500 bp downstream
gene.obj=readTranscriptFeatures("../../gitignore/bigdata/06GynoAnnot/Gy_allnoM_rd3.maker_apocrita.noseq_corrected.gff.streamlined_for_AGAT.CURATED.bed12",
remove.unusual = FALSE, up.flank = 1500, down.flank = 500)
## Load curated gff file
gff <- rtracklayer::import("../../gitignore/bigdata/06GynoAnnot/Gy_allnoM_rd3.maker_apocrita.noseq_corrected.gff.streamlined_for_AGAT.CURATED.gff")
###########################################
## Source the previously calculated DMS/DMR
## Parents (brotherPairID as covariates)
### DM from CpG positions shared by half the fish per trt
DMS15pc_G1_half <- readRDS("../../data/DiffMeth/DMS15pc_G1_half.RDS"); nrow(DMS15pc_G1_half) # 3648
DMR15pc_G1_half <- readRDS("../../data/DiffMeth/DMR15pc_G1_half.RDS"); nrow(DMR15pc_G1_half) # 23
## Offspring (brotherPairID & Sex as covariates)
## Control G1 - G2(trt vs control)
### DM from CpG positions shared by half the fish per trt
DMS15pc_G2_controlG1_half <- readRDS("../../data/DiffMeth/DMS15pc_G2_controlG1_half.RDS")
nrow(DMS15pc_G2_controlG1_half) # 1197
DMR15pc_G2_controlG1_half <- readRDS("../../data/DiffMeth/DMR15pc_G2_controlG1_half.RDS")
nrow(DMR15pc_G2_controlG1_half) # 6
## Infected G1 - G2(trt vs control)
### DM from CpG positions shared by half the fish per trt
DMS15pc_G2_infectedG1_half <- readRDS("../../data/DiffMeth/DMS15pc_G2_infectedG1_half.RDS")
nrow(DMS15pc_G2_infectedG1_half) # 690
DMR15pc_G2_infectedG1_half <- readRDS("../../data/DiffMeth/DMR15pc_G2_infectedG1_half.RDS")
nrow(DMR15pc_G2_infectedG1_half) # 8
## Both trt G1 - Control G2
### DM from CpG positions shared by half the fish per trt
DMS15pc_G1_controlG2_half <- readRDS("../../data/DiffMeth/DMS15pc_G1_controlG2_half.RDS")
nrow(DMS15pc_G1_controlG2_half) # 1569
DMR15pc_G1_controlG2_half <- readRDS("../../data/DiffMeth/DMR15pc_G1_controlG2_half.RDS")
nrow(DMR15pc_G1_controlG2_half) # 14
## Both trt G1 - Infected G2
### DM from CpG positions shared by half the fish per trt
DMS15pc_G1_infectedG2_half <- readRDS("../../data/DiffMeth/DMS15pc_G1_infectedG2_half.RDS")
nrow(DMS15pc_G1_infectedG2_half) # 2050
DMR15pc_G1_infectedG2_half <- readRDS("../../data/DiffMeth/DMR15pc_G1_infectedG2_half.RDS")
nrow(DMR15pc_G1_infectedG2_half) # 19
######################
## Features Annotation (use package genomation v1.24.0)
## Parents comparison:
diffAnn_PAR = annotateWithGeneParts(as(DMS15pc_G1_half,"GRanges"),gene.obj)
diffAnn_PAR
## Offspring from control parents comparison:
diffAnn_G2_controlG1 = annotateWithGeneParts(as(DMS15pc_G2_controlG1_half,"GRanges"),gene.obj)
diffAnn_G2_controlG1
## Offspring from infected parents comparison:
diffAnn_G2_infectedG1 = annotateWithGeneParts(as(DMS15pc_G2_infectedG1_half,"GRanges"),gene.obj)
diffAnn_G2_infectedG1
###########################
## Function to get DMS info
myDMSinfo <- function(DMSobject, fromUniteCov){
DMS = paste(DMSobject$chr, DMSobject$start, DMSobject$end)
meth.diff = DMSobject$meth.diff
direction = ifelse(DMSobject$meth.diff > 0, "hyper", "hypo")
percentDMS = length(DMS)/nrow(fromUniteCov)*100
return(list(DMS = DMS, meth.diff = meth.diff, direction = direction, percentDMS = percentDMS))
}
## Run the function
DMS_info_G1 <- myDMSinfo(DMS15pc_G1_half, uniteCov6_G1_woSexAndUnknowChrOVERLAP)
DMS_info_G2_G1c_final <- myDMSinfo(DMS15pc_G2_controlG1_half, uniteCov14_G2_woSexAndUnknowChrOVERLAP)
DMS_info_G2_G1i_final <- myDMSinfo(DMS15pc_G2_infectedG1_half,uniteCov14_G2_woSexAndUnknowChrOVERLAP)
## Here: number of CpG sites
nrow(uniteCov14_G2_woSexAndUnknowChrOVERLAP) # 1,001,880
## Parents comparison:
length(DMS_info_G1$DMS)# 3648 DMS
DMS_info_G1$percentDMS # 0.36% of the CpGs are DMS
## Offspring from control parents comparison:
length(DMS_info_G2_G1c_final$DMS) # 1197 DMS
DMS_info_G2_G1c_final$percentDMS # 0.12% of the CpGs are DMS
## Offspring from infected parents comparison:
length(DMS_info_G2_G1i_final$DMS) # 690 DMS
DMS_info_G2_G1i_final$percentDMS # 0.07% of the CpGs are DMS
####################################################################################
#### Question: how are the beta values in the different groups at the parental DMS?##
####################################################################################
##############
## Prepare dataset
##############
PM_G1 <- getPMdataset(uniteCov = uniteCov6_G1_woSexAndUnknowChrOVERLAP, MD = fullMetadata_PAR, gener="parents")
PM_G2 <- getPMdataset(uniteCov = uniteCov14_G2_woSexAndUnknowChrOVERLAP, MD = fullMetadata_OFFS, gener="offspring")
head(PM_G1)
head(PM_G2)
table(fullMetadata_OFFS$trtG1G2, fullMetadata_OFFS$clutch.ID)
## Hypo
PM_G2_mean_hypo <- PM_G2[PM_G2$hypohyper %in% "hypo", ] %>%
group_by(brotherPairID, G1_trt, G2_trt, ID) %>%
dplyr::summarize(MeanBetaValue = mean(BetaValue, na.rm=TRUE)) %>% data.frame()
varPlot(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hypo,
MeanLine=list(var=c("G1_trt", "G2_trt"),
col=c("white", "blue"), lwd=c(2,2)),
BG=list(var="G2_trt", col=paste0("gray", c(80, 90))),
YLabel=list(cex = .8, text="Mean beta value at parDMS \n hypomethylated upon infection"))
table(fullMetadata_OFFS$trtG1G2, fullMetadata_OFFS$clutch.ID)
## Hypo
PM_G2_mean_hypo <- PM_G2[PM_G2$hypohyper %in% "hypo", ] %>%
group_by(brotherPairID, G1_trt, G2_trt, ID) %>%
dplyr::summarize(MeanBetaValue = mean(BetaValue, na.rm=TRUE)) %>% data.frame()
varPlot(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hypo,
MeanLine=list(var=c("G1_trt", "G2_trt"),
col=c("white", "blue"), lwd=c(2,2)),
BG=list(var="G2_trt", col=paste0("gray", c(80, 90))),
YLabel=list(cex = .8, text="Mean beta value at parDMS \n hypomethylated upon infection"))
myfitVCA_hypo <- fitVCA(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hypo)
print(myfitVCA_hypo, digits=4)
# estimate 95% confidence intervals, request CI for
# all variance components via 'VarVC=TRUE'
VCAinference(myfitVCA_hypo, VarVC=TRUE)
print(myfitVCA_hypo, digits=4)
## Hyper
PM_G2_mean_hyper <- PM_G2[PM_G2$hypohyper %in% "hyper", ] %>%
group_by(brotherPairID, G1_trt, G2_trt, ID) %>%
dplyr::summarize(MeanBetaValue = mean(BetaValue, na.rm=TRUE)) %>% data.frame()
varPlot(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hyper,
MeanLine=list(var=c("G1_trt", "G2_trt"),
col=c("white", "blue"), lwd=c(2,2)),
BG=list(var="G2_trt", col=paste0("gray", c(80, 90))),
YLabel=list(cex = .8, text="Mean beta value at parDMS \n hypermethylated upon infection"))
myfitVCA_hyper <- fitVCA(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hyper)
print(myfitVCA_hyper, digits=4)
print(myfitVCA_hypo, digits=4)
varPlot(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hypo,
MeanLine=list(var=c("G1_trt", "G2_trt"),
col=c("white", "blue"), lwd=c(2,2)),
BG=list(var="G2_trt", col=paste0("gray", c(80, 90))),
YLabel=list(cex = .8, text="Mean beta value at parDMS \n hypomethylated upon infection"))
varPlot(form = MeanBetaValue~(G1_trt* G2_trt*brotherPairID), Data = PM_G2_mean_hyper,
MeanLine=list(var=c("G1_trt", "G2_trt"),
col=c("white", "blue"), lwd=c(2,2)),
BG=list(var="G2_trt", col=paste0("gray", c(80, 90))),
YLabel=list(cex = .8, text="Mean beta value at parDMS \n hypermethylated upon infection"))
print(myfitVCA_hyper, digits=4)
# estimate 95% confidence intervals, request CI for
# all variance components via 'VarVC=TRUE'
VCAinference(myfitVCA_hyper, VarVC=TRUE)
##############
## In parents
##############
parmod <- lmer(data = PM_G1, BetaValue ~ meth.diff.parentals : Treatment + (1|CpGSite) + (1|brotherPairID))
## check normality of residuals assumption
qqnorm(resid(parmod))
qqline(resid(parmod))
pred <- ggpredict(parmod, terms = c("meth.diff.parentals", "Treatment"))
plot(pred, add.data = T)+
scale_color_manual(values = c("black", "red"))+
scale_y_continuous(name = "Beta values")+
scale_x_continuous(name = "Methylation difference between infected and control parents in percentage")+
ggtitle("Predicted methylation ratio (Beta) values in parents\n as a function of differential methylation between exposed and control groups")+
theme_bw()
#################### Data load & preparation ####################
source("librariesLoading.R")
BiocManager::install("WGCNA")
BiocManager::install("GenomicFeatures")
#################### Data load & preparation ####################
source("librariesLoading.R")
BiocManager::install("GenomicFeatures", force = TRUE)
BiocManager::install("GenomicFeatures", force = TRUE)
.libPaths()
installed.packages()[, c("Package", "LibPath")]
BiocManager::install("GenomicFeatures", force = TRUE)
BiocManager::install("GenomicFeatures", force = TRUE)
BiocManager::install("GenomicFeatures", force = TRUE)
