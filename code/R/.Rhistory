reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
# Define annotation colors
mycolors <- c("black", "red", colOffs)
# names(mycolors) <- levels(metadata$Treatment)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
# keep only names of the first chromosome, to display on heatmap
rownames(SWresults) <- data.frame(x = rownames(SWresults)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
# print heatmap
pheatmap(t(SWresults), cluster_cols=F,# annotation_row = metadata, annotation_colors = mycolors,
show_rownames = F)
# print heatmap
pheatmap(t(SWresults), cluster_cols=F)#,# annotation_row = metadata, annotation_colors = mycolors,
# print plot
SWresults
# print plot
test = head(SWresults)
melt(test)
test2=melt(test)
ggplot(test2)
ggplot(test2, aes(x=Var2, y=value))
ggplot(test2, aes(x=Var2, y=value))+
geom_line()
# keep only names of the first chromosome, to display on heatmap
SWresults_hm = SWresults
# coveredDMSpar = methylKit::select(uniteCovALL_woSexAndUnknowChr,
#                                   which(paste(uniteCovALL_woSexAndUnknowChr$chr, uniteCovALL_woSexAndUnknowChr$start) %in%
#                                           paste(DMS15pc_G1_half$chr, DMS15pc_G1_half$start)))
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
# if individuals are considered instead of grouping per treatment:
# # Prepare metadata to compare the observed structure with an expected one: add colors for trt on the side of heatmap
# metadata = data.frame(Treatment = fullMetadata$trtG1G2[match(colnames(perc_uniteObj), fullMetadata$SampleID)],
#                       BP = fullMetadata$brotherPairID[match(colnames(perc_uniteObj), fullMetadata$SampleID)])
# rownames(metadata) = fullMetadata$SampleID[match(colnames(perc_uniteObj), fullMetadata$SampleID)]
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
# simplify names of CpG windows
rownames(perc_uniteObj) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj))
# order positions by chromosomes & position
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
# Define annotation colors
mycolors <- c("black", "red", colOffs)
# names(mycolors) <- levels(metadata$Treatment)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
# keep only names of the first chromosome, to display on heatmap
SWresults_hm = SWresults
rownames(SWresults_hm) <- data.frame(x = rownames(SWresults_hm)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
# print heatmap
pheatmap(t(SWresults_hm), cluster_cols=F)
# print plot
test = head(SWresults)
test2=melt(test)
ggplot(test2, aes(x=Var2, y=value))+
geom_line()
ggplot(test2, aes(x=Var2, y=value, group=Var2))+
geom_line()
test2
ggplot(test2, aes(x=Var1, y=value, group=Var2))+
geom_line()
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2))
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=mycolors)
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=mycolors)
mycolors
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=as.vector(mycolors))
as.vector(mycolors)
unlist(mycolors)
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=unlist(mycolors))
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=c("black", "red", colOffs))
SWresults_mp=melt(SWresults)
ggplot(SWresults_mp, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=c("black", "red", colOffs))
lmer(BC ~ Sex +  trtG1G2 + NbrMethylatedCpG_global_BSBolt + (1|Family), fullMetadata_OFFS)
fullMetadata_OFFS$NbrMethylatedCpG_global_BSBolt
fullMetadata_OFFS$NbrMethylatedCpG_global_BSBolt/10^6
lmer(BC ~ Sex +  trtG1G2 + NbrMethylatedCpG_global_BSBolt/10^6 + (1|Family), fullMetadata_OFFS)
lmer(BC ~ Sex +  trtG1G2 + (NbrMethylatedCpG_global_BSBolt/10^6) + (1|Family), fullMetadata_OFFS)
test = fullMetadata_OFFS
test$NbrMethylatedCpG_global_BSBolt/10^6
test$nbrmethmillion = test$NbrMethylatedCpG_global_BSBolt/10^6
lmer(BC ~ Sex +  trtG1G2 + nbrmethmillion + (1|Family), test)
modFull = lmer(BC ~ Sex +  trtG1G2 + nbrmethmillion + (1|Family), test)
add1(modFull, scope = .~.)
add1(modFull, scope = .~. + .^2, test=”Chisq”)
add1(modFull, scope = .~. + .^2, test="Chisq")
modFull
modFull = lmer(BC ~ Sex +  factor(trtG1G2) + nbrmethmillion + (1|Family), test)
add1(modFull, scope = .~. + .^2, test="Chisq")
modFull
test$factrt = as.factor(test$trtG1G2)
modFull = lmer(BC ~ Sex +  factrt + nbrmethmillion + (1|Family), test)
add1(modFull, scope = .~. + .^2, test="Chisq")
modFull
add1(modFull, scope = .~. + .^2, test="Chisq")
add1(modFull, scope = .~. + .^2, test="Chisq")
library(MASS)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
full.model
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
modFull = lmer(BC ~ Sex +  factrt + nbrmethmillion + (1|Family), test)
modFull
step.model <- stepAIC(modFull, direction = "both",
trace = FALSE)
summary(step.model)
test = fullMetadata_OFFS
test$nbrmethmillion = test$NbrMethylatedCpG_global_BSBolt/10^6
test$factrt = as.factor(test$trtG1G2)
test[c("BC","nbrmethmillion", "Sex", "factrt")]
subtest = test[c("BC","nbrmethmillion", "Sex", "factrt")]
vars=colnames(subtest)
for (i in vars)  {
for (j in vars) {
if (i != j) {
factor= paste(i,j,sep='*')
lm.fit <- lm(paste0("return ~", factor), data=dt)
print(summary(lm.fit))
}
}
}
for (i in vars)  {
for (j in vars) {
if (i != j) {
factor= paste(i,j,sep='*')
lm.fit <- lm(paste0("return ~", factor), data=subtest)
print(summary(lm.fit))
}
}
}
SWresults_hm
# print heatmap
pheatmap(t(SWresults_hm), cluster_cols=F)
source("~/Documents/pro/Git/StickParaOffsBroject/code/R/customRfunctions.R")
rawmetadata
## A. Balard
## May 2022
## Slidding window analysis: detecting peaks of methylation
###########################################################
machine="mythinkpad" # define the machine we work on
loadALL = FALSE # only load CpG shared by half fish per trt group
loadannot = FALSE # load genome annotations
source("R02.3_DATALOAD.R")
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj = uniteCovALL_woSexAndUnknowChr
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
#################################
## 1. With average methylation ##
#################################
perc_uniteObj_ave = perc_uniteObj
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
###############################
perc_uniteObj_ave = perc_uniteObj
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj_ave), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj_ave) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj_ave = perc_uniteObj_ave %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj_ave)[names(perc_uniteObj_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj_ave = perc_uniteObj_ave[grep("ave", names(perc_uniteObj_ave))]
# simplify names of CpG windows
rownames(perc_uniteObj_ave) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj_ave))
# order positions by chromosomes & position
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj_ave, 2, reorderByChrom)
# Check order of chromosomes
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
# Slide over 100bp complete windows, shift of 20bp
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
# Define annotation colors
mycolors <- c("black", "red", colOffs)
# names(mycolors) <- levels(metadata$Treatment)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
# keep only names of the first chromosome, to display on heatmap
SWresults_hm = SWresults
rownames(SWresults_hm) <- data.frame(x = rownames(SWresults_hm)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
# print heatmap
pheatmap(t(SWresults_hm), cluster_cols=F)
# print plot
# SWresults_mp=melt(SWresults)
# ggplot(SWresults_mp, aes(x=Var1, y=value))+
#   geom_line(aes(group=Var2, col=Var2)) +
#   scale_color_manual(values=c("black", "red", colOffs))
####################################
## 2. With individual methylation ##
####################################
# Starting data set: methylations at CpG covered in all fish (N=55530CpG)
uniteObj
# Tile for DMR calculation
tiles = tileMethylCounts(uniteObj,win.size=100,step.size=20,cov.bases = 10)
tiles
fullMetadata$Generat
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]
tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]]
tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]]
tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]]
# Select only parents to get parDMR:
tilesG1 = reorganize(methylObj = tiles,
treatment = tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]],
sample.ids = tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]])
tilesG1
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3)
DMRG1
########################################
## Differential methylation functions ##
########################################
getDiffMeth <- function(myuniteCov, myMetadata, mccores=10, mydif = 15){
if (length(table(myMetadata$Sex)) == 1){
cov = data.frame(brotherPairID = myMetadata$brotherPairID)
} else if (length(table(myMetadata$Sex)) == 2){
cov = data.frame(brotherPairID = myMetadata$brotherPairID, Sex = myMetadata$Sex)
}
myDiffMeth=calculateDiffMeth(myuniteCov, covariates = cov, mc.cores = mccores)#10 on Apocrita
## We select the bases that have q-value<0.01 and percent methylation difference larger than 15%.
## NB: arg type="hyper" or type="hypo" gives hyper-methylated or hypo-methylated regions/bases.
myDMS_15pc = getMethylDiff(myDiffMeth, difference=mydif, qvalue=0.01)
return(myDMS_15pc)
}
source("~/Documents/pro/Git/StickParaOffsBroject/code/R/customRfunctions.R")
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 10)
DMRG1
# Tile for DMR calculation
tiles = tileMethylCounts(uniteObj, win.size=100,step.size=100,cov.bases = 10)
# Select only parents to get parDMR:
tilesG1 = reorganize(methylObj = tiles,
treatment = tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]],
sample.ids = tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]])
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 10)
DMRG1
# Tile for DMR calculation
tiles = tileMethylCounts(uniteObj, win.size=100,step.size=20,cov.bases = 10)
# Select only parents to get parDMR:
tilesG1 = reorganize(methylObj = tiles,
treatment = tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]],
sample.ids = tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]])
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 10)
# Select these tiles for G1 & G2
tiles_atDMRG1 = methylKit::select(tiles,
which(paste(tiles$chr, tiles$start) %in%
paste(DMRG1$chr, DMRG1$start)))
tiles_atDMRG1
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
# calculate average methylation per treatment group at each position
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
rawmetadata2
# calculate average methylation per treatment group at each position
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2 = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2)[names(perc_uniteObj2) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2 = perc_uniteObj2[grep("ave", names(perc_uniteObj2))]
perc_uniteObj2
# Reorder by chromosome
ordered_perc_uniteObj2 <- apply(
perc_uniteObj2, 2, reorderByChrom)
ordered_perc_uniteObj2
SWresults_hm
# print heatmap
pheatmap(t(ordered_perc_uniteObj2), cluster_cols=F)
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 5)
# Select these tiles for G1 & G2
tiles_atDMRG1 = methylKit::select(tiles,
which(paste(tiles$chr, tiles$start) %in%
paste(DMRG1$chr, DMRG1$start)))
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2 = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2)[names(perc_uniteObj2) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2 = perc_uniteObj2[grep("ave", names(perc_uniteObj2))]
# Reorder by chromosome
ordered_perc_uniteObj2 <- apply(
perc_uniteObj2, 2, reorderByChrom)
# print heatmap
pheatmap(t(ordered_perc_uniteObj2), cluster_cols=F)
ordered_perc_uniteObj2
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2_ave), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2_ave) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2_ave %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
# Reorder by chromosome
ordered_perc_uniteObj2_ave <- apply(
perc_uniteObj2_ave, 2, reorderByChrom)
# print heatmap
pheatmap(t(ordered_perc_uniteObj2_ave), cluster_cols=F)
# Select these tiles for G1 & G2
tiles_atDMRG1 = methylKit::select(tiles,
which(paste(tiles$chr, tiles$start) %in%
paste(DMRG1$chr, DMRG1$start)))
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2_ave), fullMetadata$SampleID), ]
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2_ave) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2_ave %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
# Reorder by chromosome
ordered_perc_uniteObj2_ave <- apply(
perc_uniteObj2_ave, 2, reorderByChrom)
# print heatmap
pheatmap(t(ordered_perc_uniteObj2_ave), cluster_cols=F)
ordered_perc_uniteObj2_ave
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
perc_uniteObj2
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
# calculate % methylation: each col is a sample, each row a position
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata2$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
perc_uniteObj2_ave
length(levels(rawmetadata2$trtG1G2)
)
# calculate average methylation per treatment group at each parDMS
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata2$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata2$SampleID[
rawmetadata2$trtG1G2 %in% levels(rawmetadata2$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata2$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
# Reorder by chromosome
ordered_perc_uniteObj2_ave <- apply(
perc_uniteObj2_ave, 2, reorderByChrom)
# print heatmap
pheatmap(t(ordered_perc_uniteObj2_ave), cluster_cols=F)
#################################
## 1. With average methylation ##
#################################
calcAveMeth <- function(perc_uniteObj){
# calculate average methylation per treatment group at each position
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
}
perc_uniteObj_ave = calcAveMeth(perc_uniteObj)
perc_uniteObj_ave
# calculate average methylation per treatment group at each parDMS
perc_uniteObj_ave_parDMS = calcAveMeth(perc_uniteObj2)
perc_uniteObj_ave_parDMS
source("~/Documents/pro/Git/StickParaOffsBroject/code/R/customRfunctions.R")
