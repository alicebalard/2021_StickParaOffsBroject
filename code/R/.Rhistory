DMS_info_G1$percentDMS # 0.36% of the CpGs are DMS
length(DMS_info_G2_G1c_final$DMS) # 1197 DMS
DMS_info_G2_G1c_final$percentDMS # 0.12% of the CpGs are DMS
length(DMS_info_G2_G1i_final$DMS) # 690 DMS
DMS_info_G2_G1i_final$percentDMS # 0.07% of the CpGs are DMS
PM_G1 <- getPMdataset(uniteCov = uniteCov6_G1_woSexAndUnknowChrOVERLAP, MD = fullMetadata_PAR, gener="parents")
PM_G2 <- getPMdataset(uniteCov = uniteCov14_G2_woSexAndUnknowChrOVERLAP, MD = fullMetadata_OFFS, gener="offspring")
head(PM_G1)
head(PM_G2)
table(fullMetadata_OFFS$trtG1G2, fullMetadata_OFFS$clutch.ID)
library(VCA)
myfitVCA <- fitVCA(form = BetaValue~(G1_trt+G2_trt)/brotherPairID/CpGSite,
Data = sample_n(PM_G2, 100))
print(myfitVCA, digits=4)
parmod <- lmer(data = PM_G1, BetaValue ~ meth.diff.parentals : Treatment + (1|CpGSite) + (1|brotherPairID))
qqnorm(resid(parmod))
qqline(resid(parmod))
pred <- ggpredict(parmod, terms = c("meth.diff.parentals", "Treatment"))
plot(pred, add.data = T)+
scale_color_manual(values = c("black", "red"))+
scale_y_continuous(name = "Beta values")+
scale_x_continuous(name = "Methylation difference between infected and control parents in percentage")+
ggtitle("Predicted methylation ratio (Beta) values in parents\n as a function of differential methylation between exposed and control groups")+
theme_bw()
modFull <- lmer(BetaValue ~ (G1_trt * G2_trt):hypohyper + (1|CpGSite) + (1|Sex) + (1|brotherPairID),data = PM_G2, REML = F) # REML =F for model comparison
mod_noG1trt <- lmer(BetaValue ~ G2_trt:hypohyper + (1|CpGSite)+ (1|Sex) + (1|brotherPairID), data = PM_G2, REML = F)
mod_noG2trt <-lmer(BetaValue ~ G1_trt:hypohyper + (1|CpGSite) + (1|Sex) + (1|brotherPairID), data = PM_G2, REML = F)
mod_noInteractions <- lmer(BetaValue ~ (G1_trt + G2_trt):hypohyper + (1|CpGSite) + (1|Sex) + (1|brotherPairID), data = PM_G2, REML = F)
mod_noHypoHyper <- lmer(BetaValue ~ (G1_trt * G2_trt) + (1|CpGSite) + (1|Sex) + (1|brotherPairID), data = PM_G2, REML = F)
qqnorm(resid(modFull))
qqline(resid(modFull))
lrtest(modFull, mod_noG1trt) # G1 trt is VERY VERY significant (LRT: χ² (4) = 1163.6, p < 0.001)
lrtest(modFull, mod_noG2trt) # G2 trt is VERY VERY significant (LRT: χ² (4) = 30.02, p < 0.001) NB that changed when brotherpair is used instead of family!
lrtest(modFull, mod_noInteractions) # interactions are significant (LRT: χ² (2) = 9.21, p < 0.01)
lrtest(modFull, mod_noHypoHyper) # hypo/hyper VERY VERY significant (LRT: χ² (4) = 1140, p < 0.001)
modFull <- lmer(BetaValue ~ (G1_trt * G2_trt):hypohyper + (1|CpGSite) + (1|Sex) + (1|brotherPairID),data = PM_G2)
modFull_emmeans <- emmeans(modFull, list(pairwise ~ (G1_trt:G2_trt):hypohyper), adjust = "tukey")
modFull_emmeans
P1 <- plot(modFull_emmeans, by = "hypohyper", comparisons = TRUE) +
theme_bw() +
ggtitle("Estimated marginal means of methylation ratio (beta)\n of offspring at parental DMS")+
theme(legend.position = "none", axis.title.x = element_blank()) +
scale_x_continuous("Beta value (methylation ratio)", limits = c(47,69.5))
modFullG1 <- lmer(BetaValue ~ G1_trt:hypohyper + (1|CpGSite) + (1|brotherPairID), data = PM_G1)
modFullG1_emmeans <- emmeans(modFullG1, list(pairwise ~ G1_trt:hypohyper), adjust = "tukey")
modFullG1_emmeans
P2 <- plot(modFullG1_emmeans, by = "hypohyper", comparisons = TRUE) +
theme_bw() +
ggtitle("Estimated marginal means of methylation ratio (beta)\n of parents at DMS")+
theme(legend.position = "none", axis.title.x = element_blank()) +
scale_x_continuous("Beta value (methylation ratio)", limits = c(47,69.5))
ggarrange(P2, P1, labels = c("A", "B"), ncol = 1, nrow = 2)
length(unique(PM_G1$CpGSite))# 3648 positions
PM_G1 %>% dplyr::count(ID)## NB: not all covered in all samples
length(unique(PM_G2$CpGSite[PM_G2$hypohyper %in% "hypo"]))# 1176 positions hypomethylated upon parental inf
length(unique(PM_G2$CpGSite[PM_G2$hypohyper %in% "hyper"]))# 2472 positions hypermethylated upon parental inf
myfun <- function(X){
X <- X %>% group_by(ID, Treatment, brotherPairID, clutch.ID, Sex) %>%
dplyr::summarise(ncov = n(),
hypoMeth = sum(BetaValue < 0.3),
hyperMeth = sum(BetaValue > 0.7)) %>% data.frame()
X$res_Nbr_methCpG_Nbr_coveredCpG_HYPO = residuals(lm(X$hypoMeth ~ X$ncov))
X$res_Nbr_methCpG_Nbr_coveredCpG_HYPER = residuals(lm(X$hyperMeth ~ X$ncov))
mod1 <- lmer(res_Nbr_methCpG_Nbr_coveredCpG_HYPO ~ Treatment + (1|brotherPairID/clutch.ID) + (1|Sex),
data = X, REML = F)
mod0 <- lmer(res_Nbr_methCpG_Nbr_coveredCpG_HYPO ~ 1 + (1|brotherPairID/clutch.ID) + (1|Sex),
data = X, REML = F)
print(lrtest(mod1, mod0))
modhypo <- lmer(res_Nbr_methCpG_Nbr_coveredCpG_HYPO ~ Treatment + (1|brotherPairID/clutch.ID) + (1|Sex),
data = X)
print(emmeans(modhypo, list(pairwise ~ Treatment), adjust = "tukey"))
mod3 <- lmer(res_Nbr_methCpG_Nbr_coveredCpG_HYPER ~ Treatment + (1|brotherPairID/clutch.ID) + (1|Sex),
data = X, REML = F)
mod4 <- lmer(res_Nbr_methCpG_Nbr_coveredCpG_HYPER ~ 1 + (1|brotherPairID/clutch.ID) + (1|Sex),
data = X, REML = F)
print(lrtest(mod3, mod4))
modhyper <- lmer(res_Nbr_methCpG_Nbr_coveredCpG_HYPER ~ Treatment + (1|brotherPairID/clutch.ID) + (1|Sex),
data = X)
print(emmeans(modhyper, list(pairwise ~ Treatment), adjust = "tukey"))
phypo <- plot(ggpredict(modhypo, terms = c("Treatment")), add.data = TRUE)+
scale_y_continuous("Residuals of number of hypomethylated methylated \ncytosines on number of cytosines covered") +
ggtitle("Predicted residuals nbr of hypomethylated CpG")+
theme_bw()
phyper <- plot(ggpredict(modhyper, terms = c("Treatment")), add.data = TRUE)+
scale_y_continuous("Residuals of number of hypermethylated methylated \n cytosines on number of cytosines covered") +
ggtitle("Predicted residuals nbr of hypermethylated CpG")+
theme_bw()
return(list(phypo, phyper))
}
listplots <- myfun(X = PM_G2[PM_G2$hypohyper %in% "hypo",])
annotate_figure(ggarrange(listplots[[1]], listplots[[2]],ncol = 2, nrow = 1),
top = text_grob("Parental DMS hypomethylated upon infection, in offspring"))
listplots <- myfun(X = PM_G2[PM_G2$hypohyper %in% "hyper",])
annotate_figure(ggarrange(listplots[[1]], listplots[[2]],ncol = 2, nrow = 1),
top = text_grob("Parental DMS hypermethylated upon infection, in offspring"))
=======
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
mycolors <- c("black", "red", colOffs)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
rownames(SWresults) <- data.frame(x = rownames(SWresults)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
pheatmap(t(SWresults), cluster_cols=F,# annotation_row = metadata, annotation_colors = mycolors,
show_rownames = F)
pheatmap(t(SWresults), cluster_cols=F)#,# annotation_row = metadata, annotation_colors = mycolors,
SWresults
test = head(SWresults)
melt(test)
test2=melt(test)
ggplot(test2)
ggplot(test2, aes(x=Var2, y=value))
ggplot(test2, aes(x=Var2, y=value))+
geom_line()
SWresults_hm = SWresults
uniteObj = uniteCovALL_woSexAndUnknowChr
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
rownames(perc_uniteObj) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj))
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj, 2, reorderByChrom)
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
mycolors <- c("black", "red", colOffs)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
SWresults_hm = SWresults
rownames(SWresults_hm) <- data.frame(x = rownames(SWresults_hm)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
pheatmap(t(SWresults_hm), cluster_cols=F)
test = head(SWresults)
test2=melt(test)
ggplot(test2, aes(x=Var2, y=value))+
geom_line()
ggplot(test2, aes(x=Var2, y=value, group=Var2))+
geom_line()
test2
ggplot(test2, aes(x=Var1, y=value, group=Var2))+
geom_line()
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2))
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=mycolors)
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=mycolors)
mycolors
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=as.vector(mycolors))
as.vector(mycolors)
unlist(mycolors)
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=unlist(mycolors))
ggplot(test2, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=c("black", "red", colOffs))
SWresults_mp=melt(SWresults)
ggplot(SWresults_mp, aes(x=Var1, y=value))+
geom_line(aes(group=Var2, col=Var2)) +
scale_color_manual(values=c("black", "red", colOffs))
lmer(BC ~ Sex +  trtG1G2 + NbrMethylatedCpG_global_BSBolt + (1|Family), fullMetadata_OFFS)
fullMetadata_OFFS$NbrMethylatedCpG_global_BSBolt
fullMetadata_OFFS$NbrMethylatedCpG_global_BSBolt/10^6
lmer(BC ~ Sex +  trtG1G2 + NbrMethylatedCpG_global_BSBolt/10^6 + (1|Family), fullMetadata_OFFS)
lmer(BC ~ Sex +  trtG1G2 + (NbrMethylatedCpG_global_BSBolt/10^6) + (1|Family), fullMetadata_OFFS)
test = fullMetadata_OFFS
test$NbrMethylatedCpG_global_BSBolt/10^6
test$nbrmethmillion = test$NbrMethylatedCpG_global_BSBolt/10^6
lmer(BC ~ Sex +  trtG1G2 + nbrmethmillion + (1|Family), test)
modFull = lmer(BC ~ Sex +  trtG1G2 + nbrmethmillion + (1|Family), test)
add1(modFull, scope = .~.)
add1(modFull, scope = .~. + .^2, test=”Chisq”)
add1(modFull, scope = .~. + .^2, test="Chisq")
modFull
modFull = lmer(BC ~ Sex +  factor(trtG1G2) + nbrmethmillion + (1|Family), test)
add1(modFull, scope = .~. + .^2, test="Chisq")
modFull
test$factrt = as.factor(test$trtG1G2)
modFull = lmer(BC ~ Sex +  factrt + nbrmethmillion + (1|Family), test)
add1(modFull, scope = .~. + .^2, test="Chisq")
modFull
add1(modFull, scope = .~. + .^2, test="Chisq")
add1(modFull, scope = .~. + .^2, test="Chisq")
library(MASS)
full.model <- lm(Fertility ~., data = swiss)
full.model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
modFull = lmer(BC ~ Sex +  factrt + nbrmethmillion + (1|Family), test)
modFull
step.model <- stepAIC(modFull, direction = "both",
trace = FALSE)
summary(step.model)
test = fullMetadata_OFFS
test$nbrmethmillion = test$NbrMethylatedCpG_global_BSBolt/10^6
test$factrt = as.factor(test$trtG1G2)
test[c("BC","nbrmethmillion", "Sex", "factrt")]
subtest = test[c("BC","nbrmethmillion", "Sex", "factrt")]
vars=colnames(subtest)
for (i in vars)  {
for (j in vars) {
if (i != j) {
factor= paste(i,j,sep='*')
lm.fit <- lm(paste0("return ~", factor), data=dt)
print(summary(lm.fit))
}
}
}
for (i in vars)  {
for (j in vars) {
if (i != j) {
factor= paste(i,j,sep='*')
lm.fit <- lm(paste0("return ~", factor), data=subtest)
print(summary(lm.fit))
}
}
}
SWresults_hm
pheatmap(t(SWresults_hm), cluster_cols=F)
source("~/Documents/pro/Git/StickParaOffsBroject/code/R/customRfunctions.R")
rawmetadata
machine="mythinkpad" # define the machine we work on
loadALL = FALSE # only load CpG shared by half fish per trt group
loadannot = FALSE # load genome annotations
source("R02.3_DATALOAD.R")
uniteObj = uniteCovALL_woSexAndUnknowChr
perc_uniteObj = percMethylation(uniteObj, rowids = TRUE)
perc_uniteObj_ave = perc_uniteObj
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
perc_uniteObj_ave = perc_uniteObj
rawmetadata = fullMetadata[match(colnames(perc_uniteObj_ave), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj_ave) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj_ave = perc_uniteObj_ave %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj_ave)[names(perc_uniteObj_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj_ave = perc_uniteObj_ave[grep("ave", names(perc_uniteObj_ave))]
rownames(perc_uniteObj_ave) <- sub('^([^.]+.[^.]+).*', '\\1', rownames(perc_uniteObj_ave))
reorderByChrom <- function(x){
df = data.frame(fullpos=names(x), beta=x, row.names = NULL)
df$chr = sapply(strsplit(df$fullpos,"\\."), `[`, 1)
df$pos = sapply(strsplit(df$fullpos,"\\."), `[`, 2)
df = df %>%
mutate(chrom_nr=chr %>% deroman(), # deroman is custom, defined in customRfunctions.R
chrom_order=factor(chrom_nr) %>% as.numeric()) %>%
arrange(chrom_order)
orderedVec = df$beta
names(orderedVec) = df$fullpos
return(orderedVec)
}
ordered_perc_uniteObj <- apply(
perc_uniteObj_ave, 2, reorderByChrom)
unique(sapply(strsplit(row.names(ordered_perc_uniteObj),"\\."), `[`, 1))
SWresults <- apply(ordered_perc_uniteObj, 2,
function(x) unlist(slide(x, mean, .after = 100, .step = 20, .complete = TRUE)))
nrow(SWresults)# 2772 slidding windows
mycolors <- c("black", "red", colOffs)
names(mycolors) <- gsub("ave","", colnames(SWresults))
mycolors <- list(Treatment = mycolors)
SWresults_hm = SWresults
rownames(SWresults_hm) <- data.frame(x = rownames(SWresults_hm)) %>%
separate(x, c("A", "chr", "C")) %>%
group_by(chr) %>%
dplyr::mutate(numbering = row_number()) %>%
dplyr::mutate(printRow = if_else(numbering == 1, chr, "")) %>%
.$printRow
pheatmap(t(SWresults_hm), cluster_cols=F)
uniteObj
tiles = tileMethylCounts(uniteObj,win.size=100,step.size=20,cov.bases = 10)
tiles
fullMetadata$Generat
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]
tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]]
tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]]
tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]]
tilesG1 = reorganize(methylObj = tiles,
treatment = tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]],
sample.ids = tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]])
tilesG1
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3)
DMRG1
getDiffMeth <- function(myuniteCov, myMetadata, mccores=10, mydif = 15){
if (length(table(myMetadata$Sex)) == 1){
cov = data.frame(brotherPairID = myMetadata$brotherPairID)
} else if (length(table(myMetadata$Sex)) == 2){
cov = data.frame(brotherPairID = myMetadata$brotherPairID, Sex = myMetadata$Sex)
}
myDiffMeth=calculateDiffMeth(myuniteCov, covariates = cov, mc.cores = mccores)#10 on Apocrita
myDMS_15pc = getMethylDiff(myDiffMeth, difference=mydif, qvalue=0.01)
return(myDMS_15pc)
}
source("~/Documents/pro/Git/StickParaOffsBroject/code/R/customRfunctions.R")
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 10)
DMRG1
tiles = tileMethylCounts(uniteObj, win.size=100,step.size=100,cov.bases = 10)
tilesG1 = reorganize(methylObj = tiles,
treatment = tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]],
sample.ids = tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]])
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 10)
DMRG1
tiles = tileMethylCounts(uniteObj, win.size=100,step.size=20,cov.bases = 10)
tilesG1 = reorganize(methylObj = tiles,
treatment = tiles@treatment[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]],
sample.ids = tiles@sample.ids[
tiles@sample.ids %in% fullMetadata$SampleID[fullMetadata$Generat %in% "P"]])
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 10)
tiles_atDMRG1 = methylKit::select(tiles,
which(paste(tiles$chr, tiles$start) %in%
paste(DMRG1$chr, DMRG1$start)))
tiles_atDMRG1
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
rawmetadata2
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2 = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2)[names(perc_uniteObj2) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2 = perc_uniteObj2[grep("ave", names(perc_uniteObj2))]
perc_uniteObj2
ordered_perc_uniteObj2 <- apply(
perc_uniteObj2, 2, reorderByChrom)
ordered_perc_uniteObj2
SWresults_hm
pheatmap(t(ordered_perc_uniteObj2), cluster_cols=F)
DMRG1 = getDiffMeth(tilesG1, fullMetadata[fullMetadata$Generat %in% "P",], mccores=3, mydif = 5)
tiles_atDMRG1 = methylKit::select(tiles,
which(paste(tiles$chr, tiles$start) %in%
paste(DMRG1$chr, DMRG1$start)))
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2 = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2)[names(perc_uniteObj2) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2 = perc_uniteObj2[grep("ave", names(perc_uniteObj2))]
ordered_perc_uniteObj2 <- apply(
perc_uniteObj2, 2, reorderByChrom)
pheatmap(t(ordered_perc_uniteObj2), cluster_cols=F)
ordered_perc_uniteObj2
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2_ave), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2_ave) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2_ave %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
ordered_perc_uniteObj2_ave <- apply(
perc_uniteObj2_ave, 2, reorderByChrom)
pheatmap(t(ordered_perc_uniteObj2_ave), cluster_cols=F)
tiles_atDMRG1 = methylKit::select(tiles,
which(paste(tiles$chr, tiles$start) %in%
paste(DMRG1$chr, DMRG1$start)))
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2_ave), fullMetadata$SampleID), ]
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2_ave) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2_ave %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
ordered_perc_uniteObj2_ave <- apply(
perc_uniteObj2_ave, 2, reorderByChrom)
pheatmap(t(ordered_perc_uniteObj2_ave), cluster_cols=F)
ordered_perc_uniteObj2_ave
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
perc_uniteObj2
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
perc_uniteObj2 = percMethylation(tiles_atDMRG1, rowids = TRUE)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata2$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
perc_uniteObj2_ave
length(levels(rawmetadata2$trtG1G2)
)
rawmetadata2 = fullMetadata[match(colnames(perc_uniteObj2), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata2$trtG1G2))){
whichCols = which(colnames(perc_uniteObj2) %in% rawmetadata2$SampleID[
rawmetadata2$trtG1G2 %in% levels(rawmetadata2$trtG1G2)[i]])
perc_uniteObj2_ave = perc_uniteObj2 %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj2_ave)[names(perc_uniteObj2_ave) %in% "X"] = paste0("ave", levels(rawmetadata2$trtG1G2)[i])
}
perc_uniteObj2_ave = perc_uniteObj2_ave[grep("ave", names(perc_uniteObj2_ave))]
ordered_perc_uniteObj2_ave <- apply(
perc_uniteObj2_ave, 2, reorderByChrom)
pheatmap(t(ordered_perc_uniteObj2_ave), cluster_cols=F)
calcAveMeth <- function(perc_uniteObj){
rawmetadata = fullMetadata[match(colnames(perc_uniteObj), fullMetadata$SampleID), ]
for (i in 1:length(levels(rawmetadata$trtG1G2))){
whichCols = which(colnames(perc_uniteObj) %in% rawmetadata$SampleID[
rawmetadata$trtG1G2 %in% levels(rawmetadata$trtG1G2)[i]])
perc_uniteObj = perc_uniteObj %>% data.frame() %>%
dplyr::mutate(X = rowMeans(dplyr::select(., whichCols), na.rm = T))
names(perc_uniteObj)[names(perc_uniteObj) %in% "X"] = paste0("ave", levels(rawmetadata$trtG1G2)[i])
}
perc_uniteObj = perc_uniteObj[grep("ave", names(perc_uniteObj))]
}
perc_uniteObj_ave = calcAveMeth(perc_uniteObj)
perc_uniteObj_ave
perc_uniteObj_ave_parDMS = calcAveMeth(perc_uniteObj2)
perc_uniteObj_ave_parDMS
source("~/Documents/pro/Git/StickParaOffsBroject/code/R/customRfunctions.R")
>>>>>>> 6ab3587c4a169b42fe759f0caea01aadf22664c7
