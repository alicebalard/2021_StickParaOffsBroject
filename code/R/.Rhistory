} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
return(SummaDF)
}
test2 = getGeneSummary(get(paste0("annotComp",2)))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
return(SummaDF)
}
test2 = getGeneSummary(get(paste0("annotComp",2)))
View(test2)
test = get(paste0("annotComp",3))
test2 = getGeneSummary(get(paste0("annotComp",3)))
test = get(paste0("annotComp",4))
test2 = getGeneSummary(get(paste0("annotComp",4)))
for (i in 1:4){
print(kable(getGeneSummary(myGeneSet = get(paste0("topGenes",i)), i = i)))
}
for (i in 1:4){
print(kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i)))))
}
#######################################
## Get full annotation from NCBI ENTREZ
## This function return a complete table adding to the previous annotation a longer summary
## of functions for corresponding human genes
## Input format: myGeneSet=get(paste0("annotComp",i))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
# Order by nCpGperGenekb
SummaDF = SummaDF[order(SummaDF$nCpGperGenekb, decreasing = T)]
return(SummaDF)
}
# Export csv files for gene annotations
for (i in 1:4){
write.table(x = getGeneSummary(myGeneSet = get(paste0("annotComp",i))),file = paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".csv"))
}
#######################################
## Get full annotation from NCBI ENTREZ
## This function return a complete table adding to the previous annotation a longer summary
## of functions for corresponding human genes
## Input format: myGeneSet=get(paste0("annotComp",i))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
# Order by nCpGperGenekb
# SummaDF = SummaDF[order(SummaDF$nCpGperGenekb, decreasing = T)]
return(SummaDF)
}
test = getGeneSummary(myGeneSet = get(paste0("annotComp",1)))
test$nCpGperGenekb
order(test$nCpGperGenekb, decreasing = T)
test[order(test$nCpGperGenekb, decreasing = T),]
#######################################
## Get full annotation from NCBI ENTREZ
## This function return a complete table adding to the previous annotation a longer summary
## of functions for corresponding human genes
## Input format: myGeneSet=get(paste0("annotComp",i))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
# Order by nCpGperGenekb
SummaDF = SummaDF[order(SummaDF$nCpGperGenekb, decreasing = T),]
return(SummaDF)
}
# Export csv files for gene annotations
for (i in 1:4){
write.table(x = getGeneSummary(myGeneSet = get(paste0("annotComp",i))),file = paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".csv"))
}
test[order(test$nCpGperGenekb, decreasing = T),]
test$Note
test$GeneSymbol
View(test)
class(test$GeneSymbol)
str(test$GeneSymbol)
apply(test, 2, str(GeneSymbol)
apply(test, 2, str
apply(test, 2, str)
unnest(test, test$GeneSymbol)
unnest(test, GeneSymbol)
unnest(test)
apply(test, 2, tidyr::unnest)
apply(test, 2, unnest)
unnest(test, GeneSymbol)
table(apply(test, 2, str))
test3=(apply(test, 2, str))
test3=apply(test, 2, str)
test %>%
mutate(across(where(is.list), ~ map(., first))) %>%
unnest()
test %>%
mutate(across(where(is.list))) %>%
unnest()
test
test %>%
mutate(across(everything(), ~unlist(x)))
test2=test %>%
mutate(across(everything(), ~unlist(x)))
apply(test, 2, str)
test2=test %>%
mutate(across(everything(), ~unest(x)))
apply(test, 2, str)
View(test2)
str(test$GeneSymbol)
str(test$Name)
str(test$source)
str(test$summary)
str(test$Alias)
str(test2$Alias)
test=getGeneSummary(myGeneSet = get(paste0("annotComp",1)))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
# Order by nCpGperGenekb
SummaDF = SummaDF[order(SummaDF$nCpGperGenekb, decreasing = T),]
return(SummaDF)
}
test=getGeneSummary(myGeneSet = get(paste0("annotComp",1)))
test=getGeneSummary(myGeneSet = get(paste0("annotComp",2)))
test$Alias
unlist(test$Alias)
test[["Alias"]]
test[[term]] = unlist(test[[term]])
for (term in c("Alias", "Dbxref", "Ontology_term", "Parent", "aligned_coverage", "aligned_identity", "score.1", "target_length")){
test[[term]] = unlist(test[[term]])
}
test[[term]] = unnest(test[[term]])
for (term in c("Alias", "Dbxref", "Ontology_term", "Parent", "aligned_coverage", "aligned_identity", "score.1", "target_length")){
test[[term]] = unnest(test[[term]])
}
for (term in c("Alias", "Dbxref", "Ontology_term", "Parent", "aligned_coverage", "aligned_identity", "score.1", "target_length")){
test[[term]] = unnest(data = test, cols = term)
}
test$Ontology_term
test$Alias
test$Dbxref
test$Ontology_term
test$Parent
test$aligned_coverage
test$aligned_identity
test$score.1
test$target_length
unlist(test$Alias)
unlist(test$Dbxref)
unlist(test$Ontology_term)
unlist(test$Parent)
# Export html files for full annotation
for (i in 1:4){
kable_out = knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>% kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
test$GeneSymbol
test$Name
View(test)
names(test)
test$GeneSymbol
test$Name
test$Note
test$seqid
test$source
test$type
test$GeneSymbol
test$score
test$strand
test$phase
test$ID
test$Alias
test = getGeneSummary(myGeneSet = get(paste0("annotComp",1)))
names(test)
test$Alias
test$Note
test$Dbxref
test$Parent
test$Name
test$X_AED
test$X_QI
test$X_eAED
test$X_merge_warning
test$aligned_coverage
test$aligned_identity
test$score.1
test$target_length
test$Target
test$nbrBP
test$nCpG
test$nCpGperGenekb
test$chrom
test$ENTREZID
test$Ontology_term
unlist(test$Ontology_term)
unnest(test,Ontology_term)
unlist(test$Parent)
unlist(test$Ontology_term)
test$Ontology_term
#######################################
## Get full annotation from NCBI ENTREZ
## This function return a complete table adding to the previous annotation a longer summary
## of functions for corresponding human genes
## Input format: myGeneSet=get(paste0("annotComp",i))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
# Order by nCpGperGenekb
SummaDF = SummaDF[order(SummaDF$nCpGperGenekb, decreasing = T),]
# Keep meaningful information
tokeep = c("GeneSymbol", "Name", "start", "end", "ID", "Note", "Ontology_term", "nbrBP", "nCpG", "geneLengthkb", "nCpGperGenekb", "chrom", "ENTREZID", "description", "summary")
SummaDF = SummaDF[names(SummaDF) %in% tokeep]
return(SummaDF)
}
# Export html files for full annotation (csv is problematic with lists)
for (i in 1:4){
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
# Export html files for full annotation (csv is problematic with lists)
for (i in 1:4){
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
rownames(SummaDF)
rownames(test)
rownames(test) = NULL
rownames(test)
test
test[names(test) %in% tokeep]
# Keep meaningful information
tokeep = c("GeneSymbol", "Name", "start", "end", "ID", "Note", "Ontology_term", "nbrBP", "nCpG", "geneLengthkb", "nCpGperGenekb", "chrom", "ENTREZID", "description", "summary")
test[names(test) %in% tokeep]
#######################################
## Get full annotation from NCBI ENTREZ
## This function return a complete table adding to the previous annotation a longer summary
## of functions for corresponding human genes
## Input format: myGeneSet=get(paste0("annotComp",i))
getGeneSummary <- function(myGeneSet){
# Extract gene symbol from the "Note" attribute
myGeneSet$Note = unlist(myGeneSet$Note)
myGeneSet$GeneSymbol = str_extract(myGeneSet$Note, "(?<=Similar to )(\\w+)")
# MANUAL CURATION!! All the genes that are weirdly named, with "-" or so
#check = myGeneSet[c("Note", "GeneSymbol")]
listOfWeirdos = c("Type-4 ice-structuring protein LS-12", "MNCb-2990", "Trypsin-3", "anxa2-b", "unc5b-b", "QtsA-11015", # comp1
"Type-4 ice-structuring protein LS-12", "MNCb-2990", "en2-a", "draxin-B", "Trypsin-3", " Protein C1orf43 homolog", "Uncharacterized protein FLJ43738", "tlcd4-b", #comp2
"tlcd4-b", # comp3
"anxa2-b", "QtsA-11015", "unc5b-b") # comp4
for (i in 1:length(listOfWeirdos)){
myGeneSet[grepl(listOfWeirdos[i],myGeneSet$Note),"GeneSymbol"] = listOfWeirdos[i]
}
myGeneSet$GeneSymbol = myGeneSet$GeneSymbol %>% toupper # upper case all gene symbols to fit human DB
# Convert the uniprot gene names to entrez ids
ENTREZIDlist = mapIds(org.Hs.eg.db, keys = myGeneSet$GeneSymbol, column = "ENTREZID", keytype = "SYMBOL")
# Retrieve gene summary & description IN HUMANS (more annotation)
## Fix if DB too big:
if (length(ENTREZIDlist) > 400){
SummaENTREZ1 = entrez_summary(db="gene", id=ENTREZIDlist[1:400])
SummaENTREZ2 = entrez_summary(db="gene", id=ENTREZIDlist[400:length(ENTREZIDlist)])
SummaENTREZ = c(SummaENTREZ1, SummaENTREZ2)
} else {
SummaENTREZ = entrez_summary(db="gene", id=ENTREZIDlist)
}
SummaDF = data.frame(GeneSymbol=sapply(SummaENTREZ, function(x) x[["name"]]) %>% unlist(),
ENTREZID = names(SummaENTREZ),
description=sapply(SummaENTREZ, function(x) x[["description"]]) %>% unlist(),
summary=sapply(SummaENTREZ, function(x) x[["summary"]]) %>% unlist())
# merge with Notes from uniprot (contained in the gff3)
SummaDF = unique(merge(myGeneSet, SummaDF, all=T))
# Order by nCpGperGenekb
SummaDF = SummaDF[order(SummaDF$nCpGperGenekb, decreasing = T),]
# Keep meaningful information
tokeep = c("GeneSymbol", "Name", "start", "end", "ID", "Note", "Ontology_term", "nbrBP", "nCpG", "geneLengthkb", "nCpGperGenekb", "chrom", "ENTREZID", "description", "summary")
SummaDF = SummaDF[names(SummaDF) %in% tokeep]
rownames(SummaDF) = NULL
return(SummaDF)
}
# Export html files for full annotation (csv is problematic with lists)
for (i in 1:4){
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
test=getGeneSummary(myGeneSet = get(paste0("annotComp",1)))
View(test)
# Export html files for full annotation (csv is problematic with lists)
for (i in 1:4){
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
# Export html files for full annotation (csv is problematic with lists)
for (i in 1:4){
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
# Export html files for full annotation (csv is problematic with lists)
getGeneSummary(myGeneSet = get(paste0("annotComp",i)))
rm(i)
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",1))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",1))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[1], ".html"))
# Export html files for full annotation (csv is problematic with lists)
A = getGeneSummary(myGeneSet = get(paste0("annotComp",i)))
# Export html files for full annotation (csv is problematic with lists)
A = getGeneSummary(myGeneSet = get(paste0("annotComp",1)))
View(A)
knitr::kable(A, "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[1], ".html"))
kable_out=knitr::kable(A, "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[1], ".html"))
# Export html files for full annotation (csv is problematic with lists)
for (i in 1:4){
kable_out=knitr::kable(getGeneSummary(myGeneSet = get(paste0("annotComp",i))), "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
readr::write_file(kable_out, paste0("Rfigures/DMSGenesSummary_", vecCompa[i], ".html"))
}
# create gene universe
gene_universe <- data.frame(
subsetByOverlaps(GRanges(annotGff3), GRanges(uniteCov14_G2_woSexAndUnknowChrOVERLAP))) %>% # subselect covered CpGs
filter(lengths(Ontology_term)!=0) %>% # rm non existing GO terms
filter(type %in% "gene")  %>% # keep all the 7416 genes with GO terms
dplyr::select(c("Name", "Ontology_term")) %>%
mutate(go_linkage_type = "IEA") %>% #NB: IEA but not necessarily true, it's from Interproscan after Maker. Sticklebacks (biomart) have 82701 IEA and 63 ISS.
relocate("Ontology_term","go_linkage_type","Name") %>%
unnest(Ontology_term) %>% # one GO per line (was a list before in this column)
data.frame()
# Create gene set collection
goFrame <- GOFrame(gene_universe, organism="Gasterosteus aculeatus")
goAllFrame <- GOAllFrame(goFrame)
gsc_universe <- GeneSetCollection(goAllFrame, setType = GOCollection())
## For each comparison:
A=makedfGO(1, gene_universe); B=makedfGO(2, gene_universe); C=makedfGO(3, gene_universe); D=makedfGO(4, gene_universe)
