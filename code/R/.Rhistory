P1_Dist  = vegdist(t, "bray")
NMDS <- metaMDS(P1_Dist, zerodist="add")
NMDS <- metaMDS(P1_Dist, zerodist="add")
stressplot(NMDS)
adonis(P1_Dist ~ youngDF$population, method="euclidean",perm=999) # p=0.001
data.scores <- as.data.frame(scores(NMDS))
data.scores$id <- rownames(data.scores)
data.scores$grp<-youngDF$population
ggplot(data=data.scores) +
geom_point(aes(x=NMDS1,y=NMDS2,colour=grp)) +
theme_minimal()
ggplot(data=data.scores) +
geom_point(aes(x=NMDS1,y=NMDS2,fill=grp), pch =21) +
theme_minimal()
ggplot(data=data.scores) +
geom_point(aes(x=NMDS1,y=NMDS2,fill=grp), pch =21, alpha =.5, size =2) +
theme_minimal()
ggplot(data=data.scores) +
geom_point(aes(x=NMDS1,y=NMDS2,fill=grp), pch =21, alpha =.2, size =2) +
theme_minimal()
ggplot(data=data.scores) +
geom_point(aes(x=NMDS1,y=NMDS2,fill=grp), pch =21, alpha =.2, size =3) +
theme_minimal()
group = c(rep("Group1", 12), rep("Group2", 12))
group
group = youngDF$population
group
as.factor(group)
as.numeric(group)
ordiplot(NMDS, type = "n")
ordiplot(data.scores, type = "n")
ordiplot(NMDS, type = "n")
ordiplot(data.scores, type = "n")
NMDS <- metaMDS(P1_Dist, zerodist="add)
NMDS <- metaMDS(P1_Dist)
ordiplot(NMDS, type = "n")
ordiplot(NMDS, type = "n")
P1_Dist  = vegdist(t, "euclidian")
P1_Dist  = vegdist(youngDF[youngFishParas], "euclidian")
NMDS <- metaMDS(P1_Dist)
envfit(NMDS, youngDF[youngFishParas])
stressplot(NMDS)
ordiplot(NMDS, type = "n")
ordiplot(envfit(NMDS, youngDF[youngFishParas])
, type = "n")
ordiplot(envfit(NMDS, youngDF[youngFishParas]) , type = "n")
ordiplot(NMDS,display = "sites", type = "n")
ggplot(data = NMDS, aes(MDS1, MDS2))
ordiplot(NMDS, display = "sites", type = "plot")
ordiplot(NMDS)
pl<-ordiplot(NMDS, choices = c(2, 3), display = 'sites', type = 'n')
for(i in unique(group)) {
ordihull(NMDS3$point[grep(i, group),], draw="polygon",
groups = group[group == i],col = colors[grep(i,group)],label=F) }
ordihull(NMDS$point[grep(i, group),], draw="polygon",
groups = group[group == i],col = colors[grep(i,group)],label=F) }
orditorp(NMDS, display = "species", col = "red", air = 0.01)
metaMDS(youngDF[youngFishParas])
youngDF[youngFishParas]
metaMDS(youngDF[youngFishParas], distance = "euclidian")
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
plot(myNMDS, type = "t")
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=6,vjust=0) +  # add the site labels
scale_colour_manual(values=c("A" = "red", "B" = "blue")) +
coord_equal() +
theme_bw()
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=6,vjust=0) +  # add the site labels
scale_colour_manual(values=c("A" = "red", "B" = "blue")) +
coord_equal() +
theme_bw()
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=6,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
P1_Dist  = vegdist(youngDF[nonUniqPar], "euclidian")
myNMDS <- metaMDS(youngDF[nonUniqPar], distance = "euclidian")
plot(myNMDS, type = "t")
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
data.scores$grp
[data.scores$grp %in% data.scores$grp[1]
data.scores$grp %in% data.scores$grp[1]
data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
data.scores$grp
data.scores
data.scores$grp
data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]
)
data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
sub <- data.scores[data.scores$grp %in% data.scores$grp[1], ][chull(data.scores[data.scores$grp %in% data.scores$grp[1], c("NMDS1", "NMDS2")]), ]
length(data.scores$grp)
length(unique(data.scores$grp)
)
groups <- unique(data.scores$grp)
groups
sub <- data.scores[data.scores$grp %in% groups[1], ][chull(data.scores[data.scores$grp %in% groups[1], c("NMDS1", "NMDS2")]), ]
sapply(1:length(groups), function(i) data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ])
lapply(1:length(groups), function(i) data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ])
sapply(1:length(groups), function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
retunr(df)
})
return(df)
sapply(1:length(groups), function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
})
hullDF <- sapply(1:length(groups), function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
})
makeHullDF <- function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
}
do.call("rbind", apply(1:length(groups), 1, makeHullDF))
do.call("rbind",sapply(1:length(groups), makeHullDF))
do.call("rbind", lapply(1:length(groups), makeHullDF))
do.call("rbind", lapply(1:length(groups), makeHullDF))
hullDF <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
hull.data <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
myNMDS <- metaMDS(youngDF[youngFishParas], distance = "euclidian")
plot(myNMDS, type = "t")
data.scores <- as.data.frame(scores(myNMDS))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
data.scores$grp <- youngDF$population
head(data.scores)  #look at the data
species.scores <- as.data.frame(scores(myNMDS, "species"))  #Using the scores function from vegan to extract the species scores and convert to a data.frame
species.scores$species <- rownames(species.scores)  # create a column of species, from the rownames of species.scores
head(species.scores)  #look at the data
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
groups <- unique(data.scores$grp)
sub <- data.scores[data.scores$grp %in% groups[1], ][chull(data.scores[data.scores$grp %in% groups[1], c("NMDS1", "NMDS2")]), ]
makeHullDF <- function(i) {
df = data.scores[data.scores$grp %in% groups[i], ][chull(data.scores[data.scores$grp %in% groups[i], c("NMDS1", "NMDS2")]), ]
return(df)
}
hull.data <- do.call("rbind", lapply(1:length(groups), makeHullDF))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_polygon(data=hull.data,aes(x=NMDS1,y=NMDS2,fill=grp,group=grp),alpha=0.30) + # add the convex hulls
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,colour=grp),size=3) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=2,vjust=0) +  # add the site labels
coord_equal() +
theme_bw()
---
title: "R Notebook"
output: html_notebook
---
))
library(plyr) # for join (keep row order)
library(dendextend) # The package dendextend contains many functions for changing the appearance of a dendrogram and for comparing dendrograms.
library(ggplot2)
library(ggsignif) ## for significance bars on ggplot
library(lme4) ## for mixed models
library(nlme) ## for mixed models
library(tidyverse)
library(emmeans) ## for post-hoc Tukey tests
library(genepop) ## for epi-Fst
library(adegenet) ## for epi-Fst
library(poppr) # to handle missing data in epi-SNP ("missingno")
library(hierfstat) # to calculate heterozygosity
library(RColorBrewer)
source("customRfunctions.R")
fullMetadata <- read.csv("../../data/fullMetadata137_Alice.csv")
fullMetadata$trtG1G2 <- factor(as.factor(fullMetadata$trtG1G2), levels = c("Control", "Exposed","NE_control", "NE_exposed", "E_control", "E_exposed"  ))
fullMetadata$Family <- as.factor(fullMetadata$Family)
fullMetadata_offs <- fullMetadata[fullMetadata$Generat %in% "O",]
fullMetadata_offs$trtG1G2 <- droplevels(fullMetadata_offs$trtG1G2)
fullMetadata_offs$offsTrt <- "controlO"
fullMetadata_offs$offsTrt[fullMetadata_offs$Tr %in% c("TT", "CT")] <- "infectedO"
fullMetadata_offs$patTrt <- "controlP"
fullMetadata_offs$patTrt[fullMetadata_offs$Tr %in% c("TC", "TT")] <- "infectedP"
table(fullMetadata_offs$offsTrt, fullMetadata_offs$trtG1G2)
table(fullMetadata_offs$patTrt, fullMetadata_offs$trtG1G2)
fullMetadata_offs$BCI <- residuals(lmer(Wnettofin ~ Slfin * Sex + (1|Family), data=fullMetadata_offs))
modTol <- lme(BCI ~ patTrt + patTrt:No.Worms,random=~1|Family,data=fullMetadata_offs)
anova(modTol)
myBCdf <- fullMetadata_offs %>% group_by(patTrt, No.Worms) %>%
summarise(BCI = mean(BCI)) %>% data.frame()
ggplot(fullMetadata_offs, aes(x=No.Worms, y = BCI, group = patTrt, col = patTrt))+
geom_point() + geom_line(data=myBCdf)+
geom_point(data=myBCdf, aes(fill = patTrt), col = "black", size = 3, pch = 21)+
scale_color_manual(values = c("gray", "red"))+
scale_fill_manual(values = c("gray", "red"))+
theme_bw()
mod1 <- lme(BCI ~ offsTrt * patTrt, random=~1|Family,data=fullMetadata_offs)
anova(mod1) # strong significant effect of both offspring trt & paternal + interactions
mod1.2 <- lme(BCI ~  trtG1G2, random=~1|Family,data=fullMetadata_offs)
emmeans(mod1.2, list(pairwise ~ trtG1G2), adjust = "tukey")
plot <- ggplot(fullMetadata_offs, aes(x=trtG1G2, y = BCI))+
geom_boxplot()+
geom_signif(comparisons = list(c("NE_control", "NE_exposed")),
map_signif_level=TRUE, annotations="***",
y_position = 150, tip_length = 0, vjust=0.4) +
geom_signif(comparisons = list(c("NE_exposed", "E_control")),
map_signif_level=TRUE, annotations="***",
y_position = 200, tip_length = 0, vjust=0.4) +
geom_signif(comparisons = list(c("NE_exposed", "E_exposed")),
map_signif_level=TRUE, annotations="***",
y_position = 250, tip_length = 0, vjust=0.4) +
theme_bw()
pdf(file = "../../data/fig/BCIoffspring.pdf")
plot
dev.off()
nrow(fullMetadata)
mean(fullMetadata$M.Seqs_rawReads)
qnorm(0.975)*sd(fullMetadata$M.Seqs_rawReads)/sqrt(nrow(fullMetadata))
mean(fullMetadata$MappingEfficiency.BSBoldvsGynogen)
qnorm(0.975)*sd(fullMetadata$MappingEfficiency.BSBoldvsGynogen)/sqrt(nrow(fullMetadata))
reRun= FALSE
if(reRun == TRUE){
df <- methylKit::getData(uniteCov2_woSexAndUnknowChr)
MfrData2 <- data.frame(matrix(ncol=137, nrow=nrow(df)))
namevector <- paste0("Mfr", 1:137)
vector <- 1:137
for(i in vector){
colnames(MfrData2)[i] <- namevector[i]
MfrData2[i] <- df[paste0("numCs", i)]/df[paste0("coverage", i)]
}
}
rerun= FALSE
if(rerun == TRUE){
print("long part started, needs ~10min")
getBiallVal <- function(x){
y=NA
if(x <= 0.3 & !is.na(x)){
y = "00"
} else if(x > 0.3 & x < 0.7 & !is.na(x)){
y = "01"
} else if(x >= 0.7 & !is.na(x)){
y = "11"
}
return(y)
}
getBiallValVec <- function(vec){sapply(vec, getBiallVal)}
system.time(
MbiallData2 <- sapply(MfrData2, function(x) {getBiallValVec(x)})
)
save(MfrData2, MbiallData2, file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
print("long truc saved")
}
colnames(MbiallData2) <- uniteCov2_woSexAndUnknowChr@sample.ids
load(file = "../../gitignore/output/MethylationFrequency_2fishmin.RData")
setwd("Documents/pro/Git/StickParaOffsBroject/code/R")
uniteCov6_G1_woSexAndUnknowChrOVERLAP
if (machine=="apocrita"){
mypath = "/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/"
} else if (machine=="mythinkpad"){
mypath = "~/Documents/pro/Git/StickParaOffsBroject/gitignore/bigdata/05MethylKit/output/"
}
base::load(paste0(mypath, "uniteCovALL_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCovALL_G1_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCov6_G1_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCov14_G2_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCovALL_G2_woSexAndUnknownChr_10feb22.RData"))
nrow(uniteCovALL_woSexAndUnknowChr) # 55 530
nrow(uniteCovALL_G1_woSexAndUnknowChr) # 148 860
nrow(uniteCovALL_G2_woSexAndUnknowChr) # 78 384
nrow(uniteCov6_G1_woSexAndUnknowChr) # 1 188 179
nrow(uniteCov14_G2_woSexAndUnknowChr) # 1 050 222
machine=="mythinkpad"
machine="mythinkpad"
if (machine=="apocrita"){
mypath = "/data/SBCS-EizaguirreLab/Alice/StickParaBroOff/Data/05MethylKit/output/"
} else if (machine=="mythinkpad"){
mypath = "~/Documents/pro/Git/StickParaOffsBroject/gitignore/bigdata/05MethylKit/output/"
}
base::load(paste0(mypath, "uniteCovALL_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCovALL_G1_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCov6_G1_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCov14_G2_woSexAndUnknownChr_10feb22.RData"))
base::load(paste0(mypath, "uniteCovALL_G2_woSexAndUnknownChr_10feb22.RData"))
nrow(uniteCovALL_woSexAndUnknowChr) # 55 530
nrow(uniteCovALL_G1_woSexAndUnknowChr) # 148 860
nrow(uniteCovALL_G2_woSexAndUnknowChr) # 78 384
nrow(uniteCov6_G1_woSexAndUnknowChr) # 1 188 179
nrow(uniteCov14_G2_woSexAndUnknowChr) # 1 050 222
overlappingCpG_G1G2df <- findOverlaps(as(uniteCov6_G1_woSexAndUnknowChr,"GRanges"),
as(uniteCov14_G2_woSexAndUnknowChr,"GRanges"))
library(plyr) # for join (keep row order)
library(dendextend) # The package dendextend contains many functions for changing the appearance of a dendrogram and for comparing dendrograms.
library(ggplot2)
library(ggsignif) ## for significance bars on ggplot
library(lme4) ## for mixed models
library(nlme) ## for mixed models
library(tidyverse)
library(emmeans) ## for post-hoc Tukey tests
library(methylKit)
library(vegan) ## for Adonis
library(genomation) ## for annotation
library(GenomicFeatures) ## for annotation
library(tidyverse)     # tidyverse will pull in ggplot2, readr, other useful libraries
library(magrittr)      # provides the %>% operator
library(WGCNA)
library(ggpubr) ## to merge ggplot2 plots
theme_set(theme_pubr())
library(goeveg) # find the best number of dimensions for NMDS
library(VennDiagram)
library(RColorBrewer) # for colors in Venn diagrams
library(lmtest) # for lrtests
library(ggeffects) # to plot random effects predictions
colOffs <- c("#ffe67f", "#ff6300","#a8caff","#a800d4")
overlappingCpG_G1G2df <- findOverlaps(as(uniteCov6_G1_woSexAndUnknowChr,"GRanges"),
as(uniteCov14_G2_woSexAndUnknowChr,"GRanges"))
overlappingCpG_G1G2df <- data.frame(overlappingCpG_G1G2df)
uniteCov6_G1_woSexAndUnknowChrOVERLAP <- uniteCov6_G1_woSexAndUnknowChr[overlappingCpG_G1G2df$queryHits,]
uniteCov14_G2_woSexAndUnknowChrOVERLAP <- uniteCov14_G2_woSexAndUnknowChr[overlappingCpG_G1G2df$subjectHits,]
uniteCov6_G1_woSexAndUnknowChrOVERLAP
uniteCov14_G2_woSexAndUnknowChrOVERLAP
save(uniteCov6_G1_woSexAndUnknowChrOVERLAP=uniteCov6_G1_woSexAndUnknowChrOVERLAP,
uniteCov14_G2_woSexAndUnknowChrOVERLAP=uniteCov14_G2_woSexAndUnknowChrOVERLAP,
file = "~/Documents/pro/Git/StickParaOffsBroject/gitignore/bigdata/05MethylKit/output/uniteCovhalf_FINAL.RData")
load("~/Documents/pro/Git/StickParaOffsBroject/gitignore/bigdata/05MethylKit/output/uniteCovhalf_FINAL.RData")
uniteCov14_G2
uniteCov14_G2_woSexAndUnknowChrOVERLAP
machine="apocrita"
machine
machine = "apocrita"
