# Create gene set collection
goFrame <- GOFrame(gene_universe, organism="Gasterosteus aculeatus")
goAllFrame <- GOAllFrame(goFrame)
gsc_universe <- GeneSetCollection(goAllFrame, setType = GOCollection())
GO_G1only = makedfGO(DMS_G1onlyEffect_4BPmin_ANNOT, gene_universe, effect = "G1only")
GO_G2only = makedfGO(DMS_G2onlyEffect_4BPmin_ANNOT, gene_universe, effect = "G2only")
GO_G1G2addit = makedfGO(DMS_G1G2additiveEffect_4BPmin_ANNOT, gene_universe, effect = "G1+G2")
GO_G1G2inter = makedfGO(DMS_G1G2interactionEffect_4BPmin_ANNOT, gene_universe, effect = "G1:G2")
dfGO = rbind(GO_G1only, GO_G2only, GO_G1G2addit, GO_G1G2inter)
GOplot <- dfGO %>% ggplot(aes(x=Effect, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("Treatments comparison") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
facet_grid(fct_inorder(GO.category)~., scales="free",space = "free")
GOplot
pdf(GOplot, file = "../../dataOut/GOplot4Venncat.pdf", width = 10, height = 25)
GOplot
dev.off()
# Make PCA and model lmer(BCI ~ PCA1*PCA2*No.Worms*PAT + (1|brotherPairID)+ (1|Sex), data=metadata)
RESPCA <- getPCACpG(DMSvec=unique(c(DMS_PaternalEffect_4BPmin, DMS_OffspringEffect_4BPmin)), effect="all effects")
# 2272 DMS linked with all effects
# [1] "The chosen model is:"
# BCI ~ PCA2 + No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) +
#     PCA2:PAT + No.Worms:PAT
# <environment: 0x55fd9c8571e8>
# [1] "1168 CpG sites most correlated (p < 0.05) with the first principal component"
# [1] "1135 CpG sites most correlated (p < 0.05) with the second principal component"
formula(RESPCA$PCA_percAtDMS_imputed$modSel)
# The SECOND PCA axis is significant in BCI
# [1] "The chosen model is:"
BCI ~ PCA2 + No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) +
PCA2:PAT + No.Worms:PAT
### How much of the BCI variance is explained by each variables?
mod_noworms = lmer(BCI ~ PCA2 + PAT + PCA2:PAT + (1 | brotherPairID) + (1 | Sex),
data = RESPCA$PCA_percAtDMS_imputed$metadata)
mod_noPAT = lmer(BCI ~ PCA2 + No.Worms + (1 | brotherPairID) + (1 | Sex),
data = RESPCA$PCA_percAtDMS_imputed$metadata)
mod_noPCA2 = lmer(BCI ~ + No.Worms + PAT + No.Worms:PAT +(1 | brotherPairID) + (1 | Sex),
data = RESPCA$PCA_percAtDMS_imputed$metadata)
# R2c conditional R2 value associated with fixed effects plus the random effects.
A = (MuMIn::r.squaredGLMM(RESPCA$PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noworms)[2])*100
B = (MuMIn::r.squaredGLMM(RESPCA$PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPAT)[2])*100
C = (MuMIn::r.squaredGLMM(RESPCA$PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPCA2)[2])*100
round(A, 2) #10.71% of the variance in associated with the parasite load (number of worms)
round(B, 2) #22% of the variance in associated with the paternal treatment
round(C, 2) #9.47% of the variance in associated with the second PCA axis
### Plot of the model
phenoMethPlot <- plot(ggpredict(RESPCA$PCA_percAtDMS_imputed$modSel, terms = c("No.Worms", "PCA2", "PAT")), add.data = TRUE, alpha = .08) +
theme_bw() +
scale_color_gradient(low = "white", high = "red")+
scale_fill_gradient(low = "white", high = "red") +
ylab("Body Condition Index") + xlab("Number of worms")+
ggtitle("Predicted values of Body Condition Index in offspring")
phenoMethPlot
# save
pdf(file = "../../dataOut/phenotypeMeth/phenoMethPlot_alleffects.pdf", width = 7, height = 5)
phenoMethPlot
dev.off()
annotPCAaxis <- myHomebrewDMSannotation(DMSvec = paste(RESPCA$CpGPCA2$chr, RESPCA$CpGPCA2$end),
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
write.csv(annotPCAaxis %>% dplyr::select(c("GeneSymbol", "feature.name", "Note", "chrom", "nDMSperGenekb", "ENTREZID", "description", "summary"))%>% unique,
"../../dataOut/annotPCA2_1135DMS.csv", row.names = F)
annotPCAaxis %>% head
annotPCAaxis <- myHomebrewDMSannotation(DMSvec = paste(RESPCA$CpGPCA2$chr, RESPCA$CpGPCA2$end),
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
annotPCAaxis %>% head
# merge with full table
allDMSAnnot$GeneSymbol
annotPCAaxis = annotPCAaxis %>%
dplyr::select(c("GeneSymbol", "feature.name", "Note", "chrom", "nDMSperGenekb", "ENTREZID", "description", "summary"))%>%
unique
# merge with full table
merge(annotPCAaxis, allDMSAnnot)
# merge with full table
merge(annotPCAaxis, allDMSAnnot) %>% head
# merge with full table to add effect
annotPCAaxis = merge(annotPCAaxis, allDMSAnnot)
write.csv(annotPCAaxis, "../../dataOut/annotPCA2_1135DMS_435genes.csv", row.names = F)
annotPCAaxis %>% head
annotPCAaxis %>% nrow
grep("G1 ", annotPCAaxis$effect)
annotPCAaxis$effect
table(annotPCAaxis$effect)
annotPCAaxis %>% head
!is.na(annotPCAaxis$G1)
annotPCAaxis[!is.na(annotPCAaxis$G1),]
# ```{r geneOnto_runGO_1135DMS_axis2_SPLITBYEFFECT}
GO_G1only_sub = makedfGO(annotPCAaxis[!is.na(annotPCAaxis$G1),], gene_universe, effect = "G1only")
GO_G1only_sub
makedfGO
# ```{r geneOnto_runGO_1135DMS_axis2_SPLITBYEFFECT}
annot = annotPCAaxis[!is.na(annotPCAaxis$G1),]
# function(annot, gene_universe, effect){
## Create subuniverse:
sub_universe <- gene_universe %>%
subset(gene_universe$Name %in% unlist(annot$Parent))
sub_universe
gene_universe
annotPCAaxisFull <- myHomebrewDMSannotation(DMSvec = paste(RESPCA$CpGPCA2$chr, RESPCA$CpGPCA2$end),
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
# merge with full table to add effect
annotPCAaxisFull = merge(annotPCAaxisFull, allDMSAnnot)
annotPCAaxisFull$effect
annotPCAaxis = annotPCAaxisFull %>%
dplyr::select(c("GeneSymbol", "feature.name", "Note", "chrom", "nDMSperGenekb", "ENTREZID", "description", "summary", "effect"))%>%
unique
write.csv(annotPCAaxis, "../../dataOut/annotPCA2_1135DMS_435genes.csv", row.names = F)
# ```{r geneOnto_runGO_1135DMS_axis2_SPLITBYEFFECT}
annot = annotPCAaxisFull[!is.na(annotPCAaxisFull$G1),]
annot
View(annotPCAaxis)
GO_G1only_sub = makedfGO(annotPCAaxisFull[!is.na(annotPCAaxisFull$G1),], gene_universe, effect = "G1only")
GO_G1only_sub
GO_G2only_sub = makedfGO(annotPCAaxisFull[!is.na(annotPCAaxisFull$G2),], gene_universe, effect = "G2only")
annotPCAaxisFull %>% head
allDMSAnnot
DMS_G1onlyEffect_4BPmin_ANNOT
## Make a summary table with genes and to which effect they belong:
allDMSAnnot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT,
DMS_G2onlyEffect_4BPmin_ANNOT,
DMS_G1G2additiveEffect_4BPmin_ANNOT,
DMS_G1G2interactionEffect_4BPmin_ANNOT)
# add summary in select
allDMSAnnot = allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "G1+G2", "G1:G2")[
!is.na(c_across(all_of(c("G1", "G2", "G1+G2", "G1:G2"))))], collapse = ' ')) %>% # add effect
data.frame() %>%
arrange(desc(nDMSperGeneKb))#arrange in descending order
# add summary in select
allDMSAnnot = allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "G1+G2", "G1:G2")[
!is.na(c_across(all_of(c("G1", "G2", "G1+G2", "G1:G2"))))], collapse = ' ')) %>% # add effect
data.frame() %>%
arrange(desc(nDMSperGeneKb))#arrange in descending order
DMS_G2onlyEffect_4BPmin_ANNOT
DMS_G1G2interactionEffect_4BPmin_ANNOT
## Make a summary table with genes and to which effect they belong:
allDMSAnnot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT,
DMS_G2onlyEffect_4BPmin_ANNOT,
DMS_G1G2additiveEffect_4BPmin_ANNOT,
DMS_G1G2interactionEffect_4BPmin_ANNOT)
allDMSAnnot
allDMSAnnot
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "G1+G2", "G1:G2")[
!is.na(c_across(all_of(c("G1", "G2", "G1+G2", "G1:G2"))))], collapse = ' ')) %>% # add effect
data.frame() %>%
arrange(desc(nDMSperGeneKb))#a
# add summary in select
allDMSAnnot = allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "G1+G2", "G1:G2")[
!is.na(c_across(all_of(c("G1", "G2", "G1+G2", "G1:G2"))))], collapse = ' ')) %>% # add effect
data.frame() %>%
arrange(desc(nDMSperGeneKb))#arrange in descending order
allDMSAnnot
# reorder columns with summary at the end
allDMSAnnot = allDMSAnnot %>%
dplyr::select(c(names(allDMSAnnot)[!names(allDMSAnnot) %in% "summary"], "summary"))
allDMSAnnot
allDMSAnnot$G1.G2
allDMSAnnot$effect
View(allDMSAnnot)
View(allDMSAnnot_top)
## Make a summary table with genes and to which effect they belong:
allDMSAnnot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT,
DMS_G2onlyEffect_4BPmin_ANNOT,
DMS_G1G2additiveEffect_4BPmin_ANNOT,
DMS_G1G2interactionEffect_4BPmin_ANNOT)
allDMSAnnot
allDMSAnnot$effect
# add summary in select
# allDMSAnnot =
allDMSAnnot$effect %>% tail
# add summary in select
# allDMSAnnot =
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary)# %>%
# add summary in select
# allDMSAnnot =
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>% tail
# add summary in select
# allDMSAnnot =
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>% tail
# add summary in select
# allDMSAnnot =
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%tail
!is.na(c_across(all_of(c("G1", "G2", "G1+G2", "G1:G2"))))], collapse = ' ')) %>% tail# add effect
# add summary in select
# allDMSAnnot =
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "G1+G2", "G1:G2")[
!is.na(c_across(all_of(c("G1", "G2", "G1+G2", "G1:G2"))))], collapse = ' ')) %>% # add effect
data.frame() %>%tail
# add summary in select
# allDMSAnnot =
allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'G1+G2', 'G1:G2')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% tail#dplyr::mutate(effect = paste0(c("G1", "G2", "G1+G2", "G1:G2")[
# Plot a Venn diagram
ggVennDiagram(list("Paternal effect" = DMS_PaternalEffect_4BPmin, "Offspring effect" = DMS_OffspringEffect_4BPmin, "InteractionEffects" = DMS_G1G2interactionEffect_4BPmin),
label_alpha = 0) + scale_color_manual(values = c(1,1,1))+
scale_fill_gradient(low="white",high = "yellow") + theme(legend.position = "none")
# Save:
pdf(file = "../../dataOut/DMS3groupsVenn.pdf", width = 7, height = 6)
ggVennDiagram(list("Paternal effect" = DMS_PaternalEffect_4BPmin, "Offspring effect" = DMS_OffspringEffect_4BPmin, "InteractionEffects" = DMS_G1G2interactionEffect_4BPmin),
label_alpha = 0) + scale_color_manual(values = c(1,1,1))+
scale_fill_gradient(low="white",high = "yellow") + theme(legend.position = "none")
dev.off()
DMS_G1onlyEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G1onlyEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G1onlyEffect_4BPmin_ANNOT=DMS_G1onlyEffect_4BPmin_ANNOT %>% mutate(effect = "G1")
# "check that these features are identical:"
# "gasAcul16628-RA" "gasAcul16627-RA" -> overlapping: Protein of unknown function & Tp63
# "gasAcul15294-RA" "gasAcul15295-RA" -> overlapping: Cdh23 & Vsir (immune!)
# "gasAcul19985-RA" "gasAcul19984-RA" -> overlapping: ST3GAL1 & ST3GAL1, all good for this one
DMS_G2onlyEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G2onlyEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G2onlyEffect_4BPmin_ANNOT=DMS_G2onlyEffect_4BPmin_ANNOT %>% mutate(effect = "G2")
DMS_G1G2additiveEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G1G2additiveEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G1G2additiveEffect_4BPmin_ANNOT=DMS_G1G2additiveEffect_4BPmin_ANNOT %>% mutate(effect = "addit")
DMS_G1G2interactionEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G1G2interactionEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G1G2interactionEffect_4BPmin_ANNOT=DMS_G1G2interactionEffect_4BPmin_ANNOT%>% mutate(effect = "inter")
# "check that these features are identical:"
# "gasAcul04256-RA" "gasAcul04255-RA" -> overlapping: Protein if unknown function & Proteolipid protein DM beta
# Plot a Venn diagram to see genes in common
pdf(file = "../../dataOut/DMSgroupsVenn_geneLevel.pdf", width = 7, height = 6)
ggVennDiagram(list("G1" = DMS_G1onlyEffect_4BPmin_ANNOT$feature.name, "G2" = DMS_G2onlyEffect_4BPmin_ANNOT$feature.name,
"addit" = DMS_G1G2additiveEffect_4BPmin_ANNOT$feature.name, "inter" = DMS_G1G2interactionEffect_4BPmin_ANNOT$feature.name),
label_alpha = 0) + scale_color_manual(values = c(1,1,1,1))+
scale_fill_gradient(low="white",high = "yellow") + theme(legend.position = "none") + ggtitle("Genes in each effect")
dev.off()
## NB some genes have DMS in different effects!
# A gene has DMSs in the 4 effects!
geneAll4 = intersect(intersect(intersect(DMS_G1onlyEffect_4BPmin_ANNOT$feature.name, DMS_G2onlyEffect_4BPmin_ANNOT$feature.name),
DMS_G1G2additiveEffect_4BPmin_ANNOT$feature.name), DMS_G1G2interactionEffect_4BPmin_ANNOT$feature.name)
DMS_G1onlyEffect_4BPmin_ANNOT[DMS_G1onlyEffect_4BPmin_ANNOT$feature.name %in% geneAll4,]
## FKBP3 & DPP6
## Make a summary table with genes and to which effect they belong:
allDMSAnnot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT,
DMS_G2onlyEffect_4BPmin_ANNOT,
DMS_G1G2additiveEffect_4BPmin_ANNOT,
DMS_G1G2interactionEffect_4BPmin_ANNOT)
# add summary in select
allDMSAnnot = allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'addit', 'inter')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "addit", "inter")[
!is.na(c_across(all_of(c("G1", "G2", "addit", "inter"))))], collapse = ' ')) %>% # add effect
data.frame() %>%
arrange(desc(nDMSperGeneKb))#arrange in descending order
# reorder columns with summary at the end
allDMSAnnot = allDMSAnnot %>%
dplyr::select(c(names(allDMSAnnot)[!names(allDMSAnnot) %in% "summary"], "summary"))
# Get the first gene for each effect, i.e. the one with the most DMS/kb
allDMSAnnot_top = allDMSAnnot %>% arrange(effect)
allDMSAnnot_top = allDMSAnnot_top[!duplicated(allDMSAnnot_top$effect),]%>% arrange(desc(nDMSperGeneKb))
# Write out
write.csv(allDMSAnnot, file = "../../dataOut/allDMSAnnot.csv", row.names = F)
write.csv(allDMSAnnot_top, file = "../../dataOut/allDMSAnnot_top.csv", row.names = F)
allDMSAnnot
plotGeneTarget <- function(myTargetGene, myannotBed12=annotBed12){
# plotdf
dfplot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT[DMS_G1onlyEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,],
DMS_G2onlyEffect_4BPmin_ANNOT[DMS_G2onlyEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,],
DMS_G1G2additiveEffect_4BPmin_ANNOT[DMS_G1G2additiveEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,],
DMS_G1G2interactionEffect_4BPmin_ANNOT[DMS_G1G2interactionEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,])
# Find TSS position of the gene
dfplot$TSSpos = myannotBed12$TSSes[myannotBed12$TSSes$name %in% dfplot$feature.name]@ranges@start
# Set TSS as origin
dfplot$start_distToTSS = dfplot$start - dfplot$TSSpos
dfplot$end_distToTSS = dfplot$end - dfplot$TSSpos
dfplot$start.gene_distToTSS = dfplot$start.gene - dfplot$TSSpos
dfplot$end.gene_distToTSS = dfplot$end.gene - dfplot$TSSpos
# Reorder effects factor for legend
dfplot$effect <- factor(dfplot$effect, levels = c("G1", "G2", "addit", "inter"))
# Prepare rectangles
mini=min(dfplot$start.gene_distToTSS, dfplot$start_distToTSS)
maxi=max(dfplot$end.gene_distToTSS, dfplot$end_distToTSS)+100
start.gene_distToTSS = unique(dfplot$start.gene_distToTSS)
end.gene_distToTSS = unique(dfplot$end.gene_distToTSS)
# Plot
plotGeneTarget= ggplot(dfplot) +
geom_rect(xmin=mini, xmax=maxi, ymin=0, ymax =.5, fill="#bfb6b6")+
geom_rect(aes(xmin=start.gene_distToTSS, xmax=end.gene_distToTSS, ymin=0, ymax =.5), fill = "black")+
geom_point(aes(x = start_distToTSS, y = .8, col = effect, pch=featureType), size = 5) +
geom_segment(aes(x = start_distToTSS, xend = start_distToTSS, y=0, yend=.8, col = effect)) +
geom_segment(aes(x = 0, xend = 0, y=0, yend=.5), col = "red", size = 3) + # TSS
theme_blank() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())+
labs(title = paste(unique(dfplot$GeneSymbol), ":", dfplot$description),
subtitle = str_wrap(dfplot$summary, width = 150))+
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7"))#cb friendly palette
####### And by brother pairs
dfplot_BP = merge(df_effects_full[df_effects_full$DMS %in% dfplot$DMS,c("BP", "DMS", "effectBPlevel")], dfplot)
# Rm potision with no effect in this BP
dfplot_BP=dfplot_BP[!is.na(dfplot_BP$effectBPlevel),]
# Same order of Father's family as in figure 1 (clusters)
dfplot_BP$BP = factor(dfplot_BP$BP, levels = c("BP05", "BP31", "BP04", "BP30", "BP16", "BP34", "BP49","BP46"))
# Plot
plotGeneTargetBP = ggplot(dfplot_BP) +
geom_rect(xmin=mini, xmax=maxi, ymin=0, ymax =.5, fill="#bfb6b6")+
geom_rect(aes(xmin=start.gene_distToTSS, xmax=end.gene_distToTSS, ymin=0, ymax =.5), fill = "black")+
geom_point(aes(x = start_distToTSS, y = .8, col = effectBPlevel, pch=featureType), size = 5) +
geom_segment(aes(x = start_distToTSS, xend = start_distToTSS, y=0, yend=.8, col = effectBPlevel)) +
geom_segment(aes(x = 0, xend = 0, y=0, yend=.5), col = "red", size = 3) + # TSS
theme_blank() +
facet_grid(BP~.)+ theme(panel.spacing = unit(1.5, "lines"))+
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())+
scale_y_continuous(expand=expansion(mult=c(0,0.15))) # increase space up
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7"))#cb friendly palette
return(list(myTargetGene_DMSdf=dfplot, plotGeneTarget=plotGeneTarget, plotGeneTargetBP=plotGeneTargetBP))
}
## All 4 effects:
P = plotGeneTarget(myTargetGene = "FKBP3")
P$myTargetGene_DMSdf
# Zoom in 1
P1 = P$plotGeneTarget + coord_cartesian(xlim=c(3588,3636)) + theme(legend.position = "none") +
ggtitle("") + labs(subtitle = "")+ theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
# Zoom in 2
P2 = P$plotGeneTarget + coord_cartesian(xlim=c(4890,5060)) + theme(legend.position = "none") +
ggtitle("") + labs(subtitle = "")+ theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
## For all BP, zoomed
Pbp1 = P$plotGeneTargetBP + theme(legend.position = "none") + coord_cartesian(xlim=c(3588,3636))+
theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
Pbp2 = P$plotGeneTargetBP + theme(legend.position = "none") + coord_cartesian(xlim=c(4890,5060))+
theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
fullplotFKBP3 = cowplot::plot_grid(P$plotGeneTarget,
cowplot::plot_grid(P1, P2, nrow = 1, ncol =2),
cowplot::plot_grid(Pbp1, Pbp2, nrow = 1, ncol =2),
nrow = 3, rel_heights = c(1,1,3), labels = c("A", "B", "C"))
fullplotFKBP3
# Plot gene and zooms
pdf("../../dataOut/FKBP3_DMS.pdf", width = 15, height = 15)
fullplotFKBP3
dev.off()
# create gene universe
gene_universe <- data.frame(
subsetByOverlaps(GRanges(annotGff3), GRanges(uniteCov14_G2_woSexAndUnknowChrOVERLAP))) %>% # subselect covered CpGs
filter(lengths(Ontology_term)!=0) %>% # rm non existing GO terms
filter(type %in% "gene")  %>% # keep all the 7416 genes with GO terms
dplyr::select(c("Name", "Ontology_term")) %>%
mutate(go_linkage_type = "IEA") %>% #NB: IEA but not necessarily true, it's from Interproscan after Maker. Sticklebacks (biomart) have 82701 IEA and 63 ISS.
relocate("Ontology_term","go_linkage_type","Name") %>%
unnest(Ontology_term) %>% # one GO per line (was a list before in this column)
data.frame()
# Create gene set collection
goFrame <- GOFrame(gene_universe, organism="Gasterosteus aculeatus")
goAllFrame <- GOAllFrame(goFrame)
gsc_universe <- GeneSetCollection(goAllFrame, setType = GOCollection())
GO_G1only = makedfGO(DMS_G1onlyEffect_4BPmin_ANNOT, gene_universe, effect = "G1only")
GO_G2only = makedfGO(DMS_G2onlyEffect_4BPmin_ANNOT, gene_universe, effect = "G2only")
GO_G1G2addit = makedfGO(DMS_G1G2additiveEffect_4BPmin_ANNOT, gene_universe, effect = "addit")
GO_G1G2inter = makedfGO(DMS_G1G2interactionEffect_4BPmin_ANNOT, gene_universe, effect = "inter")
dfGO = rbind(GO_G1only, GO_G2only, GO_G1G2addit, GO_G1G2inter)
GOplot <- dfGO %>% ggplot(aes(x=Effect, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("Treatments comparison") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
facet_grid(fct_inorder(GO.category)~., scales="free",space = "free")
GOplot
pdf(GOplot, file = "../../dataOut/GOplot4Venncat.pdf", width = 10, height = 25)
GOplot
dev.off()
# Make PCA and model lmer(BCI ~ PCA1*PCA2*No.Worms*PAT + (1|brotherPairID)+ (1|Sex), data=metadata)
RESPCA <- getPCACpG(DMSvec=unique(c(DMS_PaternalEffect_4BPmin, DMS_OffspringEffect_4BPmin)), effect="all effects")
# 2272 DMS linked with all effects
# [1] "The chosen model is:"
# BCI ~ PCA2 + No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) +
#     PCA2:PAT + No.Worms:PAT
# <environment: 0x55fd9c8571e8>
# [1] "1168 CpG sites most correlated (p < 0.05) with the first principal component"
# [1] "1135 CpG sites most correlated (p < 0.05) with the second principal component"
formula(RESPCA$PCA_percAtDMS_imputed$modSel)
# The SECOND PCA axis is significant in BCI
# [1] "The chosen model is:"
BCI ~ PCA2 + No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) +
PCA2:PAT + No.Worms:PAT
### How much of the BCI variance is explained by each variables?
mod_noworms = lmer(BCI ~ PCA2 + PAT + PCA2:PAT + (1 | brotherPairID) + (1 | Sex),
data = RESPCA$PCA_percAtDMS_imputed$metadata)
mod_noPAT = lmer(BCI ~ PCA2 + No.Worms + (1 | brotherPairID) + (1 | Sex),
data = RESPCA$PCA_percAtDMS_imputed$metadata)
mod_noPCA2 = lmer(BCI ~ + No.Worms + PAT + No.Worms:PAT +(1 | brotherPairID) + (1 | Sex),
data = RESPCA$PCA_percAtDMS_imputed$metadata)
# R2c conditional R2 value associated with fixed effects plus the random effects.
A = (MuMIn::r.squaredGLMM(RESPCA$PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noworms)[2])*100
B = (MuMIn::r.squaredGLMM(RESPCA$PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPAT)[2])*100
C = (MuMIn::r.squaredGLMM(RESPCA$PCA_percAtDMS_imputed$modSel)[2] -
MuMIn::r.squaredGLMM(mod_noPCA2)[2])*100
round(A, 2) #10.71% of the variance in associated with the parasite load (number of worms)
round(B, 2) #22% of the variance in associated with the paternal treatment
round(C, 2) #9.47% of the variance in associated with the second PCA axis
### Plot of the model
phenoMethPlot <- plot(ggpredict(RESPCA$PCA_percAtDMS_imputed$modSel, terms = c("No.Worms", "PCA2", "PAT")), add.data = TRUE, alpha = .08) +
theme_bw() +
scale_color_gradient(low = "white", high = "red")+
scale_fill_gradient(low = "white", high = "red") +
ylab("Body Condition Index") + xlab("Number of worms")+
ggtitle("Predicted values of Body Condition Index in offspring")
phenoMethPlot
# save
pdf(file = "../../dataOut/phenotypeMeth/phenoMethPlot_alleffects.pdf", width = 7, height = 5)
phenoMethPlot
dev.off()
annotPCAaxisFull <- myHomebrewDMSannotation(DMSvec = paste(RESPCA$CpGPCA2$chr, RESPCA$CpGPCA2$end),
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
# merge with full table to add effect
annotPCAaxisFull = merge(annotPCAaxisFull, allDMSAnnot)
annotPCAaxis = annotPCAaxisFull %>%
dplyr::select(c("GeneSymbol", "feature.name", "Note", "chrom", "nDMSperGenekb", "ENTREZID", "description", "summary", "effect"))%>%
unique
write.csv(annotPCAaxis, "../../dataOut/annotPCA2_1135DMS_435genes.csv", row.names = F)
P=plotManhattanGenesDMS(annotFile = annotPCAaxis, GYgynogff = GYgynogff)
P=plotManhattanGenesDMS(annotFile = annotPCAaxisFull, GYgynogff = GYgynogff)
P
pdf("../../dataOut/ManhattanPlots1135DMS435genes.pdf", width = 10, height = 3)
P
dev.off()
GO_PCA2_1135DMS = makedfGO(annotPCAaxisFull, gene_universe, effect = "PCAaxis2")
GOplot <- GO_PCA2_1135DMS %>% ggplot(aes(x=Effect, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
facet_grid(fct_inorder(GO.category)~., scales="free",space = "free")
GOplot
pdf(GOplot, file = "../../dataOut/GOplotPCA2.pdf", width = 6, height = 7)
GOplot
dev.off()
# ```{r geneOnto_runGO_1135DMS_axis2_SPLITBYEFFECT}
GO_G1_sub = makedfGO(annotPCAaxisFull[!is.na(annotPCAaxisFull$G1),], gene_universe, effect = "G1")
GO_G2_sub = makedfGO(annotPCAaxisFull[!is.na(annotPCAaxisFull$G2),], gene_universe, effect = "G2")
GO_addit_sub = makedfGO(annotPCAaxisFull[!is.na(annotPCAaxisFull$addit),], gene_universe, effect = "addit")
GO_inter_sub = makedfGO(annotPCAaxisFull[!is.na(annotPCAaxisFull$inter),], gene_universe, effect = "inter")
View(GO_addit_sub)
dfGO_sub = rbind(GO_G1_sub, GO_G2_sub, GO_addit_sub, GO_inter_sub)
### GO plot
GOplot_sub <- dfGO_sub %>% ggplot(aes(x=Effect, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("Treatments comparison") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
facet_grid(fct_inorder(GO.category)~., scales="free",space = "free")
GOplot_sub
pdf(GOplot_sub, file = "../../dataOut/GOplot4Venncat_split.pdf", width = 10, height = 25)
GOplot_sub
dev.off()
pdf(GOplot_sub, file = "../../dataOut/GOplot4Venncat_split.pdf", width = 10, height = 15)
GOplot_sub
dev.off()
pdf(GOplot_sub, file = "../../dataOut/GOplot4Venncat_split.pdf", width = 10, height = 10)
GOplot_sub
dev.off()
pdf(GOplot_sub, file = "../../dataOut/GOplot4Venncat_split.pdf", width = 10, height = 12)
GOplot_sub
dev.off()
pdf(GOplot_sub, file = "../../dataOut/GOplot4Venncat_split.pdf", width = 8, height = 12)
GOplot_sub
dev.off()
