B$patTrt[B$patTrt %in% "infectedP"]="Exposed"
AB=merge(A, B)
AB %>% head
lm(G1methylation~G2methylation : effect + (1|brotherPairID/SampleID))
lm(G1methylation~G2methylation : effect + (1|brotherPairID/SampleID), data=AB)
rep("G1", length(DMS_G1onlyEffect_4BPmin)
)
DMSalleffectsDF = data.frame(DMS=c(DMS_G1onlyEffect_4BPmin, DMS_G2onlyEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin, DMS_G1G2interactionEffect_4BPmin),
effect=c(rep("G1", length(DMS_G1onlyEffect_4BPmin)),
rep("G2", length(DMS_G2onlyEffect_4BPmin)),
rep("addit", length(DMS_G1G2additiveEffect_4BPmin)),
rep("inter", length(DMS_G1G2interactionEffect_4BPmin))))
rm(DMSalleffects)
DMSalleffectsDF = data.frame(DMS=c(DMS_G1onlyEffect_4BPmin, DMS_G2onlyEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin, DMS_G1G2interactionEffect_4BPmin),
effect=c(rep("G1", length(DMS_G1onlyEffect_4BPmin)),
rep("G2", length(DMS_G2onlyEffect_4BPmin)),
rep("addit", length(DMS_G1G2additiveEffect_4BPmin)),
rep("inter", length(DMS_G1G2interactionEffect_4BPmin))))
A=methylKit::select(uniteCov6_G1_woSexAndUnknowChrOVERLAP,
which(paste(uniteCov6_G1_woSexAndUnknowChrOVERLAP$chr, uniteCov6_G1_woSexAndUnknowChrOVERLAP$start) %in%
DMSalleffectsDF$DMS))
B=methylKit::select(uniteCov14_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCov14_G2_woSexAndUnknowChrOVERLAP$chr, uniteCov14_G2_woSexAndUnknowChrOVERLAP$start) %in%
DMSalleffectsDF$DMS))
DMS=paste(A$chr, A$start)
A=percMethylation(A) %>% data.frame
A$DMS = DMS
B=percMethylation(B) %>% data.frame
B$DMS = DMS
A=melt(A)
names(A)[names(A)%in% "variable"]="SampleID"
names(A)[names(A)%in% "value"]="G1methylation"
A=merge(A, fullMetadata_PAR[c("SampleID", "brotherPairID", "trtG1G2")])
names(A)[names(A)%in% "trtG1G2"]="patTrt"
A=A[!names(A)%in% "SampleID"] # rm sample ID for fathers, as only one per BP
B=melt(B)
names(B)[names(B)%in% "variable"]="SampleID"
names(B)[names(B)%in% "value"]="G2methylation"
B=merge(B, fullMetadata_OFFS[c("SampleID", "brotherPairID", "trtG1G2", "patTrt")])
B$patTrt[B$patTrt %in% "controlP"]="Control"
B$patTrt[B$patTrt %in% "infectedP"]="Exposed"
AB=merge(A, B)
AB
merge(AB, DMSalleffectsDF)
AB=merge(AB, DMSalleffectsDF)
lm(G1methylation~G2methylation : effect + (1|brotherPairID/SampleID), data=AB)
AB$brotherPairID
AB$SampleID
AB$SampleID=as.character(AB$SampleID)
lm(G1methylation~G2methylation : effect + (1|brotherPairID/SampleID), data=AB)
lme4::lmer(G1methylation~G2methylation : effect + (1|brotherPairID/SampleID), data=AB)
mod1=lme4::lmer(G1methylation~G2methylation * effect + (1|brotherPairID/SampleID), data=AB)
mod2=lme4::lmer(G1methylation~G2methylation + effect + (1|brotherPairID/SampleID), data=AB)
mod3=lme4::lmer(G1methylation~G2methylation + (1|brotherPairID/SampleID), data=AB)
lmtest::lrtest(mod1, mod2)
lmtest::lrtest(mod1, mod3)
lmtest::lrtest(mod1, mod3)
plot_model(fit, type = "pred", terms = c("barthtot", "c161sex"))
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
xlim(0,100)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(1)+
xlim(0,100)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
xlim(0,100)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)+
xlim(0,100)+ylim(0,100)
plot_model(mod1, type = "pred", terms = c("G2methylation", "effect"))+
geom_abline(y=1)
library(lmtest)
version(lmtest)
lmtest
?lmtest
citation("lmtest")
gc()
source("R07_DMSeffects.R")
setwd("Documents/pro/Git/StickParaOffsBroject/code/R/")
source("R07_DMSeffects.R")
source("homebrewDMSannotation.R")# needed for annotation, slight modification of genomation
GYgynogff = read.table("../../data/Gy_allnoM_rd3.maker_apocrita.noseq_corrected_chromoAndLength.txt")
names(GYgynogff) = c("chrom","length")
annotGff3 <- rtracklayer::readGFF("../../gitignore/bigdata/06GynoAnnot/Gy_allnoM_rd3.maker_apocrita.noseq_corrected.gff.streamlined_for_AGAT.CURATED.gff")
DMS_G1onlyEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G1onlyEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G1onlyEffect_4BPmin_ANNOT=DMS_G1onlyEffect_4BPmin_ANNOT %>% mutate(effect = "G1")
DMS_G2onlyEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G2onlyEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G2onlyEffect_4BPmin_ANNOT=DMS_G2onlyEffect_4BPmin_ANNOT %>% mutate(effect = "G2")
DMS_G1G2additiveEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G1G2additiveEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G1G2additiveEffect_4BPmin_ANNOT=DMS_G1G2additiveEffect_4BPmin_ANNOT %>% mutate(effect = "addit")
DMS_G1G2interactionEffect_4BPmin_ANNOT = myHomebrewDMSannotation(DMSvec = DMS_G1G2interactionEffect_4BPmin,
myannotBed12 = annotBed12, myannotGff3 = annotGff3)
DMS_G1G2interactionEffect_4BPmin_ANNOT=DMS_G1G2interactionEffect_4BPmin_ANNOT%>% mutate(effect = "inter")
pdf(file = "../../dataOut/DMSgroupsVenn_geneLevel.pdf", width = 7, height = 6)
ggVennDiagram(list("G1" = DMS_G1onlyEffect_4BPmin_ANNOT$feature.name, "G2" = DMS_G2onlyEffect_4BPmin_ANNOT$feature.name,
"addit" = DMS_G1G2additiveEffect_4BPmin_ANNOT$feature.name, "inter" = DMS_G1G2interactionEffect_4BPmin_ANNOT$feature.name),
label_alpha = 0) + scale_color_manual(values = c(1,1,1,1))+
scale_fill_gradient(low="white",high = "yellow") + theme(legend.position = "none") + ggtitle("Genes in each effect")
dev.off()
geneAll4 = intersect(intersect(intersect(DMS_G1onlyEffect_4BPmin_ANNOT$feature.name, DMS_G2onlyEffect_4BPmin_ANNOT$feature.name),
DMS_G1G2additiveEffect_4BPmin_ANNOT$feature.name), DMS_G1G2interactionEffect_4BPmin_ANNOT$feature.name)
DMS_G1onlyEffect_4BPmin_ANNOT[DMS_G1onlyEffect_4BPmin_ANNOT$feature.name %in% geneAll4,]
allDMSAnnot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT,
DMS_G2onlyEffect_4BPmin_ANNOT,
DMS_G1G2additiveEffect_4BPmin_ANNOT,
DMS_G1G2interactionEffect_4BPmin_ANNOT)
allDMSAnnot = allDMSAnnot %>%
dplyr::select(GeneSymbol, feature.name, chrom, start.gene, end.gene, geneLengthkb, nDMSperGene, effect, summary) %>%
unique %>% tidyr::spread(key = effect, value = nDMSperGene) %>%
dplyr::mutate(nDMS = rowSums(across(c(G1, G2, 'addit', 'inter')), na.rm = T),
nDMSperGeneKb=round(nDMS/geneLengthkb, 2)) %>%
rowwise() %>% dplyr::mutate(effect = paste0(c("G1", "G2", "addit", "inter")[
!is.na(c_across(all_of(c("G1", "G2", "addit", "inter"))))], collapse = ' ')) %>% # add effect
data.frame() %>%
arrange(desc(nDMSperGeneKb))#arrange in descending order
allDMSAnnot = allDMSAnnot %>%
dplyr::select(c(names(allDMSAnnot)[!names(allDMSAnnot) %in% "summary"], "summary"))
allDMSAnnot_top = allDMSAnnot %>% arrange(effect)
allDMSAnnot_top = allDMSAnnot_top[!duplicated(allDMSAnnot_top$effect),]%>% arrange(desc(nDMSperGeneKb))
write.csv(allDMSAnnot, file = "../../dataOut/allDMSAnnot_supTabS1.csv", row.names = F)
write.csv(allDMSAnnot_top, file = "../../dataOut/allDMSAnnot_top.csv", row.names = F)
plotGeneTarget <- function(myTargetGene, myannotBed12=annotBed12){
dfplot = rbind(DMS_G1onlyEffect_4BPmin_ANNOT[DMS_G1onlyEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,],
DMS_G2onlyEffect_4BPmin_ANNOT[DMS_G2onlyEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,],
DMS_G1G2additiveEffect_4BPmin_ANNOT[DMS_G1G2additiveEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,],
DMS_G1G2interactionEffect_4BPmin_ANNOT[DMS_G1G2interactionEffect_4BPmin_ANNOT$GeneSymbol %in% myTargetGene,])
dfplot$TSSpos = myannotBed12$TSSes[myannotBed12$TSSes$name %in% dfplot$feature.name]@ranges@start
dfplot$start_distToTSS = dfplot$start - dfplot$TSSpos
dfplot$end_distToTSS = dfplot$end - dfplot$TSSpos
dfplot$start.gene_distToTSS = dfplot$start.gene - dfplot$TSSpos
dfplot$end.gene_distToTSS = dfplot$end.gene - dfplot$TSSpos
dfplot$effect <- factor(dfplot$effect, levels = c("G1", "G2", "addit", "inter"))
mini=min(dfplot$start.gene_distToTSS, dfplot$start_distToTSS)
maxi=max(dfplot$end.gene_distToTSS, dfplot$end_distToTSS)+100
start.gene_distToTSS = unique(dfplot$start.gene_distToTSS)
end.gene_distToTSS = unique(dfplot$end.gene_distToTSS)
plotGeneTarget= ggplot(dfplot) +
geom_rect(xmin=mini, xmax=maxi, ymin=0, ymax =.5, fill="#bfb6b6")+
geom_rect(aes(xmin=start.gene_distToTSS, xmax=end.gene_distToTSS, ymin=0, ymax =.5), fill = "black")+
geom_point(aes(x = start_distToTSS, y = .8, col = effect, pch=featureType), size = 5) +
geom_segment(aes(x = start_distToTSS, xend = start_distToTSS, y=0, yend=.8, col = effect)) +
geom_segment(aes(x = 0, xend = 0, y=0, yend=.5), col = "red", size = 3) + # TSS
theme_blank() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())+
labs(title = paste(unique(dfplot$GeneSymbol), ":", dfplot$description),
subtitle = str_wrap(dfplot$summary, width = 150))+
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7"))#cb friendly palette
dfplot_BP = merge(df_effects_full[df_effects_full$DMS %in% dfplot$DMS,c("BP", "DMS", "effectBPlevel")], dfplot)
dfplot_BP=dfplot_BP[!is.na(dfplot_BP$effectBPlevel),]
dfplot_BP$BP = factor(dfplot_BP$BP, levels = c("BP05", "BP31", "BP04", "BP30", "BP16", "BP34", "BP49","BP46"))
plotGeneTargetBP = ggplot(dfplot_BP) +
geom_rect(xmin=mini, xmax=maxi, ymin=0, ymax =.5, fill="#bfb6b6")+
geom_rect(aes(xmin=start.gene_distToTSS, xmax=end.gene_distToTSS, ymin=0, ymax =.5), fill = "black")+
geom_point(aes(x = start_distToTSS, y = .8, col = effectBPlevel, pch=featureType), size = 5) +
geom_segment(aes(x = start_distToTSS, xend = start_distToTSS, y=0, yend=.8, col = effectBPlevel)) +
geom_segment(aes(x = 0, xend = 0, y=0, yend=.5), col = "red", size = 3) + # TSS
theme_blank() +
facet_grid(BP~.)+ theme(panel.spacing = unit(1.5, "lines"))+
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())+
scale_y_continuous(expand=expansion(mult=c(0,0.15))) # increase space up
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#CC79A7"))#cb friendly palette
return(list(myTargetGene_DMSdf=dfplot, plotGeneTarget=plotGeneTarget, plotGeneTargetBP=plotGeneTargetBP))
}
P = plotGeneTarget(myTargetGene = "FKBP3")
P$myTargetGene_DMSdf
P1 = P$plotGeneTarget + coord_cartesian(xlim=c(3588,3636)) + theme(legend.position = "none") +
ggtitle("") + labs(subtitle = "")+ theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
P2 = P$plotGeneTarget + coord_cartesian(xlim=c(4890,5060)) + theme(legend.position = "none") +
ggtitle("") + labs(subtitle = "")+ theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
Pbp1 = P$plotGeneTargetBP + theme(legend.position = "none") + coord_cartesian(xlim=c(3588,3636))+
theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
Pbp2 = P$plotGeneTargetBP + theme(legend.position = "none") + coord_cartesian(xlim=c(4890,5060))+
theme(plot.background = element_rect(colour = "black", fill=NA, size=1))
fullplotFKBP3 = cowplot::plot_grid(P$plotGeneTarget,
cowplot::plot_grid(P1, P2, nrow = 1, ncol =2),
cowplot::plot_grid(Pbp1, Pbp2, nrow = 1, ncol =2),
nrow = 3, rel_heights = c(1,1,3), labels = c("A", "B", "C"))
fullplotFKBP3
pdf("../../dataOut/FKBP3_DMS.pdf", width = 15, height = 15)
fullplotFKBP3
dev.off()
allDMSAnnot_uniqueEffect <- allDMSAnnot[rowSums(is.na(allDMSAnnot[c("G1", "G2", "addit", "inter")])) %in% 3,]
annotFile=allDMSAnnot_uniqueEffect %>% dplyr::select(c("start.gene", "end.gene", "nDMSperGeneKb", "effect", "chrom", "GeneSymbol", "effect"))
top5perEffect <- annotFile[!is.na(annotFile$GeneSymbol),] %>%
arrange(desc(nDMSperGeneKb)) %>%
group_by(effect) %>%
slice(1:5) %>%
dplyr::pull(GeneSymbol)
annotFile$isTop = ifelse(test = annotFile$GeneSymbol %in% top5perEffect, "top", NA)
genome4Manhattan = GYgynogff %>%
filter(chrom!="Gy_chrXIX" & chrom!= "Gy_chrUn")%>%
mutate(chrom_nr=chrom %>% deroman(),
chrom_order=factor(chrom_nr) %>% as.numeric()) %>% arrange(chrom_order) %>%
mutate(gstart=lag(length,default=0) %>% cumsum(),
gend=gstart+length,
typeBG=LETTERS[2-(chrom_order%%2)],
gmid=(gstart+gend)/2)
data4Manhattan = dplyr::left_join(annotFile, genome4Manhattan) %>%
dplyr::mutate(posInPlot=((end.gene+start.gene)/2)+gstart)
data4Manhattan$effect <- factor(data4Manhattan$effect,levels = c("G1", "G2", "addit", "inter"))
pdf(file = "../../dataOut/ManhattanFig3.pdf", width = 8, height = 5)
ggplot()+
geom_rect(data=genome4Manhattan[genome4Manhattan$typeBG %in% "B",],
aes(xmin=gstart,xmax=gend,ymin=-Inf,ymax=Inf), fill=rgb(.9,.9,.9))+  xlab(NULL)+
scale_x_continuous(name = "Chromosomes", breaks=genome4Manhattan$gmid,labels=genome4Manhattan$chrom %>% str_remove(.,"Gy_chr"),
position = "bottom",expand = c(0,0))+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+ # add frame
ylab("Number of differentially methylated CpG per gene kb")+
scale_y_continuous(breaks = 0:5)+
geom_point(data = data4Manhattan, aes(x=posInPlot, y = nDMSperGeneKb)) +
geom_label_repel(data = data4Manhattan[data4Manhattan$isTop %in% "top",],
aes(x=posInPlot, y = nDMSperGeneKb, label = GeneSymbol, fill = factor(effect)),
color="white",max.overlaps = Inf, box.padding = 0.6, segment.color = "grey")+
scale_fill_manual(values=c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
dev.off()
gene_universe <- data.frame(
subsetByOverlaps(GRanges(annotGff3), GRanges(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP))) %>% # subselect covered CpGs
filter(lengths(Ontology_term)!=0) %>% # rm non existing GO terms
filter(type %in% "gene")  %>% # keep all the 7404 genes with GO terms
dplyr::select(c("Name", "Ontology_term")) %>%
mutate(go_linkage_type = "IEA") %>% #NB: IEA but not necessarily true, it's from Interproscan after Maker. Sticklebacks (biomart) have 82701 IEA and 63 ISS.
relocate("Ontology_term","go_linkage_type","Name") %>%
unnest(Ontology_term) %>% # one GO per line (was a list before in this column)
data.frame()
gene_universe$Name %>% unique %>% length #7404 genes
goFrame <- GOFrame(gene_universe, organism="Gasterosteus aculeatus")
goAllFrame <- GOAllFrame(goFrame)
gsc_universe <- GeneSetCollection(goAllFrame, setType = GOCollection())
GO_G1only = makedfGO(DMS_G1onlyEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE), gene_universe,
effect = paste0(length(unique(DMS_G1onlyEffect_4BPmin_ANNOT$feature.name)),
" genes with DMS associated with G1 effect only"))
GO_G2only = makedfGO(DMS_G2onlyEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE) , gene_universe,
effect = paste0(length(unique(DMS_G2onlyEffect_4BPmin_ANNOT$feature.name)),
" genes with DMS associated with G2 effect only"))
GO_G1G2addit = makedfGO(DMS_G1G2additiveEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE), gene_universe,
effect = paste0(length(unique(DMS_G1G2additiveEffect_4BPmin_ANNOT$feature.name)),
" genes with DMS associated with additive effect"))
GO_G1G2inter = makedfGO(DMS_G1G2interactionEffect_4BPmin_ANNOT %>%
distinct(feature.name,.keep_all = TRUE), gene_universe,
effect = paste0(length(unique(DMS_G1G2interactionEffect_4BPmin_ANNOT$feature.name)),
" genes with DMS associated with interaction effect"))
dfGO = rbind(GO_G1only, GO_G2only, GO_G1G2addit, GO_G1G2inter)
GOplot <- dfGO %>% ggplot(aes(x=Effect, y = factor(GO.name))) +
geom_point(aes(color = p.value.adjusted, size = genePercent)) +
scale_color_gradient(name="adjusted\np-value", low = "red", high = "blue") +
scale_size_continuous(name = "% of genes")+
theme_bw() + ylab("") + xlab("Treatments comparison") +
theme(legend.box.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.background = element_rect(fill = "#ebebeb", color = "#ebebeb"),
legend.key = element_rect(fill = "#ebebeb", color = "#ebebeb"), legend.position="left") + # grey box for legend
facet_grid(fct_inorder(GO.category)~., scales="free",space = "free")+
scale_y_discrete(limits=rev, # revers axis to have alphabetical order
labels = function(x) str_wrap(x, width = 40)) # split too long GO names in half
pdf(GOplot, file = "../../dataOut/Supplementary_GOplot_figS3VennGenes.pdf", width = 6, height = 18)
GOplot
dev.off()
length(DMS_G1onlyEffect_4BPmin) # 1640 positions different ONLY following paternal treatments
length(DMS_G2onlyEffect_4BPmin) # 309 positions different ONLY following offspring treatments
length(DMS_G1G2additiveEffect_4BPmin) # 173 positions
length(DMS_G1G2interactionEffect_4BPmin) # 151 positions
getCorG1G2methByEffect <- function(myeffect){
A=methylKit::select(uniteCovHALF_G1_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$start) %in%
myeffect))
B=methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$start) %in%
myeffect))
DMS=paste(A$chr, A$start)
A=percMethylation(A) %>% data.frame
A$DMS = DMS
B=percMethylation(B) %>% data.frame
B$DMS = DMS
A=melt(A)
names(A)[names(A)%in% "variable"]="SampleID"
names(A)[names(A)%in% "value"]="G1methylation"
A=merge(A, fullMetadata_PAR[c("SampleID", "brotherPairID", "trtG1G2")])
names(A)[names(A)%in% "trtG1G2"]="patTrt"
A=A[!names(A)%in% "SampleID"] # rm sample ID for fathers, as only one per BP
B=melt(B)
names(B)[names(B)%in% "variable"]="SampleID"
names(B)[names(B)%in% "value"]="G2methylation"
B=merge(B, fullMetadata_OFFS[c("SampleID", "brotherPairID", "trtG1G2", "patTrt")])
B$patTrt[B$patTrt %in% "controlP"]="Control"
B$patTrt[B$patTrt %in% "infectedP"]="Exposed"
AB=merge(A, B)
AB=na.omit(AB[c("G1methylation", "G2methylation")])
return(list(cor.test(x=AB$G1methylation, y=AB$G2methylation, method="spearman"),
spearmanRho(x=AB$G1methylation, y=AB$G2methylation, method="spearman", R=1000,ci=T)))
}
DMSalleffectsDF = data.frame(DMS=c(DMS_G1onlyEffect_4BPmin, DMS_G2onlyEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin, DMS_G1G2interactionEffect_4BPmin),
effect=c(rep("G1", length(DMS_G1onlyEffect_4BPmin)),
rep("G2", length(DMS_G2onlyEffect_4BPmin)),
rep("addit", length(DMS_G1G2additiveEffect_4BPmin)),
rep("inter", length(DMS_G1G2interactionEffect_4BPmin))))
A=methylKit::select(uniteCovHALF_G1_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$start) %in%
DMSalleffectsDF$DMS))
B=methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$start) %in%
DMSalleffectsDF$DMS))
DMS=paste(A$chr, A$start)
A=percMethylation(A) %>% data.frame
A$DMS = DMS
B=percMethylation(B) %>% data.frame
B$DMS = DMS
A=melt(A)
names(A)[names(A)%in% "variable"]="SampleID"
names(A)[names(A)%in% "value"]="G1methylation"
A=merge(A, fullMetadata_PAR[c("SampleID", "brotherPairID", "trtG1G2")])
names(A)[names(A)%in% "trtG1G2"]="patTrt"
A=A[!names(A)%in% "SampleID"] # rm sample ID for fathers, as only one per BP
B=melt(B)
names(B)[names(B)%in% "variable"]="SampleID"
names(B)[names(B)%in% "value"]="G2methylation"
B=merge(B, fullMetadata_OFFS[c("SampleID", "brotherPairID", "trtG1G2", "patTrt")])
B$patTrt[B$patTrt %in% "controlP"]="Control"
B$patTrt[B$patTrt %in% "infectedP"]="Exposed"
AB=merge(A, B)
AB=merge(AB, DMSalleffectsDF)
AB$SampleID=as.character(AB$SampleID)
AB$effect <- factor(AB$effect,levels = c("G1", "G2", "addit", "inter"))
AB=na.omit(AB[c("G1methylation", "G2methylation", "effect", "brotherPairID", "SampleID")])
mod1=lme4::lmer(G2methylation~G1methylation * effect + (1|brotherPairID/SampleID), data=AB)
mod2=lme4::lmer(G2methylation~G1methylation + effect + (1|brotherPairID/SampleID), data=AB)
mod3=lme4::lmer(G2methylation~G1methylation + (1|brotherPairID/SampleID), data=AB)
mod4=lme4::lmer(G2methylation~effect + (1|brotherPairID/SampleID), data=AB)
lmtest::lrtest(mod1, mod2)
lmtest::lrtest(mod1, mod3)
lmtest::lrtest(mod1, mod4)
mod1
emmeans(mod1, list(pairwise ~ effect), adjust = "tukey")
emm = emmeans(mod1, ~ G1methylation)
pairs(emm)
emm = emmeans(mod1, ~ G1methylation * effect)
pairs(emm)
emmeans(mod1, list(pairwise ~ effect), adjust = "tukey")
emmeans(mod1, list(pairwise ~ effect), adjust = "tukey")
emmp <- emmeans(mod1, pairwise ~ effect, adjust = "tukey")
summary( emmp, infer=TRUE)
write.csv(summary(emmp, infer=TRUE), file = "../../dataOut/SuppTableTukeyG1G2.csv", row.names = F)
summary(emmp, infer=TRUE)
summary(emmp, infer=TRUE)$contrast
write.csv(summary(emmp, infer=TRUE)$contrast, file = "../../dataOut/SuppTableTukeyG1G2.csv", row.names = F)
dfTukey = summary(emmp, infer=TRUE)$contrast
dfTukey$contrast
dfTukey$estimate
dfTukey %>%
dplyr::mutate_if(is.numeric, round)
dfTukey %>%
dplyr::mutate_if(is.numeric, round(2))
dfTukey %>%
dplyr::mutate_if(is.numeric, round(digits = 2))
dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 2)
dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 4)
dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 3)
dfTukey
dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 3)
dfTukey2 = dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 3)
dfTukey2[-8]
rbind(dfTukey2[-8], dfTukey[8]
rbind(dfTukey2[-8], dfTukey[8]
rbind(dfTukey2[-8], dfTukey[8])
cbind(dfTukey2[-8], dfTukey[8])
dfTukey[8]
dfTukey2 = dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 4)
dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 4)
dfTukey = dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 4)
dfTukey = summary(emmp, infer=TRUE)$contrast
dfTukey = dfTukey %>%
dplyr::mutate_if(is.numeric, round, digits = 4)
dfTukey
write.csv(dfTukey, file = "../../dataOut/SuppTableTukeyG1G2.csv", row.names = F)
citation(emmeans)
cite(emmeans)
cite("emmeans")
cite(bib = "emmeans")
cite(key = "emmeans")
citation(package = "emmeans")
citation(package = "lmtest")

test %>% data.frame

