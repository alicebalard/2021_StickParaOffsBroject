length(DMS_G2onlyEffect),
length(DMS_G1G2interactionEffect),
length(DMS_G1G2additiveEffect)),
DMSgroup = c("Paternal only", "Offspring only", "interaction", "additive"),
NbrBP = rep(NBP, 4)))
}
A=do.call(rbind, lapply(1:6, getDMS_runOver1to8BP))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()
B=do.call(rbind, lapply(1:7, getDMS_runOver1to8BP))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
# scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
A
A$DMSgroup
factor(A$DMSgroup, levels = c("small", "medium", "large"))
levels(A$DMSgroup)
A$DMSgroup <- as.factor(A$DMSgroup)
levels(A$DMSgroup)
list(infection-induced  = "Offspring only", intergenerational = "Paternal only")
list("infection-induced"  = "Offspring only", "intergenerational" = "Paternal only")
levels(A$DMSgroup) = list("infection-induced"  = "Offspring only", "intergenerational" = "Paternal only")
A$DMSgroup
A=do.call(rbind, lapply(1:6, getDMS_runOver1to8BP))
A$DMSgroup <- as.factor(A$DMSgroup)
levels(A$DMSgroup) = list("Additive" = "additive", "Interaction" = "interaction",
"Infection-induced"  = "Offspring only", "Intergenerational" = "Paternal only")
factor(A$DMSgroup, levels = c("Intergenerational", "Infection-induced", "Additive", "Interaction"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
factor(A$DMSgroup, levels = c("Intergenerational", "Infection-induced", "Additive", "Interaction"))
A$DMSgroup <- factor(A$DMSgroup, levels = c("Intergenerational", "Infection-induced", "Additive", "Interaction"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)")
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS per category")
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
theme(legend.title = "Categories")
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
theme(legend.title = element_text("Categories"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1)
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:6)
pdf(file = "../../dataOut/justify4BP.pdf", width = 8, height = 6)
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:6)
dev.off()
NBP = 7
# PARENTAL effect: DMS found in either CC-TC or CT-TT comparisons
df_PaternalEffect = unique(rbind(get2keepFULLdfBP(Compa = vecCompa[1], NBP = NBP, myeffect = "G1all"),
get2keepFULLdfBP(Compa = vecCompa[2], NBP = NBP, myeffect = "G1all")))
DMS_PaternalEffect = unique(df_PaternalEffect$DMS)
# OFFSPRING effect: DMS found in either CC-CT or TC-TT comparisons
df_OffspringEffect = unique(rbind(get2keepFULLdfBP(Compa = vecCompa[3], NBP = NBP, myeffect = "G2all"),
get2keepFULLdfBP(Compa = vecCompa[4], NBP = NBP, myeffect = "G2all")))
DMS_OffspringEffect = unique(df_OffspringEffect$DMS)
# Get the raw methylation from the DMS which are in both Paternal and Offspring effects
subUnite = methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$end) %in%
intersect(DMS_OffspringEffect, DMS_PaternalEffect)))
# Get mean methylation per brother pair, per treatment:
getMeanMeth <- function(subUnite, BP, mytrt){
metadata = fullMetadata_OFFS[fullMetadata_OFFS$brotherPairID %in% BP & fullMetadata_OFFS$trtG1G2 %in% mytrt, ]
myuniteCov = reorganize(methylObj = subUnite, treatment = metadata$trtG1G2_NUM, sample.ids = metadata$ID)
## remove bases where NO fish in this BP has a coverage
myuniteCov = methylKit::select(myuniteCov, which(!is.na(rowSums(percMethylation(myuniteCov)))))
# calculate mean methylation
df = data.frame(DMS = paste(myuniteCov$chr, myuniteCov$end), meanMeth = rowMeans(percMethylation(myuniteCov)), trt = mytrt, BP = BP)
return(df)
}
# We will apply the following function to all BP and all trt:
vecBP <- unique(fullMetadata_OFFS$brotherPairID)
vectrt <- unique(fullMetadata_OFFS$trtG1G2)
## Loop over all BP & trt
df = data.frame(DMS=NULL, meanMeth=NULL, trt=NULL, BP=NULL) # empty df
for (i in 1:length(vecBP)){
for (j in 1:length(vectrt)){
subdf = getMeanMeth(subUnite = subUnite, BP = vecBP[[i]], mytrt = vectrt[[j]])
df = rbind(df, subdf)
}
}
vecBP
vectrt
subUnite
uniteCovHALF_G2_woSexAndUnknowChrOVERLAP
DMS_OffspringEffect
DMS_PaternalEffect
DMS_OffspringEffect
intersect(DMS_OffspringEffect, DMS_PaternalEffect)
# Get the raw methylation from the DMS which are in both Paternal and Offspring effects
subUnite = methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$end) %in%
intersect(DMS_OffspringEffect, DMS_PaternalEffect)))
subUnite
length(subUnite)
length(subUnite$chr)
DMS_PaternalEffect[!DMS_PaternalEffect %in% c(DMS_G1G2interactionEffect, DMS_G1G2additiveEffect)]
DMS_PaternalEffect
rm(NBP)
getDMS_runOver1to8BP <- function(NBP){
# PARENTAL effect: DMS found in either CC-TC or CT-TT comparisons
df_PaternalEffect = unique(rbind(get2keepFULLdfBP(Compa = vecCompa[1], NBP = NBP, myeffect = "G1all"),
get2keepFULLdfBP(Compa = vecCompa[2], NBP = NBP, myeffect = "G1all")))
DMS_PaternalEffect = unique(df_PaternalEffect$DMS)
# OFFSPRING effect: DMS found in either CC-CT or TC-TT comparisons
df_OffspringEffect = unique(rbind(get2keepFULLdfBP(Compa = vecCompa[3], NBP = NBP, myeffect = "G2all"),
get2keepFULLdfBP(Compa = vecCompa[4], NBP = NBP, myeffect = "G2all")))
DMS_OffspringEffect = unique(df_OffspringEffect$DMS)
##########
## OVERLAP=DMS found in G1 & G2
# case 1 -> INTERACTION effects DMS found in CC-CT which show a differential methylation in the opposite direction in TC-TT, or inversely (reaction norm are inversed) in most of the brother pairs (5 or more)
# case 2 -> ADDITIVE effect: no slope inversion (4 or more)
# Get the raw methylation from the DMS which are in both Paternal and Offspring effects
subUnite = methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$end) %in%
intersect(DMS_OffspringEffect, DMS_PaternalEffect)))
# for a high N, no more intersect DMS G1 G2:
if(length(subUnite$chr) == 0){
dataFinal = data.frame(NbrDMS = c(length(DMS_PaternalEffect),
length(DMS_OffspringEffect)),
DMSgroup = as.factor(c("Intergenerational", "Infection-induced")),
NbrBP = rep(NBP, 2))
} else {
# Get mean methylation per brother pair, per treatment:
getMeanMeth <- function(subUnite, BP, mytrt){
metadata = fullMetadata_OFFS[fullMetadata_OFFS$brotherPairID %in% BP & fullMetadata_OFFS$trtG1G2 %in% mytrt, ]
myuniteCov = reorganize(methylObj = subUnite, treatment = metadata$trtG1G2_NUM, sample.ids = metadata$ID)
## remove bases where NO fish in this BP has a coverage
myuniteCov = methylKit::select(myuniteCov, which(!is.na(rowSums(percMethylation(myuniteCov)))))
# calculate mean methylation
df = data.frame(DMS = paste(myuniteCov$chr, myuniteCov$end), meanMeth = rowMeans(percMethylation(myuniteCov)), trt = mytrt, BP = BP)
return(df)
}
# We will apply the following function to all BP and all trt:
vecBP <- unique(fullMetadata_OFFS$brotherPairID)
vectrt <- unique(fullMetadata_OFFS$trtG1G2)
## Loop over all BP & trt
df = data.frame(DMS=NULL, meanMeth=NULL, trt=NULL, BP=NULL) # empty df
for (i in 1:length(vecBP)){
for (j in 1:length(vectrt)){
subdf = getMeanMeth(subUnite = subUnite, BP = vecBP[[i]], mytrt = vectrt[[j]])
df = rbind(df, subdf)
}
}
## Add G1 & G2 trt
df$G1trt = ifelse(df$trt %in% c("NE_control", "NE_exposed"), "control", "infected")
df$G2trt = ifelse(df$trt %in% c("NE_control", "E_control"), "control", "infected")
## cut by G1 trt & merge
dfcp = df[df$G1trt %in% "control"  ,]
dfcpco = dfcp[dfcp$G2trt %in% "control",]; dfcpio = dfcp[dfcp$G2trt %in% "infected",]
dfcp = merge(dfcpco, dfcpio, by = c("DMS", "BP")) %>%
mutate(meanDiffMeth=meanMeth.y - meanMeth.x) %>% dplyr::select(c("DMS", "BP", "meanDiffMeth"))
dfip = df[df$G1trt %in% "infected",]
dfipco = dfip[dfip$G2trt %in% "control",]; dfipio = dfip[dfip$G2trt %in% "infected",]
dfip = merge(dfipco, dfipio, by = c("DMS", "BP")) %>%
mutate(meanDiffMeth=meanMeth.y - meanMeth.x) %>% dplyr::select(c("DMS", "BP", "meanDiffMeth"))
df2=merge(dfcp,dfip, by=c("DMS", "BP"))
## interaction if slope inversion/additive if not
df2$inversionSlopeReactionNorms = FALSE
df2[!sign(df2$meanDiffMeth.x) == sign(df2$meanDiffMeth.y),"inversionSlopeReactionNorms"] = TRUE
names(df2)[names(df2) %in% "meanDiffMeth.x"] = "meanDiffMeth.controlG1"
names(df2)[names(df2) %in% "meanDiffMeth.y"] = "meanDiffMeth.infectedG1"
####################
# Get a vector of DMS for each category:
## A DMS is "interaction" if there are more often slope inversion than not
DMS_G1G2interactionEffect = df2 %>% group_by(DMS) %>% dplyr::summarise(count=n(), inversionSlopeRate=sum(inversionSlopeReactionNorms)/count,
effect=ifelse(inversionSlopeRate>0.5, "interaction", "additive")) %>%
dplyr::filter(effect=="interaction") %>% dplyr::select(DMS) %>% unlist()
DMS_G1G2additiveEffect = df2 %>% group_by(DMS) %>%
dplyr::summarise(count=n(), inversionSlopeRate=sum(inversionSlopeReactionNorms)/count, effect=ifelse(inversionSlopeRate>0.5, "interaction", "additive")) %>%
dplyr::filter(effect=="additive") %>% dplyr::select(DMS) %>% unlist()
DMS_G1onlyEffect = DMS_PaternalEffect[!DMS_PaternalEffect %in% c(DMS_G1G2interactionEffect, DMS_G1G2additiveEffect)]
DMS_G2onlyEffect = DMS_OffspringEffect[!DMS_OffspringEffect %in% c(DMS_G1G2interactionEffect, DMS_G1G2additiveEffect)]
dataFinal = data.frame(NbrDMS = c(length(DMS_G1onlyEffect),
length(DMS_G2onlyEffect),
length(DMS_G1G2additiveEffect),
length(DMS_G1G2interactionEffect)),
DMSgroup = as.factor(c("Intergenerational", "Infection-induced",  "Additive", "Interaction")),
NbrBP = rep(NBP, 4))
}
return(dataFinal)
}
A=do.call(rbind, lapply(1:8, getDMS_runOver1to8BP))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:6)
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:8)
A
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
# scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:8)
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:8)
A
pdf(file = "../../dataOut/justify4BP.pdf", width = 8, height = 6)
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:8)
dev.off()
# sizes <-
factor(A$DMSgroup)#, levels = c("small", "medium", "large"))
# sizes <-
factor(A$DMSgroup, levels = c("Intergenerational", "Infection-induced",  "Additive", "Interaction"))
A$DMSgroup = factor(A$DMSgroup, levels = c("Intergenerational", "Infection-induced",  "Additive", "Interaction"))
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:8)
pdf(file = "../../dataOut/justify4BP.pdf", width = 8, height = 6)
ggplot(A, aes(fill=DMSgroup, y=NbrDMS, x=NbrBP)) +
geom_bar(position="stack", stat="identity")+
scale_y_log10()+
scale_fill_manual(values = c("#e69f00", "#56b4e9", "#009e73", "#cc79a7"))+
xlab("Number of families (brother pairs)") +
ylab("Number of DMS")+
guides(fill=guide_legend(title="Categories"))+
scale_x_continuous(breaks = 1:8)
dev.off()
A
# Identify DMS in 4 BP or more:
# PARENTAL effect: DMS found in either CC-TC or CT-TT comparisons
df_PaternalEffect_4BPmin = unique(rbind(get2keepFULLdfBP(Compa = vecCompa[1], NBP = 4, myeffect = "G1all"),
get2keepFULLdfBP(Compa = vecCompa[2], NBP = 4, myeffect = "G1all")))
DMS_PaternalEffect_4BPmin = unique(df_PaternalEffect_4BPmin$DMS)
# OFFSPRING effect: DMS found in either CC-CT or TC-TT comparisons
df_OffspringEffect_4BPmin = unique(rbind(get2keepFULLdfBP(Compa = vecCompa[3], NBP = 4, myeffect = "G2all"),
get2keepFULLdfBP(Compa = vecCompa[4], NBP = 4, myeffect = "G2all")))
DMS_OffspringEffect_4BPmin = unique(df_OffspringEffect_4BPmin$DMS)
##########
## OVERLAP=DMS found in G1 & G2
# case 1 -> INTERACTION effects DMS found in CC-CT which show a differential methylation in the opposite direction in TC-TT, or inversely (reaction norm are inversed) in most of the brother pairs (5 or more)
# case 2 -> ADDITIVE effect: no slope inversion (4 or more)
# Get the raw methylation from the DMS which are in both Paternal and Offspring effects
subUnite = methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$end) %in%
intersect(DMS_OffspringEffect_4BPmin, DMS_PaternalEffect_4BPmin)))
# Get mean methylation per brother pair, per treatment:
getMeanMeth <- function(subUnite, BP, mytrt){
metadata = fullMetadata_OFFS[fullMetadata_OFFS$brotherPairID %in% BP & fullMetadata_OFFS$trtG1G2 %in% mytrt, ]
myuniteCov = reorganize(methylObj = subUnite, treatment = metadata$trtG1G2_NUM, sample.ids = metadata$ID)
## remove bases where NO fish in this BP has a coverage
myuniteCov = methylKit::select(myuniteCov, which(!is.na(rowSums(percMethylation(myuniteCov)))))
# calculate mean methylation
df = data.frame(DMS = paste(myuniteCov$chr, myuniteCov$end), meanMeth = rowMeans(percMethylation(myuniteCov)), trt = mytrt, BP = BP)
return(df)
}
# We will apply the following function to all BP and all trt:
vecBP <- unique(fullMetadata_OFFS$brotherPairID)
vectrt <- unique(fullMetadata_OFFS$trtG1G2)
## Loop over all BP & trt
df = data.frame(DMS=NULL, meanMeth=NULL, trt=NULL, BP=NULL) # empty df
for (i in 1:length(vecBP)){
for (j in 1:length(vectrt)){
subdf = getMeanMeth(subUnite = subUnite, BP = vecBP[[i]], mytrt = vectrt[[j]])
df = rbind(df, subdf)
}
}
## Add G1 & G2 trt
df$G1trt = ifelse(df$trt %in% c("NE_control", "NE_exposed"), "control", "infected")
df$G2trt = ifelse(df$trt %in% c("NE_control", "E_control"), "control", "infected")
## cut by G1 trt & merge
dfcp = df[df$G1trt %in% "control"  ,]
dfcpco = dfcp[dfcp$G2trt %in% "control",]; dfcpio = dfcp[dfcp$G2trt %in% "infected",]
dfcp = merge(dfcpco, dfcpio, by = c("DMS", "BP")) %>%
mutate(meanDiffMeth=meanMeth.y - meanMeth.x) %>% dplyr::select(c("DMS", "BP", "meanDiffMeth"))
dfip = df[df$G1trt %in% "infected",]
dfipco = dfip[dfip$G2trt %in% "control",]; dfipio = dfip[dfip$G2trt %in% "infected",]
dfip = merge(dfipco, dfipio, by = c("DMS", "BP")) %>%
mutate(meanDiffMeth=meanMeth.y - meanMeth.x) %>% dplyr::select(c("DMS", "BP", "meanDiffMeth"))
df2=merge(dfcp,dfip, by=c("DMS", "BP"))
## interaction if slope inversion/additive if not
df2$inversionSlopeReactionNorms = FALSE
df2[!sign(df2$meanDiffMeth.x) == sign(df2$meanDiffMeth.y),"inversionSlopeReactionNorms"] = TRUE
names(df2)[names(df2) %in% "meanDiffMeth.x"] = "meanDiffMeth.controlG1"
names(df2)[names(df2) %in% "meanDiffMeth.y"] = "meanDiffMeth.infectedG1"
####################
# Get a vector of DMS for each category:
## A DMS is "interaction" if there are more often slope inversion than not
DMS_G1G2interactionEffect_4BPmin = df2 %>% group_by(DMS) %>% dplyr::summarise(count=n(), inversionSlopeRate=sum(inversionSlopeReactionNorms)/count,                                                                 effect=ifelse(inversionSlopeRate>0.5, "interaction", "additive")) %>%
dplyr::filter(effect=="interaction") %>% dplyr::select(DMS) %>% unlist()
DMS_G1G2additiveEffect_4BPmin = df2 %>% group_by(DMS) %>%
dplyr::summarise(count=n(), inversionSlopeRate=sum(inversionSlopeReactionNorms)/count, effect=ifelse(inversionSlopeRate>0.5, "interaction", "additive")) %>%
dplyr::filter(effect=="additive") %>% dplyr::select(DMS) %>% unlist()
DMS_G1onlyEffect_4BPmin = DMS_PaternalEffect_4BPmin[!DMS_PaternalEffect_4BPmin %in% c(DMS_G1G2interactionEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin)]
DMS_G2onlyEffect_4BPmin = DMS_OffspringEffect_4BPmin[!DMS_OffspringEffect_4BPmin %in% c(DMS_G1G2interactionEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin)]
####################
# Make a BIG df with all DMS, effects and BP (this time, the effects are DMS-BP specific, not global)
df_effects_full = merge(unique(df_PaternalEffect_4BPmin[c("BP", "DMS","globalEffect")]),
unique(df_OffspringEffect_4BPmin[c("BP", "DMS","globalEffect")]), by=c("BP", "DMS"), all=T)
df_effects_full = merge(df_effects_full, df2, all=T)
df_effects_full$effectBPlevel[df_effects_full$globalEffect.x == "G1all"] = "G1"
df_effects_full$effectBPlevel[df_effects_full$globalEffect.y == "G2all"] = "G2"
df_effects_full$effectBPlevel[df_effects_full$inversionSlopeReactionNorms == TRUE &
df_effects_full$globalEffect.x == "G1all" & df_effects_full$globalEffect.y == "G2all"] = "inter"
df_effects_full$effectBPlevel[df_effects_full$inversionSlopeReactionNorms == FALSE &
df_effects_full$globalEffect.x == "G1all" & df_effects_full$globalEffect.y == "G2all"]= "addit"
#rm junk
rm(subUnite, df, dfcp, dfcpco, dfcpio, dfip, dfipco, dfipio, df2)
# Plot a Venn diagram
ggVennDiagram(list("Paternal effect" = DMS_PaternalEffect_4BPmin, "Offspring effect" = DMS_OffspringEffect_4BPmin, "InteractionEffects" = DMS_G1G2interactionEffect_4BPmin),
label_alpha = 0) + scale_color_manual(values = c(1,1,1))+
scale_fill_gradient(low="white",high = "yellow") + theme(legend.position = "none")
# Save:
pdf(file = "../../dataOut/DMS3groupsVenn.pdf", width = 7, height = 6)
ggVennDiagram(list("Paternal effect" = DMS_PaternalEffect_4BPmin, "Offspring effect" = DMS_OffspringEffect_4BPmin, "InteractionEffects" = DMS_G1G2interactionEffect_4BPmin),
label_alpha = 0) + scale_color_manual(values = c(1,1,1))+
scale_fill_gradient(low="white",high = "yellow") + theme(legend.position = "none")
dev.off()
#######################
## Where are these DMS?
DMSvec=unique(c(DMS_G1onlyEffect_4BPmin, DMS_G2onlyEffect_4BPmin, DMS_G1G2additiveEffect_4BPmin, DMS_G1G2interactionEffect_4BPmin))
getFeature <- function(DMSvec){
# Change the DMS vector into a GRange:
GRangeOBJ = makeGRangesFromDataFrame(data.frame(chr=sapply(strsplit(DMSvec, " "), `[`, 1),
start=sapply(strsplit(DMSvec, " "), `[`, 2),
end=sapply(strsplit(DMSvec, " "), `[`, 2),
DMS=DMSvec), keep.extra.columns = T)
annotateWithGeneParts(target = as(GRangeOBJ,"GRanges"), feature = annotBed12)
}
A=getFeature(DMSvec = DMSvec)
print(paste0("Positions of the ", length(DMSvec)," DMS:"))
print(A)
# A1 = getFeature(DMSvec = DMS_G1onlyEffect_4BPmin)
# print(paste0("Positions of the ", length(DMS_G1onlyEffect_4BPmin)," intergenerational DMS:"))
# print(A1@precedence)
#
# A2 = getFeature(DMSvec = DMS_G2onlyEffect_4BPmin)
# print(paste0("Positions of the ", length(DMS_G1onlyEffect_4BPmin)," infection-induced DMS:"))
# print(A2@precedence)
#
# A3 = getFeature(DMSvec = DMS_G1G2additiveEffect_4BPmin)
# print(paste0("Positions of the ", length(DMS_G1onlyEffect_4BPmin)," additive DMS:"))
# print(A3@precedence)
#
# A4 = getFeature(DMSvec = DMS_G1G2interactionEffect_4BPmin)
# print(paste0("Positions of the ", length(DMS_G1onlyEffect_4BPmin)," interaction DMS:"))
# print(A4@precedence)
#######################
## Are the positions of DMS on features random? Comparison with sequenced CpGs which are not DMS
# A=getFeature(DMSvec = DMSvec)
AnonDMS= getFeature(DMSvec = paste(uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$start))
ChiTable1 = merge((A@members %>% data.frame() %>% mutate(feature=ifelse(prom==1, "promoter",
ifelse(exon==1, "exon",
ifelse(intron==1, "intron", "intergenic")))) %>%
dplyr::select(feature) %>%
table %>% melt %>% dplyr::rename(DMS=value)),
(AnonDMS@members %>% data.frame() %>% mutate(feature=ifelse(prom==1, "promoter",
ifelse(exon==1, "exon",
ifelse(intron==1, "intron", "intergenic")))) %>%
dplyr::select(feature) %>%
table %>% melt %>% dplyr::rename(nonDMS=value)))
chisq.test(ChiTable1[c("DMS", "nonDMS")])
# X-squared = 190.28, df = 3, p-value < 2.2e-16
## Positions on chromosomes?
df = A@members %>% data.frame() %>% mutate(feature=ifelse(prom==1, "promoter",
ifelse(exon==1, "exon",
ifelse(intron==1, "intron", "intergenic"))))%>%
mutate(DMS=DMSvec,
chr=sapply(strsplit(DMSvec, " "), `[`, 1)%>% str_remove(.,"Gy_chr"))
melt(table(df$feature))
df2 = melt(table(df$feature, df$chr))
names(df2)=c("feature","chromosome", "nDMS")
# Number of positions sequenced on each chromosome
df3 = table(uniteCovHALF_G1_woSexAndUnknowChrOVERLAP$chr) %>% data.frame() %>%
mutate(chromosome=str_remove(Var1,"Gy_chr"), nCpG=Freq)
df=merge(df2, df3) %>% dplyr::select(c(feature, chromosome, nDMS, nCpG))%>%
mutate(percent=nDMS/nCpG)
df$feature=factor(df$feature, levels = c("promoter", "exon", "intron", "intergenic"))
dfChi = df %>% group_by(chromosome) %>% dplyr::summarise(nDMS=sum(nDMS)) %>%
merge(df3)
chisq.test(dfChi[c("nDMS", "nCpG")])
# X-squared = 233.87, df = 19, p-value < 2.2e-16
dfChi %>% mutate(percent=nDMS/(nCpG)*100) %>% arrange(percent)
# range from 0.13% (XV) to 0.39% of CpG beign DMS (XVIII)
#### Plot sup fig 1
# previous
# #pdf(file = "../../dataOut/suppl1_featureDist.pdf", width = 8, height = 6)
# ggplot(df, aes(x=chromosome, y=percent, fill=feature))+
#   geom_bar(stat = "identity")+
#   ylab("Percentage of DMS among CpG sequenced")+
#   scale_y_continuous(labels=scales::percent)+
#   scale_fill_manual(values = c("red", "purple", "blue", "grey"))
# #dev.off()
donutDF = ChiTable1 %>% dplyr::mutate(percDMS=DMS/sum(DMS)*100, percNonDMS=nonDMS/sum(nonDMS)*100) %>%
dplyr::select("feature", "percDMS", "percNonDMS") %>% melt
P1 <- ggplot(donutDF, aes(x = variable, y = value, fill = feature)) +
geom_col() +  scale_x_discrete(limits = c(" ", "percNonDMS","percDMS")) +
scale_fill_viridis_d()+
coord_polar("y")+
theme_void()+
annotate("text", x = 3.8, y = 0, label = "DMS")+
annotate("text", x = 1, y = 0, label = "non DMS")
P2 <- ggplot(df, aes(x=chromosome, y=percent))+
geom_bar(stat = "identity", col= "black", fill="black")+
ylab("Percentage of DMS among CpG sequenced")+
scale_y_continuous(labels=scales::percent)
pdf(file = "../../dataOut/suppl1.pdf", width = 8, height = 6)
cowplot::plot_grid(P1, P2, nrow = 2, labels = c("A", "B"))
dev.off()
lmer(formula = attr(attr(lmerTest::step(mymod, reduce.random = F), "drop1"), "heading")[3],
data=mydf, REML = F)
lmerTest::lmer(BCI ~ value*No.Worms*PAT + (1|brotherPairID)+ (1|Sex), data=mydf)
mygene = "GYAR"
mypos = paste(annotPCAaxisFull[annotPCAaxisFull$GeneSymbol %in% mygene,"chrom"],
annotPCAaxisFull[annotPCAaxisFull$GeneSymbol %in% mygene,"start"])
mydf = methylKit::select(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP,
which(paste(uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$chr, uniteCovHALF_G2_woSexAndUnknowChrOVERLAP$start) %in%
mypos[1])) %>%
methylKit::percMethylation() %>% melt %>% dplyr::select(c("Var2", "value")) %>% dplyr::rename("SampleID"="Var2") %>%
merge(fullMetadata_OFFS)
mod = lm(`MappingEfficiency%BSBoldvsGynogen` ~ Sex, data = fullMetadata_OFFS)
mod_Tol.Meth <- lmer(BCI ~ res_Nbr_methCpG_Nbr_coveredCpG_div1000*No.Worms*PAT + (1|brotherPairID)+ (1|Sex),
data=fullMetadata_OFFS, REML = F)
## Model selection:
step(mod_Tol.Meth, reduce.random = F) # Model found: BCI ~ No.Worms + PAT + (1 | brotherPairID) + (1 | Sex) + No.Worms:PAT
